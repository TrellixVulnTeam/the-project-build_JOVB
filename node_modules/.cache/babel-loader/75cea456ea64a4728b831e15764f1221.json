{"ast":null,"code":"var _jsxFileName = \"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/WalletBalance.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { BalanceMsg } from \"../../components/BalanceMsg\";\nimport { useContext } from \"react\";\nimport { MyContext } from \"../Header2\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const WalletBalance = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    image,\n    address,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const {\n    formattedDappTokenBalance\n  } = useContext(MyContext);\n  const ethBalance = useEtherBalance(account); // useTokenBalance(address, account)\n  // console.log(tokenBalance?.toString())\n\n  const formattedEthBalance = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0;\n  const tokenBalance = useTokenBalance(address, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  console.log(\"This is in WalletBalance.tsx: \" + formattedDappTokenBalance);\n  return name == \"WETH\" ? /*#__PURE__*/_jsxDEV(BalanceMsg, {\n    label: `Your ${name} balance:`,\n    tokenImgSrc: image,\n    amount: formattedEthBalance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this) : /*#__PURE__*/_jsxDEV(BalanceMsg, {\n    label: `Your ${name} balance:`,\n    tokenImgSrc: image,\n    amount: formattedDappTokenBalance\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 12\n  }, this);\n};\n\n_s(WalletBalance, \"qMXIZW5/l6OLQvZM+dAnMyAak3I=\", false, function () {\n  return [useEthers, useEtherBalance, useTokenBalance];\n});\n\n_c = WalletBalance;\n\nvar _c;\n\n$RefreshReg$(_c, \"WalletBalance\");","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/WalletBalance.tsx"],"names":["useEthers","useTokenBalance","useEtherBalance","formatUnits","BalanceMsg","useContext","MyContext","WalletBalance","token","image","address","name","account","formattedDappTokenBalance","ethBalance","formattedEthBalance","parseFloat","tokenBalance","formattedTokenBalance","console","log"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,eAArC,QAA4D,eAA5D;AAEA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,QAA2B,6BAA3B;AACA,SAASC,UAAT,QAA2B,OAA3B;AACA,SAASC,SAAT,QAA0B,YAA1B;;AAMA,OAAO,MAAMC,aAAa,GAAG,QAAmC;AAAA;;AAAA,MAAlC;AAAEC,IAAAA;AAAF,GAAkC;AAC5D,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA,OAAT;AAAkBC,IAAAA;AAAlB,MAA2BH,KAAjC;AACA,QAAM;AAAEI,IAAAA;AAAF,MAAcZ,SAAS,EAA7B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAgCR,UAAU,CAACC,SAAD,CAAhD;AAEA,QAAMQ,UAAU,GAAGZ,eAAe,CAACU,OAAD,CAAlC,CAL4D,CAM5D;AACA;;AACA,QAAMG,mBAA2B,GAAGD,UAAU,GAAGE,UAAU,CAACb,WAAW,CAACW,UAAD,EAAa,EAAb,CAAZ,CAAb,GAA6C,CAA3F;AACA,QAAMG,YAAY,GAAGhB,eAAe,CAACS,OAAD,EAAUE,OAAV,CAApC;AACA,QAAMM,qBAA6B,GAAGD,YAAY,GAAGD,UAAU,CAACb,WAAW,CAACc,YAAD,EAAe,EAAf,CAAZ,CAAb,GAA+C,CAAjG;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,mCAAmCP,yBAA/C;AAEA,SAASF,IAAI,IAAI,MAAT,gBACH,QAAC,UAAD;AAAY,IAAA,KAAK,EAAG,QAAOA,IAAK,WAAhC;AAA4C,IAAA,WAAW,EAAEF,KAAzD;AAAgE,IAAA,MAAM,EAAEM;AAAxE;AAAA;AAAA;AAAA;AAAA,UADG,gBAED,QAAC,UAAD;AAAY,IAAA,KAAK,EAAG,QAAOJ,IAAK,WAAhC;AAA4C,IAAA,WAAW,EAAEF,KAAzD;AAAgE,IAAA,MAAM,EAAEI;AAAxE;AAAA;AAAA;AAAA;AAAA,UAFP;AAIH,CAjBM;;GAAMN,a;UAEWP,S,EAGDE,e,EAIED,e;;;KATZM,a","sourcesContent":["import { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components/BalanceMsg\"\nimport { useContext } from \"react\"\nimport { MyContext } from \"../Header2\"\n\nexport interface WalletBalanceProps {\n    token: Token\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n    const { image, address, name } = token\n    const { account } = useEthers()\n    const { formattedDappTokenBalance } = useContext(MyContext)\n\n    const ethBalance = useEtherBalance(account)\n    // useTokenBalance(address, account)\n    // console.log(tokenBalance?.toString())\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n    const tokenBalance = useTokenBalance(address, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    console.log(\"This is in WalletBalance.tsx: \" + formattedDappTokenBalance)\n\n    return ((name == \"WETH\") ?\n        (<BalanceMsg label={`Your ${name} balance:`} tokenImgSrc={image} amount={formattedEthBalance} />)\n        : (<BalanceMsg label={`Your ${name} balance:`} tokenImgSrc={image} amount={formattedDappTokenBalance} />))\n\n}"]},"metadata":{},"sourceType":"module"}