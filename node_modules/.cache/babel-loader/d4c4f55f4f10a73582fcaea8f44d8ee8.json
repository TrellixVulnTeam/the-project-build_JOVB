{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useContext, useEffect, useState } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\"; // const MyContext = createContext('')\n\nexport const usePreSale = tokenAddress => {\n  _s();\n\n  //address\n  // abi\n  // chainId\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress\n  } = data;\n  console.log('this is the value of context chainId in usePreSale: ' + data + ' Number ' + chainIdentity + ' TokenAddress ' + tokenFarmContractAddress);\n  useEffect(() => {\n    console.log('in usePreSale chainNumber and tokenFarmAddress changed.');\n  }, [chainIdentity, tokenFarmContractAddress]);\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm; // const tokenFarmAddress = tokenFarmContractAddress\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface); //aprove\n\n  const {\n    send: approveErc20Send,\n    state: approveAndPreSaleErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 Transfer\"\n  });\n\n  const approveAndPreSale = amount => {\n    setAmountForPreSale(amount);\n    return approveErc20Send(tokenFarmContractAddress, amount);\n  };\n\n  const {\n    send: preSaleFundSend,\n    state: preSaleFundState\n  } = useContractFunction(tokenFarmContract, \"preSaleFund\", {\n    transactionName: \"Stake Tokens\"\n  });\n  const [AmountForPreSale, setAmountForPreSale] = useState(\"0\"); //useEffect\n\n  useEffect(() => {\n    if (approveAndPreSaleErc20State.status === \"Success\") {\n      preSaleFundSend(AmountForPreSale, tokenAddress);\n    }\n  }, [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress]);\n  const [state, setState] = useState(approveAndPreSaleErc20State);\n  useEffect(() => {\n    if (approveAndPreSaleErc20State.status === \"Success\") {\n      setState(preSaleFundState);\n    } else {\n      setState(approveAndPreSaleErc20State);\n    }\n  }, [approveAndPreSaleErc20State, preSaleFundState]);\n  return {\n    approveAndPreSale,\n    state\n  }; //stake tokens\n};\n\n_s(usePreSale, \"fi6rhhOaBLwV7gqQ0Gealfq5bTc=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePreSale.tsx"],"names":["useEthers","useContractFunction","TokenFarm","ERC20","utils","Contract","useContext","useEffect","useState","MyContext","usePreSale","tokenAddress","data","chainIdentity","tokenFarmContractAddress","console","log","chainId","abi","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveErc20Send","state","approveAndPreSaleErc20State","transactionName","approveAndPreSale","amount","setAmountForPreSale","preSaleFundSend","preSaleFundState","AmountForPreSale","status","setState"],"mappings":"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","sourcesContent":["import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n// const MyContext = createContext('')\n\nexport const usePreSale = (tokenAddress: string) => {\n    //address\n    // abi\n    // chainId\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    console.log('this is the value of context chainId in usePreSale: ' + data + ' Number ' + chainIdentity + ' TokenAddress ' + tokenFarmContractAddress)\n\n    useEffect(() => {\n        console.log('in usePreSale chainNumber and tokenFarmAddress changed.')\n    }, [chainIdentity, tokenFarmContractAddress])\n\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    // const tokenFarmAddress = tokenFarmContractAddress\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n\n    //aprove\n    const { send: approveErc20Send, state: approveAndPreSaleErc20State } =\n        useContractFunction(erc20Contract, \"approve\",\n            { transactionName: \"Approve ERC20 Transfer\" })\n\n    const approveAndPreSale = (amount: string) => {\n        setAmountForPreSale(amount)\n        return approveErc20Send(tokenFarmContractAddress, amount)\n    }\n\n\n\n\n    const { send: preSaleFundSend, state: preSaleFundState } =\n        useContractFunction(tokenFarmContract, \"preSaleFund\",\n            { transactionName: \"Stake Tokens\" })\n\n\n\n    const [AmountForPreSale, setAmountForPreSale] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            preSaleFundSend(AmountForPreSale, tokenAddress)\n        }\n    }, [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress])\n\n    const [state, setState] = useState(approveAndPreSaleErc20State)\n\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            setState(preSaleFundState)\n        }\n        else {\n            setState(approveAndPreSaleErc20State)\n        }\n    }, [approveAndPreSaleErc20State, preSaleFundState])\n\n\n\n\n    return { approveAndPreSale, state }\n\n    //stake tokens\n}"]},"metadata":{},"sourceType":"module"}