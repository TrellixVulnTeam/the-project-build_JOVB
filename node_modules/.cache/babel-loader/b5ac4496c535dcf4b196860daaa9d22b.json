{"ast":null,"code":"var _jsxFileName = \"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/StakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { CircularProgress, Input, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useEffect } from \"react\";\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\";\nimport { utils } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const StakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [amount, setAmount] = useState(0);\n  const {\n    notifications\n  } = useNotifications();\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event === null || event === void 0 ? void 0 : event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    approveAndStake,\n    state: approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress);\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return approveAndStake(amountAsWei.toString());\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false);\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false);\n\n  const handleCloseSnack = () => {\n    setShowErc20ApprovalSuccess(false);\n    setShowStakeTokensSuccess(false);\n  };\n\n  useEffect(() => {\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 Transfer\").length > 0) {\n      console.log(\"Approved!\");\n      setShowErc20ApprovalSuccess(true);\n      setShowStakeTokensSuccess(false);\n    }\n\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked!\");\n      setShowErc20ApprovalSuccess(false);\n      setShowStakeTokensSuccess(true);\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        className: \"form-input\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleStakeSubmit,\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 33\n        }, this) : \"Stake!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showErc20ApprovalSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"ERC-20 token transfer approved! Now approve the 2nd transaction!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showStakeTokensSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens Staked!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(StakeForm, \"hK/n8jtjWA9y4hPnwcopekXPhys=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStakeTokens];\n});\n\n_c = StakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"StakeForm\");","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/StakeForm.tsx"],"names":["useEthers","useTokenBalance","useNotifications","formatUnits","CircularProgress","Input","Snackbar","Alert","React","useState","useEffect","useStakeTokens","utils","StakeForm","token","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","amount","setAmount","notifications","handleInputChange","event","newAmount","target","value","Number","console","log","approveAndStake","state","approveAndStakeErc20State","handleStakeSubmit","amountAsWei","parseEther","toString","isMining","status","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","type","transactionName","length"],"mappings":"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","sourcesContent":["import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\"\nimport { utils } from \"ethers\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const { notifications } = useNotifications()\n\n\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n    }\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n    return (\n        <>\n            <div className=\"form\">\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <button className=\"btn\" onClick={handleStakeSubmit}\n\n                    disabled={isMining}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Stake!\"}\n\n                </button>\n            </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Staked!\n                </Alert>\n\n            </Snackbar>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}