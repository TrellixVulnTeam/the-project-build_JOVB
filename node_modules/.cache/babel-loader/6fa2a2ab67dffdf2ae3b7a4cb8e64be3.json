{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\";\nimport { utils } from \"ethers\";\nimport { useContext } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\";\nexport const useGetValues = (tokenAddress, preSaleNumber) => {\n  _s();\n\n  var _useContractCall, _useContractCall2, _useContractCall3, _useContractCall4, _useContractCall5, _useContractCall6, _useContractCall7, _useContractCall8, _useContractCall9, _useContractCall10;\n\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress,\n    dappTokenAddress\n  } = data;\n  console.log(\"this is in useGetValues: \" + tokenAddress + \" \" + preSaleNumber);\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenForm; // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const [availableToClaim] = (_useContractCall = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"getAvailablePreSaleTokensToWithdrawEachPreSale\",\n    args: [tokenAddress, account, preSaleNumber]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  const [totalClaimed] = (_useContractCall2 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"totalWithdrawnPreSaleTokensEachPreSale\",\n    args: [preSaleNumber, account]\n  })) !== null && _useContractCall2 !== void 0 ? _useContractCall2 : [];\n  const [participateInPreSaleAllocationStatus] = (_useContractCall3 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"participateInPreSaleAllocationStatus\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall3 !== void 0 ? _useContractCall3 : [];\n  const [preSaleAllocationStatus] = (_useContractCall4 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"preSaleAllocationStatus\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall4 !== void 0 ? _useContractCall4 : [];\n  const [preSaleFundEachPreSaleNumberStatus] = (_useContractCall5 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"preSaleFundEachPreSaleNumberStatus\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall5 !== void 0 ? _useContractCall5 : [];\n  const [preSaleFundFCFSEachPreSaleNumberStatus] = (_useContractCall6 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"preSaleFundFCFSEachPreSaleNumberStatus\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall6 !== void 0 ? _useContractCall6 : [];\n  const [preSaleFundEachPreSaleNumberWithoutStakingStatus] = (_useContractCall7 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"preSaleFundEachPreSaleNumberWithoutStakingStatus\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall7 !== void 0 ? _useContractCall7 : [];\n  const [claimTokensEachPreSaleStatus] = (_useContractCall8 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"claimTokensEachPreSaleStatus\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall8 !== void 0 ? _useContractCall8 : [];\n  const [timesEachPreSale] = (_useContractCall9 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"TIMESeachPreSale\",\n    args: [preSaleNumber]\n  })) !== null && _useContractCall9 !== void 0 ? _useContractCall9 : [];\n  const [times] = (_useContractCall10 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"TIMES\",\n    args: []\n  })) !== null && _useContractCall10 !== void 0 ? _useContractCall10 : [];\n  return {\n    availableToClaim,\n    totalClaimed,\n    participateInPreSaleAllocationStatus,\n    preSaleAllocationStatus,\n    preSaleFundEachPreSaleNumberStatus,\n    preSaleFundFCFSEachPreSaleNumberStatus,\n    preSaleFundEachPreSaleNumberWithoutStakingStatus,\n    claimTokensEachPreSaleStatus,\n    timesEachPreSale,\n    times\n  };\n};\n\n_s(useGetValues, \"0JEh+M1p9AIQLOp5bfcU8pczSLE=\", false, function () {\n  return [useEthers, useContractCall, useContractCall, useContractCall, useContractCall, useContractCall, useContractCall, useContractCall, useContractCall, useContractCall, useContractCall];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useGetValues.tsx"],"names":["useContractCall","useEthers","TokenForm","utils","useContext","MyContext","useGetValues","tokenAddress","preSaleNumber","data","chainIdentity","tokenFarmContractAddress","dappTokenAddress","console","log","account","chainId","abi","tokenFarmInterface","Interface","availableToClaim","address","method","args","totalClaimed","participateInPreSaleAllocationStatus","preSaleAllocationStatus","preSaleFundEachPreSaleNumberStatus","preSaleFundFCFSEachPreSaleNumberStatus","preSaleFundEachPreSaleNumberWithoutStakingStatus","claimTokensEachPreSaleStatus","timesEachPreSale","times"],"mappings":"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","sourcesContent":["import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useGetValues = (tokenAddress: string, preSaleNumber: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress } = data\n    console.log(\"this is in useGetValues: \" + tokenAddress + \" \" + preSaleNumber)\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [availableToClaim] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAvailablePreSaleTokensToWithdrawEachPreSale\",\n        args: [tokenAddress, account, preSaleNumber]\n    }) ?? []\n\n    const [totalClaimed] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalWithdrawnPreSaleTokensEachPreSale\",\n        args: [preSaleNumber, account]\n    }) ?? []\n\n    const [participateInPreSaleAllocationStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"participateInPreSaleAllocationStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleAllocationStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleAllocationStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleFundEachPreSaleNumberStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleFundEachPreSaleNumberStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleFundFCFSEachPreSaleNumberStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleFundFCFSEachPreSaleNumberStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleFundEachPreSaleNumberWithoutStakingStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleFundEachPreSaleNumberWithoutStakingStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [claimTokensEachPreSaleStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"claimTokensEachPreSaleStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [timesEachPreSale] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"TIMESeachPreSale\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [times] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"TIMES\",\n        args: []\n    }) ?? []\n\n\n    return {\n        availableToClaim, totalClaimed,\n        participateInPreSaleAllocationStatus, preSaleAllocationStatus,\n        preSaleFundEachPreSaleNumberStatus,\n        preSaleFundFCFSEachPreSaleNumberStatus,\n        preSaleFundEachPreSaleNumberWithoutStakingStatus,\n        claimTokensEachPreSaleStatus, timesEachPreSale,\n        times\n    }\n}"]},"metadata":{},"sourceType":"module"}