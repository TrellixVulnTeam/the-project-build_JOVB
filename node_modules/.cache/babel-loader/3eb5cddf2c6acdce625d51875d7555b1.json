{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\";\nimport { utils } from \"ethers\";\nimport { useContext } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\"; // : BigNumber | undefined\n\nexport const useStakingBalance = address => {\n  _s();\n\n  var _useContractCall, _useContractCall2, _useContractCall3;\n\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenForm;\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress\n  } = data; // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const [stakingBalance] = (_useContractCall = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"stakingBalance\",\n    args: [address, account]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  const [totalNumberOfStakers] = (_useContractCall2 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"uniqueTokenStakers\",\n    args: []\n  })) !== null && _useContractCall2 !== void 0 ? _useContractCall2 : [];\n  const [totalTokensStaked] = (_useContractCall3 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"totalTokensStaked\",\n    args: []\n  })) !== null && _useContractCall3 !== void 0 ? _useContractCall3 : [];\n  return {\n    stakingBalance,\n    totalNumberOfStakers,\n    totalTokensStaked\n  };\n};\n\n_s(useStakingBalance, \"04TuVj1LSITMUTQYWUlMGrbpXzk=\", false, function () {\n  return [useEthers, useContractCall, useContractCall, useContractCall];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakingBalance.tsx"],"names":["useContractCall","useEthers","TokenForm","utils","useContext","MyContext","useStakingBalance","address","account","chainId","abi","data","chainIdentity","tokenFarmContractAddress","tokenFarmInterface","Interface","stakingBalance","method","args","totalNumberOfStakers","totalTokensStaked"],"mappings":";;AAAA,SAASA,eAAT,EAA0BC,SAA1B,QAA2C,eAA3C;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,SAASC,KAAT,QAA4C,QAA5C;AAEA,SAASC,UAAT,QAA2B,OAA3B,C,CACA;;AACA,SAASC,SAAT,QAA0B,uBAA1B,C,CAGA;;AACA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAAqB;AAAA;;AAAA;;AAClD,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBR,SAAS,EAAtC;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUR,SAAhB;AAEA,QAAMS,IAAI,GAAGP,UAAU,CAACC,SAAD,CAAvB;AACA,QAAM;AAAEO,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA8CF,IAApD,CALkD,CAQlD;;AAEA,QAAMG,kBAAkB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBL,GAApB,CAA3B;AAEA,QAAM,CAACM,cAAD,wBAAmBhB,eAAe,CAAC;AACrCU,IAAAA,GAAG,EAAEI,kBADgC;AAErCP,IAAAA,OAAO,EAAEM,wBAF4B;AAGrCI,IAAAA,MAAM,EAAE,gBAH6B;AAIrCC,IAAAA,IAAI,EAAE,CAACX,OAAD,EAAUC,OAAV;AAJ+B,GAAD,CAAlC,+DAKA,EALN;AAOA,QAAM,CAACW,oBAAD,yBAAyBnB,eAAe,CAAC;AAC3CU,IAAAA,GAAG,EAAEI,kBADsC;AAE3CP,IAAAA,OAAO,EAAEM,wBAFkC;AAG3CI,IAAAA,MAAM,EAAE,oBAHmC;AAI3CC,IAAAA,IAAI,EAAE;AAJqC,GAAD,CAAxC,iEAKA,EALN;AAOA,QAAM,CAACE,iBAAD,yBAAsBpB,eAAe,CAAC;AACxCU,IAAAA,GAAG,EAAEI,kBADmC;AAExCP,IAAAA,OAAO,EAAEM,wBAF+B;AAGxCI,IAAAA,MAAM,EAAE,mBAHgC;AAIxCC,IAAAA,IAAI,EAAE;AAJkC,GAAD,CAArC,iEAKA,EALN;AAQA,SAAO;AAAEF,IAAAA,cAAF;AAAkBG,IAAAA,oBAAlB;AAAwCC,IAAAA;AAAxC,GAAP;AACH,CAnCM;;GAAMd,iB;UACoBL,S,EAWJD,e,EAOMA,e,EAOHA,e","sourcesContent":["import { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\n// : BigNumber | undefined\nexport const useStakingBalance = (address: string) => {\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [stakingBalance] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"stakingBalance\",\n        args: [address, account]\n    }) ?? []\n\n    const [totalNumberOfStakers] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"uniqueTokenStakers\",\n        args: []\n    }) ?? []\n\n    const [totalTokensStaked] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalTokensStaked\",\n        args: []\n    }) ?? []\n\n\n    return { stakingBalance, totalNumberOfStakers, totalTokensStaked }\n}"]},"metadata":{},"sourceType":"module"}