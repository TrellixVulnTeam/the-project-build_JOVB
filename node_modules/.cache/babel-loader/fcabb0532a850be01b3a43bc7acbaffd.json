{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\";\nimport { utils } from \"ethers\";\nimport { useContext } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\";\nexport const useAvailableToClaimEachPreSale = (address, preSaleNumber) => {\n  _s();\n\n  var _useContractCall, _useContractCall2;\n\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress,\n    dappTokenAddress\n  } = data;\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenForm; // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const [availableToClaim] = (_useContractCall = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"getAvailablePreSaleTokensToWithdrawEachPreSale\",\n    args: [address, account, preSaleNumber]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  const [totalClaimed] = (_useContractCall2 = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"totalWithdrawnPreSaleTokensEachPreSale\",\n    args: [preSaleNumber, account]\n  })) !== null && _useContractCall2 !== void 0 ? _useContractCall2 : [];\n  return {\n    availableToClaim,\n    totalClaimed\n  };\n};\n\n_s(useAvailableToClaimEachPreSale, \"0JXV7ejEFjpoDfnB82qFp17Kh4c=\", false, function () {\n  return [useEthers, useContractCall, useContractCall];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAvailableToClaimEachPreSale.tsx"],"names":["useContractCall","useEthers","TokenForm","utils","useContext","MyContext","useAvailableToClaimEachPreSale","address","preSaleNumber","data","chainIdentity","tokenFarmContractAddress","dappTokenAddress","account","chainId","abi","tokenFarmInterface","Interface","availableToClaim","method","args","totalClaimed"],"mappings":";;AAAA,SAASA,eAAT,EAA+CC,SAA/C,QAAgE,eAAhE;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,SAASC,KAAT,QAA4C,QAA5C;AAEA,SAASC,UAAT,QAAsC,OAAtC,C,CACA;;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAGA,OAAO,MAAMC,8BAA8B,GAAG,CAACC,OAAD,EAAkBC,aAAlB,KAA4C;AAAA;;AAAA;;AACtF,QAAMC,IAAI,GAAGL,UAAU,CAACC,SAAD,CAAvB;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA,wBAAjB;AAA2CC,IAAAA;AAA3C,MAAgEH,IAAtE;AAEA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBb,SAAS,EAAtC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAUb,SAAhB,CALsF,CAMtF;;AACA,QAAMc,kBAAkB,GAAG,IAAIb,KAAK,CAACc,SAAV,CAAoBF,GAApB,CAA3B;AAEA,QAAM,CAACG,gBAAD,wBAAqBlB,eAAe,CAAC;AACvCe,IAAAA,GAAG,EAAEC,kBADkC;AAEvCT,IAAAA,OAAO,EAAEI,wBAF8B;AAGvCQ,IAAAA,MAAM,EAAE,gDAH+B;AAIvCC,IAAAA,IAAI,EAAE,CAACb,OAAD,EAAUM,OAAV,EAAmBL,aAAnB;AAJiC,GAAD,CAApC,+DAKA,EALN;AAOA,QAAM,CAACa,YAAD,yBAAiBrB,eAAe,CAAC;AACnCe,IAAAA,GAAG,EAAEC,kBAD8B;AAEnCT,IAAAA,OAAO,EAAEI,wBAF0B;AAGnCQ,IAAAA,MAAM,EAAE,wCAH2B;AAInCC,IAAAA,IAAI,EAAE,CAACZ,aAAD,EAAgBK,OAAhB;AAJ6B,GAAD,CAAhC,iEAKA,EALN;AAQA,SAAO;AAAEK,IAAAA,gBAAF;AAAoBG,IAAAA;AAApB,GAAP;AACH,CAzBM;;GAAMf,8B;UAIoBL,S,EAKFD,e,EAOJA,e","sourcesContent":["import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useAvailableToClaimEachPreSale = (address: string, preSaleNumber: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress } = data\n\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [availableToClaim] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAvailablePreSaleTokensToWithdrawEachPreSale\",\n        args: [address, account, preSaleNumber]\n    }) ?? []\n\n    const [totalClaimed] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalWithdrawnPreSaleTokensEachPreSale\",\n        args: [preSaleNumber, account]\n    }) ?? []\n\n\n    return { availableToClaim, totalClaimed }\n}"]},"metadata":{},"sourceType":"module"}