{"ast":null,"code":"var _jsxFileName = \"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/UnStakeForm.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { CircularProgress, Input, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useEffect } from \"react\";\nimport { useUnStakeAllTokens } from \"../../hooks/useUnStakeAllTokens\";\nimport { useUnStakeTokens } from \"../../hooks/useUnStakeTokens\";\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\";\nimport { useStakingBalance } from \"../../hooks/useStakingBalance\";\nimport { utils } from \"ethers\";\nimport { BalanceMsg } from \"../BalanceMsg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const UnStakeForm = _ref => {\n  _s();\n\n  let {\n    token\n  } = _ref;\n  const {\n    image,\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [amount, setAmount] = useState(0);\n  const {\n    notifications\n  } = useNotifications();\n  const {\n    stakingBalance\n  } = useStakingBalance(tokenAddress);\n  const formattedBalance = stakingBalance ? parseFloat(formatUnits(stakingBalance, 18)) : 0;\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event === null || event === void 0 ? void 0 : event.target.value);\n    setAmount(newAmount);\n    console.log(newAmount);\n  };\n\n  const {\n    send: unstakeAllTokensSend,\n    state: unstakeAllTokensState\n  } = useUnStakeAllTokens();\n  const {\n    approveAndStake,\n    state: approveAndStakeErc20State\n  } = useStakeTokens(tokenAddress);\n  const {\n    unStakeTokens,\n    unStakeState: unstakeTokensState\n  } = useUnStakeTokens(tokenAddress);\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return approveAndStake(amountAsWei.toString());\n  };\n\n  const handleUnStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString());\n    return unStakeTokens(amountAsWei.toString());\n  };\n\n  const handleUnStakeAllSubmit = () => {\n    return unstakeAllTokensSend(tokenAddress);\n  };\n\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  const isUnStaking = unstakeTokensState.status === \"Mining\";\n  const isUnStakingAll = unstakeAllTokensState.status === \"Mining\";\n  const [btnDisable, setBtnDisable] = useState('');\n  console.log(isUnStaking); // const isUnStaking = unstakeTokensState.status = \"UnStakings\"\n\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false);\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false);\n  const [showUnStakeTokensSuccess, setShowUnStakeTokensSuccess] = useState(false);\n\n  const handleCloseSnack = () => {\n    setShowErc20ApprovalSuccess(false);\n    setShowStakeTokensSuccess(false);\n    setShowUnStakeTokensSuccess(false);\n  };\n\n  useEffect(() => {\n    if (isMining || isUnStaking || isUnStakingAll) {\n      setBtnDisable('disabled');\n    } else {\n      setBtnDisable('');\n    }\n  }, [isMining, isUnStaking, isUnStakingAll]);\n  useEffect(() => {\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 Transfer\").length > 0) {\n      console.log(\"Approved!\");\n      setShowErc20ApprovalSuccess(true);\n      setShowStakeTokensSuccess(false);\n    }\n\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked!\");\n      setShowErc20ApprovalSuccess(false);\n      setShowStakeTokensSuccess(true);\n    }\n\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Unstake Tokens\").length > 0) {\n      console.log(\"Tokens Staked!\");\n      setShowUnStakeTokensSuccess(true);\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess, showUnStakeTokensSuccess]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\"  \", /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n        label: `Your staked ${name} balance:`,\n        amount: formattedBalance,\n        tokenImgSrc: image\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"\",\n        children: [/*#__PURE__*/_jsxDEV(Input, {\n          className: \"form-input\",\n          onChange: handleInputChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"btn-unstake\",\n          onClick: handleUnStakeSubmit,\n          disabled: isUnStakingAll || isUnStaking,\n          children: isUnStaking ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 36\n          }, this) : \"Unstake Tokens!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"btn\",\n            onClick: handleUnStakeAllSubmit,\n            disabled: isUnStaking || isUnStakingAll,\n            children: isUnStaking ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n              size: 26\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 42\n            }, this) : \"Unstake All!\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showErc20ApprovalSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"ERC-20 token transfer approved! Now approve the 2nd transaction!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showStakeTokensSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens Staked!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showUnStakeTokensSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens UnStaked!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UnStakeForm, \"MDC6d3x8Di88U/Q/Dy4UXUgVAQY=\", false, function () {\n  return [useEthers, useTokenBalance, useNotifications, useStakingBalance, useUnStakeAllTokens, useStakeTokens, useUnStakeTokens];\n});\n\n_c = UnStakeForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"UnStakeForm\");","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/UnStakeForm.tsx"],"names":["useEthers","useTokenBalance","useNotifications","formatUnits","CircularProgress","Input","Snackbar","Alert","React","useState","useEffect","useUnStakeAllTokens","useUnStakeTokens","useStakeTokens","useStakingBalance","utils","BalanceMsg","UnStakeForm","token","image","address","tokenAddress","name","account","tokenBalance","formattedTokenBalance","parseFloat","amount","setAmount","notifications","stakingBalance","formattedBalance","handleInputChange","event","newAmount","target","value","Number","console","log","send","unstakeAllTokensSend","state","unstakeAllTokensState","approveAndStake","approveAndStakeErc20State","unStakeTokens","unStakeState","unstakeTokensState","handleStakeSubmit","amountAsWei","parseEther","toString","handleUnStakeSubmit","handleUnStakeAllSubmit","isMining","status","isUnStaking","isUnStakingAll","btnDisable","setBtnDisable","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","showUnStakeTokensSuccess","setShowUnStakeTokensSuccess","handleCloseSnack","filter","notification","type","transactionName","length"],"mappings":"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","sourcesContent":["import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { useUnStakeAllTokens } from \"../../hooks/useUnStakeAllTokens\"\nimport { useUnStakeTokens } from \"../../hooks/useUnStakeTokens\"\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\"\nimport { useStakingBalance } from \"../../hooks/useStakingBalance\"\nimport { utils } from \"ethers\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const UnStakeForm = ({ token }: StakeFormProps) => {\n    const { image, address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const { notifications } = useNotifications()\n    const { stakingBalance } = useStakingBalance(tokenAddress)\n    const formattedBalance: number = stakingBalance ? parseFloat(formatUnits(stakingBalance, 18)) : 0\n\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { send: unstakeAllTokensSend, state: unstakeAllTokensState } = useUnStakeAllTokens()\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n\n    const { unStakeTokens, unStakeState: unstakeTokensState } = useUnStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const handleUnStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return unStakeTokens(amountAsWei.toString())\n    }\n\n    const handleUnStakeAllSubmit = () => {\n        return unstakeAllTokensSend(tokenAddress)\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const isUnStaking = unstakeTokensState.status === \"Mining\"\n    const isUnStakingAll = unstakeAllTokensState.status === \"Mining\"\n    const [btnDisable, setBtnDisable] = useState('')\n    console.log(isUnStaking)\n\n    // const isUnStaking = unstakeTokensState.status = \"UnStakings\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const [showUnStakeTokensSuccess, setShowUnStakeTokensSuccess] = useState(false)\n\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n        setShowUnStakeTokensSuccess(false)\n    }\n\n    useEffect(() => {\n        if (isMining || isUnStaking || isUnStakingAll) {\n            setBtnDisable('disabled')\n        } else {\n            setBtnDisable('')\n        }\n    }, [isMining, isUnStaking, isUnStakingAll])\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Unstake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowUnStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess, showUnStakeTokensSuccess])\n\n    return (\n        <>  <div className=\"form\">\n            <BalanceMsg label={`Your staked ${name} balance:`} amount={formattedBalance}\n                tokenImgSrc={image} />\n\n            {/* This is a stake <div> */}\n            {/* <div>\n\n                <Input onChange={handleInputChange} />\n                <Button onClick={handleStakeSubmit}\n                    color=\"primary\" size=\"large\"\n                    disabled={isMining || isUnStaking}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Stake!!\"}\n\n                </Button>\n            </div> */}\n            <div className=\"\">\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <button className=\"btn-unstake\"\n                    onClick={handleUnStakeSubmit}\n                    disabled={isUnStakingAll || isUnStaking}\n                >\n                    {isUnStaking ? <CircularProgress size={26} /> : \"Unstake Tokens!\"}\n\n                </button>\n                <div>\n                    <button className=\"btn\" onClick={handleUnStakeAllSubmit}\n                        disabled={isUnStaking || isUnStakingAll}\n                    >\n                        {(isUnStaking) ? <CircularProgress size={26} /> : \"Unstake All!\"}\n\n                    </button>\n                </div>\n\n\n            </div>\n            <div>\n\n            </div>\n        </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Staked!\n                </Alert>\n            </Snackbar>\n            <Snackbar open={showUnStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens UnStaked!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}