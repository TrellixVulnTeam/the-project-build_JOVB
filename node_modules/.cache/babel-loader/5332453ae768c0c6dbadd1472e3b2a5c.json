{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\";\nimport { utils } from \"ethers\";\nimport { useContext } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\";\nexport const useAllocatedAmount = (tokenAddress, preSaleNumber) => {\n  _s();\n\n  var _useContractCall;\n\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress,\n    dappTokenAddress\n  } = data;\n  console.log(\"this is in useGetValues: \" + tokenAddress + \" \" + preSaleNumber);\n  const {\n    account,\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenForm; // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const [getAllocatedPreSaleAmount] = (_useContractCall = useContractCall({\n    abi: tokenFarmInterface,\n    address: tokenFarmContractAddress,\n    method: \"getAllocatedPreSaleAmount\",\n    args: [account, tokenAddress, preSaleNumber]\n  })) !== null && _useContractCall !== void 0 ? _useContractCall : [];\n  return {\n    getAllocatedPreSaleAmount\n  };\n};\n\n_s(useAllocatedAmount, \"dxt+aFNYwMKNUPvu6MDPR/fg17k=\", false, function () {\n  return [useEthers, useContractCall];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAllocatedAmount.tsx"],"names":["useContractCall","useEthers","TokenForm","utils","useContext","MyContext","useAllocatedAmount","tokenAddress","preSaleNumber","data","chainIdentity","tokenFarmContractAddress","dappTokenAddress","console","log","account","chainId","abi","tokenFarmInterface","Interface","getAllocatedPreSaleAmount","address","method","args"],"mappings":";;AAAA,SAASA,eAAT,EAA+CC,SAA/C,QAAgE,eAAhE;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,SAASC,KAAT,QAA4C,QAA5C;AAEA,SAASC,UAAT,QAAsC,OAAtC,C,CACA;;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAGA,OAAO,MAAMC,kBAAkB,GAAG,CAACC,YAAD,EAAuBC,aAAvB,KAAiD;AAAA;;AAAA;;AAC/E,QAAMC,IAAI,GAAGL,UAAU,CAACC,SAAD,CAAvB;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA,wBAAjB;AAA2CC,IAAAA;AAA3C,MAAgEH,IAAtE;AACAI,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAA8BP,YAA9B,GAA6C,GAA7C,GAAmDC,aAA/D;AACA,QAAM;AAAEO,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAuBf,SAAS,EAAtC;AACA,QAAM;AAAEgB,IAAAA;AAAF,MAAUf,SAAhB,CAL+E,CAM/E;;AACA,QAAMgB,kBAAkB,GAAG,IAAIf,KAAK,CAACgB,SAAV,CAAoBF,GAApB,CAA3B;AAEA,QAAM,CAACG,yBAAD,wBAA8BpB,eAAe,CAAC;AAChDiB,IAAAA,GAAG,EAAEC,kBAD2C;AAEhDG,IAAAA,OAAO,EAAEV,wBAFuC;AAGhDW,IAAAA,MAAM,EAAE,2BAHwC;AAIhDC,IAAAA,IAAI,EAAE,CAACR,OAAD,EAAUR,YAAV,EAAwBC,aAAxB;AAJ0C,GAAD,CAA7C,+DAKA,EALN;AAQA,SAAO;AAAEY,IAAAA;AAAF,GAAP;AACH,CAlBM;;GAAMd,kB;UAIoBL,S,EAKOD,e","sourcesContent":["import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useAllocatedAmount = (tokenAddress: string, preSaleNumber: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress } = data\n    console.log(\"this is in useGetValues: \" + tokenAddress + \" \" + preSaleNumber)\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [getAllocatedPreSaleAmount] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAllocatedPreSaleAmount\",\n        args: [account, tokenAddress, preSaleNumber]\n    }) ?? []\n\n\n    return { getAllocatedPreSaleAmount }\n}"]},"metadata":{},"sourceType":"module"}