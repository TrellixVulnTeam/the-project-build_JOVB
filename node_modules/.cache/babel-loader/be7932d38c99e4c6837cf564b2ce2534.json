{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useContext, useEffect, useState } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\";\nimport { useGetValues } from \"./useGetValues\"; // const MyContext = createContext('')\n\nexport const usePreSaleEachPreSale = (tokenAddress, preSaleNumber) => {\n  _s();\n\n  //address\n  // abi\n  // chainId\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress\n  } = data;\n  console.log('this is the value of context chainId in usePreSale: ' + data + ' Number ' + chainIdentity + ' TokenAddress ' + tokenFarmContractAddress);\n  useEffect(() => {\n    console.log('in usePreSale chainNumber and tokenFarmAddress changed.');\n  }, [chainIdentity, tokenFarmContractAddress]);\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm; // const tokenFarmAddress = tokenFarmContractAddress\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface);\n  const {\n    participateInPreSaleAllocationStatus,\n    preSaleAllocationStatus,\n    preSaleFundEachPreSaleNumberStatus,\n    preSaleFundFCFSEachPreSaleNumberStatus,\n    preSaleFundEachPreSaleNumberWithoutStakingStatus,\n    claimTokensEachPreSaleStatus\n  } = useGetValues(tokenAddress, preSaleNumber);\n  console.log(\"You are in Hook usePreSaleEachPreSale: and this is participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus: \" + participateInPreSaleAllocationStatus + preSaleAllocationStatus + preSaleFundEachPreSaleNumberStatus + preSaleFundFCFSEachPreSaleNumberStatus + preSaleFundEachPreSaleNumberWithoutStakingStatus + claimTokensEachPreSaleStatus); //aprove\n\n  const {\n    send: approveErc20Send,\n    state: approveAndPreSaleErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 Transfer\"\n  });\n\n  const approveAndPreSale = amount => {\n    setAmountForPreSale(amount);\n    return approveErc20Send(tokenFarmContractAddress, amount);\n  };\n\n  const {\n    send: preSaleFundSend,\n    state: preSaleFundState\n  } = useContractFunction(tokenFarmContract, \"preSaleFundEachPreSaleNumber\", {\n    transactionName: \"preSaleFundEachPreSaleNumber\"\n  });\n  const {\n    send: preSaleFundFCFSSend,\n    state: preSaleFundFCFSState\n  } = useContractFunction(tokenFarmContract, \"preSaleFundFCFSEachPreSaleNumber\", {\n    transactionName: \"preSaleFundEachPreSaleNumber\"\n  });\n  const {\n    send: preSaleFundWithoutStakingSend,\n    state: preSaleFundWithoutStakingState\n  } = useContractFunction(tokenFarmContract, \"preSaleFundEachPreSaleNumberWithoutStaking\", {\n    transactionName: \"preSaleFundEachPreSaleNumber\"\n  });\n  const [AmountForPreSale, setAmountForPreSale] = useState(\"0\"); //useEffect\n\n  useEffect(() => {\n    if (approveAndPreSaleErc20State.status === \"Success\") {\n      if (preSaleFundEachPreSaleNumberStatus == true) {\n        preSaleFundSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber);\n      } else if (preSaleFundFCFSEachPreSaleNumberStatus == true) {\n        preSaleFundFCFSSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber);\n      } else {\n        preSaleFundWithoutStakingSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber);\n      }\n    }\n  }, [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress]);\n  const [state, setState] = useState(approveAndPreSaleErc20State);\n  useEffect(() => {\n    if (approveAndPreSaleErc20State.status === \"Success\") {\n      if (preSaleFundEachPreSaleNumberStatus == true) {\n        setState(preSaleFundState);\n      } else if (preSaleFundFCFSEachPreSaleNumberStatus == true) {\n        setState(preSaleFundFCFSState);\n      } else {\n        setState(preSaleFundWithoutStakingState);\n      }\n    } else {\n      setState(approveAndPreSaleErc20State);\n    }\n  }, [approveAndPreSaleErc20State, preSaleFundState, preSaleFundFCFSState, preSaleFundWithoutStakingState]);\n  return {\n    approveAndPreSale,\n    state\n  }; //stake tokens\n};\n\n_s(usePreSaleEachPreSale, \"8HMlZu6BJGEx+LiQFxM6XirfX8I=\", false, function () {\n  return [useEthers, useGetValues, useContractFunction, useContractFunction, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePreSaleEachPreSale.tsx"],"names":["useEthers","useContractFunction","TokenFarm","ERC20","utils","Contract","useContext","useEffect","useState","MyContext","useGetValues","usePreSaleEachPreSale","tokenAddress","preSaleNumber","data","chainIdentity","tokenFarmContractAddress","console","log","chainId","abi","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","participateInPreSaleAllocationStatus","preSaleAllocationStatus","preSaleFundEachPreSaleNumberStatus","preSaleFundFCFSEachPreSaleNumberStatus","preSaleFundEachPreSaleNumberWithoutStakingStatus","claimTokensEachPreSaleStatus","send","approveErc20Send","state","approveAndPreSaleErc20State","transactionName","approveAndPreSale","amount","setAmountForPreSale","preSaleFundSend","preSaleFundState","preSaleFundFCFSSend","preSaleFundFCFSState","preSaleFundWithoutStakingSend","preSaleFundWithoutStakingState","AmountForPreSale","status","setState"],"mappings":"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","sourcesContent":["import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\nimport { useGetValues } from \"./useGetValues\"\n\n// const MyContext = createContext('')\n\nexport const usePreSaleEachPreSale = (tokenAddress: string, preSaleNumber: string) => {\n    //address\n    // abi\n    // chainId\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    console.log('this is the value of context chainId in usePreSale: ' + data + ' Number ' + chainIdentity + ' TokenAddress ' + tokenFarmContractAddress)\n\n    useEffect(() => {\n        console.log('in usePreSale chainNumber and tokenFarmAddress changed.')\n    }, [chainIdentity, tokenFarmContractAddress])\n\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    // const tokenFarmAddress = tokenFarmContractAddress\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    const { participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus } = useGetValues(tokenAddress, preSaleNumber)\n    console.log(\"You are in Hook usePreSaleEachPreSale: and this is participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus: \" + participateInPreSaleAllocationStatus + preSaleAllocationStatus + preSaleFundEachPreSaleNumberStatus + preSaleFundFCFSEachPreSaleNumberStatus + preSaleFundEachPreSaleNumberWithoutStakingStatus + claimTokensEachPreSaleStatus)\n\n    //aprove\n    const { send: approveErc20Send, state: approveAndPreSaleErc20State } =\n        useContractFunction(erc20Contract, \"approve\",\n            { transactionName: \"Approve ERC20 Transfer\" })\n\n    const approveAndPreSale = (amount: string) => {\n        setAmountForPreSale(amount)\n        return approveErc20Send(tokenFarmContractAddress, amount)\n    }\n\n\n\n\n    const { send: preSaleFundSend, state: preSaleFundState } =\n        useContractFunction(tokenFarmContract, \"preSaleFundEachPreSaleNumber\",\n            { transactionName: \"preSaleFundEachPreSaleNumber\" })\n\n    const { send: preSaleFundFCFSSend, state: preSaleFundFCFSState } =\n        useContractFunction(tokenFarmContract, \"preSaleFundFCFSEachPreSaleNumber\",\n            { transactionName: \"preSaleFundEachPreSaleNumber\" })\n\n    const { send: preSaleFundWithoutStakingSend, state: preSaleFundWithoutStakingState } =\n        useContractFunction(tokenFarmContract, \"preSaleFundEachPreSaleNumberWithoutStaking\",\n            { transactionName: \"preSaleFundEachPreSaleNumber\" })\n\n\n    const [AmountForPreSale, setAmountForPreSale] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            if (preSaleFundEachPreSaleNumberStatus == true) {\n                preSaleFundSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber)\n            } else if (preSaleFundFCFSEachPreSaleNumberStatus == true) {\n                preSaleFundFCFSSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber)\n            } else {\n                preSaleFundWithoutStakingSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber)\n            }\n        }\n    }, [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress])\n\n    const [state, setState] = useState(approveAndPreSaleErc20State)\n\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            if (preSaleFundEachPreSaleNumberStatus == true) {\n                setState(preSaleFundState)\n            } else if (preSaleFundFCFSEachPreSaleNumberStatus == true) {\n                setState(preSaleFundFCFSState)\n            } else {\n                setState(preSaleFundWithoutStakingState)\n            }\n        }\n        else {\n            setState(approveAndPreSaleErc20State)\n        }\n    }, [approveAndPreSaleErc20State, preSaleFundState, preSaleFundFCFSState, preSaleFundWithoutStakingState])\n\n\n\n\n    return { approveAndPreSale, state }\n\n    //stake tokens\n}"]},"metadata":{},"sourceType":"module"}