{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useEffect, useState, useContext } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\";\nexport const useStakeTokens = tokenAddress => {\n  _s();\n\n  //address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress: tokenFarmAddress\n  } = data; // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface);\n  const erc20ABI = ERC20.abi;\n  const erc20Interface = new utils.Interface(erc20ABI);\n  const erc20Contract = new Contract(tokenAddress, erc20Interface); //aprove\n\n  const {\n    send: approveErc20Send,\n    state: approveAndStakeErc20State\n  } = useContractFunction(erc20Contract, \"approve\", {\n    transactionName: \"Approve ERC20 Transfer\"\n  });\n\n  const approveAndStake = amount => {\n    setAmountToStake(amount);\n    return approveErc20Send(tokenFarmAddress, amount);\n  };\n\n  const {\n    send: stakeSend,\n    state: stakeState\n  } = useContractFunction(tokenFarmContract, \"stakeTokens\", {\n    transactionName: \"Stake Tokens\"\n  });\n  const [amountToStake, setAmountToStake] = useState(\"0\"); //useEffect\n\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      stakeSend(amountToStake, tokenAddress);\n    }\n  }, [approveAndStakeErc20State, amountToStake, tokenAddress]);\n  const [state, setState] = useState(approveAndStakeErc20State);\n  useEffect(() => {\n    if (approveAndStakeErc20State.status === \"Success\") {\n      setState(stakeState);\n    } else {\n      setState(approveAndStakeErc20State);\n    }\n  }, [approveAndStakeErc20State, stakeState]);\n  return {\n    approveAndStake,\n    state\n  }; //stake tokens\n};\n\n_s(useStakeTokens, \"cIhg0BqfjTd6DX8mWjerr5Zwl9w=\", false, function () {\n  return [useEthers, useContractFunction, useContractFunction];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakeTokens.ts"],"names":["useEthers","useContractFunction","TokenFarm","ERC20","utils","Contract","useEffect","useState","useContext","MyContext","useStakeTokens","tokenAddress","chainId","abi","data","chainIdentity","tokenFarmContractAddress","tokenFarmAddress","tokenFarmInterface","Interface","tokenFarmContract","erc20ABI","erc20Interface","erc20Contract","send","approveErc20Send","state","approveAndStakeErc20State","transactionName","approveAndStake","amount","setAmountToStake","stakeSend","stakeState","amountToStake","status","setState"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,mBAApB,QAA+C,eAA/C;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,wCAAlB;AAEA,SAAoBC,KAApB,QAAiC,QAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,UAA9B,QAAgD,OAAhD,C,CACA;;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAGA,OAAO,MAAMC,cAAc,GAAIC,YAAD,IAA0B;AAAA;;AACpD;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcZ,SAAS,EAA7B;AACA,QAAM;AAAEa,IAAAA;AAAF,MAAUX,SAAhB;AAEA,QAAMY,IAAI,GAAGN,UAAU,CAACC,SAAD,CAAvB;AACA,QAAM;AAAEM,IAAAA,aAAF;AAAiBC,IAAAA,wBAAwB,EAAEC;AAA3C,MAAgEH,IAAtE,CARoD,CAWpD;;AACA,QAAMI,kBAAkB,GAAG,IAAId,KAAK,CAACe,SAAV,CAAoBN,GAApB,CAA3B;AACA,QAAMO,iBAAiB,GAAG,IAAIf,QAAJ,CAAaY,gBAAb,EAA+BC,kBAA/B,CAA1B;AAEA,QAAMG,QAAQ,GAAGlB,KAAK,CAACU,GAAvB;AACA,QAAMS,cAAc,GAAG,IAAIlB,KAAK,CAACe,SAAV,CAAoBE,QAApB,CAAvB;AACA,QAAME,aAAa,GAAG,IAAIlB,QAAJ,CAAaM,YAAb,EAA2BW,cAA3B,CAAtB,CAjBoD,CAmBpD;;AACA,QAAM;AAAEE,IAAAA,IAAI,EAAEC,gBAAR;AAA0BC,IAAAA,KAAK,EAAEC;AAAjC,MACF1B,mBAAmB,CAACsB,aAAD,EAAgB,SAAhB,EACf;AAAEK,IAAAA,eAAe,EAAE;AAAnB,GADe,CADvB;;AAIA,QAAMC,eAAe,GAAIC,MAAD,IAAoB;AACxCC,IAAAA,gBAAgB,CAACD,MAAD,CAAhB;AACA,WAAOL,gBAAgB,CAACR,gBAAD,EAAmBa,MAAnB,CAAvB;AACH,GAHD;;AAMA,QAAM;AAAEN,IAAAA,IAAI,EAAEQ,SAAR;AAAmBN,IAAAA,KAAK,EAAEO;AAA1B,MACFhC,mBAAmB,CAACmB,iBAAD,EAAoB,aAApB,EACf;AAAEQ,IAAAA,eAAe,EAAE;AAAnB,GADe,CADvB;AAMA,QAAM,CAACM,aAAD,EAAgBH,gBAAhB,IAAoCxB,QAAQ,CAAC,GAAD,CAAlD,CApCoD,CAsCpD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqB,yBAAyB,CAACQ,MAA1B,KAAqC,SAAzC,EAAoD;AAChDH,MAAAA,SAAS,CAACE,aAAD,EAAgBvB,YAAhB,CAAT;AACH;AACJ,GAJQ,EAIN,CAACgB,yBAAD,EAA4BO,aAA5B,EAA2CvB,YAA3C,CAJM,CAAT;AAMA,QAAM,CAACe,KAAD,EAAQU,QAAR,IAAoB7B,QAAQ,CAACoB,yBAAD,CAAlC;AAEArB,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIqB,yBAAyB,CAACQ,MAA1B,KAAqC,SAAzC,EAAoD;AAChDC,MAAAA,QAAQ,CAACH,UAAD,CAAR;AACH,KAFD,MAGK;AACDG,MAAAA,QAAQ,CAACT,yBAAD,CAAR;AACH;AACJ,GAPQ,EAON,CAACA,yBAAD,EAA4BM,UAA5B,CAPM,CAAT;AAYA,SAAO;AAAEJ,IAAAA,eAAF;AAAmBH,IAAAA;AAAnB,GAAP,CA3DoD,CA6DpD;AACH,CA9DM;;GAAMhB,c;UAIWV,S,EAiBhBC,mB,EAUAA,mB","sourcesContent":["// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useEffect, useState, useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress: tokenFarmAddress } = data\n\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    //aprove\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\",\n            { transactionName: \"Approve ERC20 Transfer\" })\n\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n\n\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stakeTokens\",\n            { transactionName: \"Stake Tokens\" })\n\n\n\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, tokenAddress)\n        }\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        }\n        else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n\n\n\n    return { approveAndStake, state }\n\n    //stake tokens\n}"]},"metadata":{},"sourceType":"module"}