{"ast":null,"code":"var _jsxFileName = \"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/PreSaleFormEachPreSale.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { CircularProgress, Input, Snackbar } from \"@material-ui/core\";\nimport Alert from \"@material-ui/lab/Alert\";\nimport React, { useState, useEffect } from \"react\";\nimport { usePreSaleEachPreSale } from \"../../hooks/usePreSaleEachPreSale\";\nimport { useWithdrawPreSaleBalance } from \"../../hooks/useWithdrawPreSaleBalance\";\nimport { utils } from \"ethers\";\nimport { BalanceMsg } from \"../BalanceMsg\";\nimport { usePurchasedBalanceEachPreSale } from \"../../hooks/usePurchasedBalanceEachPreSale\";\nimport { useGetValues } from \"../../hooks/useGetValues\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const PreSaleFormEachPreSale = _ref => {\n  _s();\n\n  let {\n    token,\n    preSaleNumber\n  } = _ref;\n  const {\n    image,\n    address: tokenAddress,\n    name\n  } = token;\n  const {\n    account\n  } = useEthers();\n  const {\n    timesEachPreSale\n  } = useGetValues(tokenAddress, preSaleNumber);\n  const tokenBalance = useTokenBalance(tokenAddress, account);\n  const formattedTokenBalance = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0;\n  const [amount, setAmount] = useState(0);\n  const {\n    notifications\n  } = useNotifications();\n  const fTimesEachPreSale = timesEachPreSale ? parseFloat(timesEachPreSale) : 0;\n  const {\n    totalPurchasedPreSaleTokensEachPreSale\n  } = usePurchasedBalanceEachPreSale(tokenAddress, preSaleNumber);\n  const formattedBalance = totalPurchasedPreSaleTokensEachPreSale ? parseFloat(formatUnits(totalPurchasedPreSaleTokensEachPreSale, 18)) : 0;\n  var [numbervalue, setnumbervalue] = useState(0);\n  console.log('pre');\n  console.log(numbervalue * 2);\n  console.log('sale');\n\n  const handleInputChange = event => {\n    const newAmount = event.target.value === \"\" ? \"\" : Number(event === null || event === void 0 ? void 0 : event.target.value);\n    setnumbervalue(Number(event.target.value));\n    setAmount(newAmount); // console.log(newAmount)\n  };\n\n  const {\n    approveAndPreSale,\n    state: approveAndStakeErc20State\n  } = usePreSaleEachPreSale(tokenAddress, preSaleNumber);\n  const {\n    send: withdrawBalance,\n    state: withdrawBalanceState\n  } = useWithdrawPreSaleBalance();\n\n  const handleStakeSubmit = () => {\n    const amountAsWei = utils.parseEther(amount.toString()); // console.log(amountAsWei)\n    // console.log('bcd')\n\n    return approveAndPreSale(amountAsWei.toString());\n  };\n\n  const handleWithdrawPreSaleSubmit = () => {\n    return withdrawBalance(tokenAddress);\n  };\n\n  const isWithdrawing = withdrawBalanceState.status === \"Mining\";\n  const isMining = approveAndStakeErc20State.status === \"Mining\";\n  const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false);\n  const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false);\n\n  const handleCloseSnack = () => {\n    setShowErc20ApprovalSuccess(false);\n    setShowStakeTokensSuccess(false);\n  };\n\n  useEffect(() => {\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Approve ERC20 Transfer\").length > 0) {\n      console.log(\"Approved!\");\n      setShowErc20ApprovalSuccess(true);\n      setShowStakeTokensSuccess(false);\n    }\n\n    if (notifications.filter(notification => notification.type === \"transactionSucceed\" && notification.transactionName === \"Stake Tokens\").length > 0) {\n      console.log(\"Tokens Staked!\");\n      setShowErc20ApprovalSuccess(false);\n      setShowStakeTokensSuccess(true);\n    }\n  }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(BalanceMsg, {\n      label: `Your participated ${name} count:`,\n      amount: formattedBalance,\n      tokenImgSrc: image\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: [\" 1 $BUSD = \", fTimesEachPreSale, \" x $\", name]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form\",\n      children: [/*#__PURE__*/_jsxDEV(Input, {\n        className: \"form-input\",\n        onChange: handleInputChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleStakeSubmit,\n          color: \"primary\" // size=\"large\"\n          ,\n          disabled: isMining // variant=\"contained\"\n          ,\n          className: \"btn\",\n          children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n            size: 26\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 37\n          }, this) : \"Buy!!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"You will get \", numbervalue * fTimesEachPreSale, \" tokens.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn\",\n        onClick: handleWithdrawPreSaleSubmit,\n        disabled: isMining,\n        children: isMining ? /*#__PURE__*/_jsxDEV(CircularProgress, {\n          size: 26\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 33\n        }, this) : \"Withdraw!!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showErc20ApprovalSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"ERC-20 token transfer approved! Now approve the 2nd transaction!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: showStakeTokensSuccess,\n      autoHideDuration: 5000,\n      onClose: handleCloseSnack,\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: handleCloseSnack,\n        severity: \"success\",\n        children: \"Tokens Purchased!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(PreSaleFormEachPreSale, \"HujmqFW1CsWKjeCZqnawk7VbF/g=\", false, function () {\n  return [useEthers, useGetValues, useTokenBalance, useNotifications, usePurchasedBalanceEachPreSale, usePreSaleEachPreSale, useWithdrawPreSaleBalance];\n});\n\n_c = PreSaleFormEachPreSale;\n\nvar _c;\n\n$RefreshReg$(_c, \"PreSaleFormEachPreSale\");","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/PreSaleFormEachPreSale.tsx"],"names":["useEthers","useTokenBalance","useNotifications","formatUnits","CircularProgress","Input","Snackbar","Alert","React","useState","useEffect","usePreSaleEachPreSale","useWithdrawPreSaleBalance","utils","BalanceMsg","usePurchasedBalanceEachPreSale","useGetValues","PreSaleFormEachPreSale","token","preSaleNumber","image","address","tokenAddress","name","account","timesEachPreSale","tokenBalance","formattedTokenBalance","parseFloat","amount","setAmount","notifications","fTimesEachPreSale","totalPurchasedPreSaleTokensEachPreSale","formattedBalance","numbervalue","setnumbervalue","console","log","handleInputChange","event","newAmount","target","value","Number","approveAndPreSale","state","approveAndStakeErc20State","send","withdrawBalance","withdrawBalanceState","handleStakeSubmit","amountAsWei","parseEther","toString","handleWithdrawPreSaleSubmit","isWithdrawing","status","isMining","showErc20ApprovalSuccess","setShowErc20ApprovalSuccess","showStakeTokensSuccess","setShowStakeTokensSuccess","handleCloseSnack","filter","notification","type","transactionName","length"],"mappings":"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","sourcesContent":["import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar, Typography } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { usePreSaleEachPreSale } from \"../../hooks/usePreSaleEachPreSale\"\nimport { useWithdrawPreSaleBalance } from \"../../hooks/useWithdrawPreSaleBalance\"\nimport { utils } from \"ethers\"\nimport { BalanceMsg } from \"../BalanceMsg\"\nimport { usePurchasedBalanceEachPreSale } from \"../../hooks/usePurchasedBalanceEachPreSale\"\nimport { AddModerator, MarginRounded } from \"@mui/icons-material\"\nimport TextField from '@mui/material/TextField';\nimport { useGetValues } from \"../../hooks/useGetValues\"\n\n\nexport interface StakeFormProps {\n    token: Token\n    preSaleNumber: string\n}\n\nexport const PreSaleFormEachPreSale = ({ token, preSaleNumber }: StakeFormProps) => {\n    const { image, address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const { timesEachPreSale } = useGetValues(tokenAddress, preSaleNumber)\n\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n\n    const { notifications } = useNotifications()\n\n    const fTimesEachPreSale: number = timesEachPreSale ? parseFloat(timesEachPreSale) : 0\n\n    const { totalPurchasedPreSaleTokensEachPreSale } = usePurchasedBalanceEachPreSale(tokenAddress, preSaleNumber)\n    const formattedBalance: number = totalPurchasedPreSaleTokensEachPreSale ? parseFloat(formatUnits(totalPurchasedPreSaleTokensEachPreSale, 18)) : 0\n\n    var [numbervalue, setnumbervalue] = useState(0);\n\n    console.log('pre')\n    console.log(numbervalue * 2)\n    console.log('sale')\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setnumbervalue(Number(event.target.value))\n        setAmount(newAmount)\n        // console.log(newAmount)\n    }\n\n    const { approveAndPreSale, state: approveAndStakeErc20State } = usePreSaleEachPreSale(tokenAddress, preSaleNumber)\n    const { send: withdrawBalance, state: withdrawBalanceState } = useWithdrawPreSaleBalance()\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        // console.log(amountAsWei)\n        // console.log('bcd')\n        return approveAndPreSale(amountAsWei.toString())\n    }\n\n\n    const handleWithdrawPreSaleSubmit = () => {\n        return withdrawBalance(tokenAddress)\n    }\n\n    const isWithdrawing = withdrawBalanceState.status === \"Mining\"\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n    }\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n    return (\n        <>\n            <BalanceMsg label={`Your participated ${name} count:`} amount={formattedBalance}\n                tokenImgSrc={image} />\n            <h4> 1 $BUSD = {fTimesEachPreSale} x ${name}</h4>\n            <div className=\"form\">\n\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <span >\n                    <button onClick={handleStakeSubmit}\n                        color=\"primary\"\n                        // size=\"large\"\n                        disabled={isMining}\n                        // variant=\"contained\"\n                        className=\"btn\"\n                    >\n                        {isMining ? <CircularProgress size={26} /> : \"Buy!!\"}\n\n                    </button>\n\n                </span>\n                <h3>You will get {numbervalue * fTimesEachPreSale} tokens.</h3>\n\n                <button className=\"btn\" onClick={handleWithdrawPreSaleSubmit}\n\n                    disabled={isMining}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Withdraw!!\"}\n\n                </button>\n            </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Purchased!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}"]},"metadata":{},"sourceType":"module"}