{"ast":null,"code":"var _jsxFileName = \"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/YourWallet.tsx\",\n    _s = $RefreshSig$();\n\nimport Box from '@mui/material/Box';\nimport React, { useState } from \"react\";\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\";\nimport { Tab } from \"@material-ui/core\";\nimport { WalletBalance } from \"./WalletBalance\";\nimport { StakeForm } from \"./StakeForm\";\nimport { makeStyles } from \"@material-ui/core\";\nimport { useEthers, useEtherBalance } from \"@usedapp/core\";\nimport { GridTotalStaking } from \"./GridTotalStaking\";\nimport { useContext } from \"react\"; // import { MyContext } from \"../../App\";\n\nimport { GridStakingUnstaking } from \"./GridStakingUnstaking\";\nimport { MyContext } from \"../Header2\";\nimport { CheckpointsStake } from \"../CheckpointsStake\";\nimport { formatUnits } from \"@ethersproject/units\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst useStyles = makeStyles(theme => ({\n  tabContent: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    gap: theme.spacing(0)\n  },\n  box: {\n    backgroundColor: \"white\",\n    borderRadius: \"25px\",\n    opacity: \"0.95\",\n    marginTop: \"1em\"\n  },\n  header: {\n    color: \"white\"\n  }\n}));\nexport const YourWallet = _ref => {\n  _s();\n\n  let {\n    supportedTokens\n  } = _ref;\n  const {\n    dappTokenAddress,\n    formattedDappTokenBalance\n  } = useContext(MyContext);\n  const {\n    account\n  } = useEthers();\n  const isConnected = account !== undefined;\n  const ethBalance = useEtherBalance(account);\n  const formattedEthBalance = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0;\n  const [selectedTokenIndex, setSelectedTokenIndex] = useState(0);\n  console.log(\"supported tokens\");\n  console.log(supportedTokens[1].address);\n\n  const handleChange = (event, newValue) => {\n    setSelectedTokenIndex(parseInt(newValue));\n  };\n\n  const classes = useStyles();\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"section-heading\",\n        children: \" Stake! Tokens\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridTotalStaking, {\n        tokenAddress: dappTokenAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(GridStakingUnstaking, {\n        tokenAddress: dappTokenAddress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      className: \"\",\n      sx: {\n        mt: 4\n      },\n      children: [/*#__PURE__*/_jsxDEV(CheckpointsStake, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), isConnected && formattedEthBalance > 0 && formattedDappTokenBalance > 0 ? /*#__PURE__*/_jsxDEV(Box, {\n        className: classes.box,\n        children: /*#__PURE__*/_jsxDEV(TabContext, {\n          value: selectedTokenIndex.toString(),\n          children: [/*#__PURE__*/_jsxDEV(TabList, {\n            onChange: handleChange,\n            \"aria-label\": \"stake form tabs\",\n            children: supportedTokens.map((token, index) => {\n              return /*#__PURE__*/_jsxDEV(Tab, {\n                label: token.name,\n                value: index.toString()\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 79,\n                columnNumber: 41\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 29\n          }, this), supportedTokens.map((token, index) => {\n            return /*#__PURE__*/_jsxDEV(TabPanel, {\n              value: index.toString(),\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.tabContent,\n                children: [/*#__PURE__*/_jsxDEV(WalletBalance, {\n                  token: supportedTokens[selectedTokenIndex]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 89,\n                  columnNumber: 45\n                }, this), /*#__PURE__*/_jsxDEV(StakeForm, {\n                  token: supportedTokens[selectedTokenIndex]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 45\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 88,\n                columnNumber: 41\n              }, this)\n            }, index.toString(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 37\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"section-heading\",\n        children: \"The above checkpoints must be met to Stake!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 22\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(YourWallet, \"yhVxGIRRPtvWAYctJ7h9xdALyHQ=\", false, function () {\n  return [useEthers, useEtherBalance, useStyles];\n});\n\n_c = YourWallet;\n\nvar _c;\n\n$RefreshReg$(_c, \"YourWallet\");","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/YourWallet.tsx"],"names":["Box","React","useState","TabContext","TabList","TabPanel","Tab","WalletBalance","StakeForm","makeStyles","useEthers","useEtherBalance","GridTotalStaking","useContext","GridStakingUnstaking","MyContext","CheckpointsStake","formatUnits","useStyles","theme","tabContent","display","flexDirection","alignItems","gap","spacing","box","backgroundColor","borderRadius","opacity","marginTop","header","color","YourWallet","supportedTokens","dappTokenAddress","formattedDappTokenBalance","account","isConnected","undefined","ethBalance","formattedEthBalance","parseFloat","selectedTokenIndex","setSelectedTokenIndex","console","log","address","handleChange","event","newValue","parseInt","classes","mt","toString","map","token","index","name"],"mappings":"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","sourcesContent":["import { Token } from \"../Main\"\nimport Box from '@mui/material/Box';\nimport React, { useState } from \"react\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { tokenToString } from \"typescript\";\nimport { Tab } from \"@material-ui/core\"\nimport { WalletBalance } from \"./WalletBalance\";\nimport { StakeForm } from \"./StakeForm\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { useEthers, useEtherBalance } from \"@usedapp/core\";\n\nimport { GridTotalStaking } from \"./GridTotalStaking\";\nimport { useContext } from \"react\";\n// import { MyContext } from \"../../App\";\nimport { GridStakingUnstaking } from \"./GridStakingUnstaking\";\nimport { MyContext } from \"../Header2\";\nimport { CheckpointsStake } from \"../CheckpointsStake\";\nimport { formatUnits } from \"@ethersproject/units\"\n\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(0)\n    },\n    box: {\n        backgroundColor: \"white\",\n        borderRadius: \"25px\",\n        opacity: \"0.95\",\n        marginTop: \"1em\",\n    },\n    header: {\n        color: \"white\"\n    }\n}))\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\n\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n    const { dappTokenAddress, formattedDappTokenBalance } = useContext(MyContext)\n\n    const { account } = useEthers()\n    const isConnected = account !== undefined\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n    console.log(\"supported tokens\")\n    console.log(supportedTokens[1].address)\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n    const classes = useStyles()\n    return (\n        <>\n            <div>\n                <h1 className=\"section-heading\"> Stake! Tokens</h1>\n                <GridTotalStaking tokenAddress={dappTokenAddress} />\n                <GridStakingUnstaking tokenAddress={dappTokenAddress} />\n            </div>\n            <Box className=\"\" sx={{ mt: 4 }}>\n                <CheckpointsStake />\n\n                {(isConnected && (formattedEthBalance > 0) && (formattedDappTokenBalance > 0)) ? (\n                    <Box className={classes.box}>\n                        <TabContext value={selectedTokenIndex.toString()}>\n                            <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                                {supportedTokens.map((token, index) => {\n                                    return (\n                                        <Tab label={token.name}\n                                            value={index.toString()}\n                                            key={index} />\n                                    )\n                                })}\n                            </TabList>\n                            {supportedTokens.map((token, index) => {\n                                return (\n                                    <TabPanel value={index.toString()} key={index.toString()}>\n                                        <div className={classes.tabContent}>\n                                            <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                            <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                                        </div>\n\n                                    </TabPanel>\n                                )\n                            })}\n                        </TabContext>\n                    </Box>\n                ) : (<h1 className=\"section-heading\">The above checkpoints must be met to Stake!</h1>)}\n\n            </Box>\n        </>\n\n    )\n}"]},"metadata":{},"sourceType":"module"}