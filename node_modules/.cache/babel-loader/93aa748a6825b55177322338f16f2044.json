{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\";\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\";\nimport { useContext } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\nexport const useClaimPreSaleTokensEachPreSale = () => {\n  _s();\n\n  //address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress\n  } = data; // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface); // return useContractFunction(tokenFarmContract, \"unstakeTokens\",\n  //     { transactionName: \"Unstake Tokens\" })\n\n  const claimAllTokensEachPreSaleSendFunction = preSaleNumber => {\n    return claimAllTokensEachPreSaleSend(preSaleNumber);\n  };\n\n  const {\n    send: claimAllTokensEachPreSaleSend,\n    state: claimAllTokensEachPreSaleState\n  } = useContractFunction(tokenFarmContract, \"claimAllTokensEachPreSale\", {\n    transactionName: \"Claiming Pre Sale Tokens Each PreSale\"\n  });\n  return {\n    claimAllTokensEachPreSaleSendFunction,\n    claimAllTokensEachPreSaleState\n  };\n};\n\n_s(useClaimPreSaleTokensEachPreSale, \"OLgkSIkI4WBIe813uUW9KqmlKqY=\", false, function () {\n  return [useEthers, useContractFunction];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimPreSaleTokensEachPreSale.tsx"],"names":["useEthers","useContractFunction","TokenFarm","utils","Contract","useContext","MyContext","useClaimPreSaleTokensEachPreSale","chainId","abi","data","chainIdentity","tokenFarmContractAddress","tokenFarmInterface","Interface","tokenFarmContract","claimAllTokensEachPreSaleSendFunction","preSaleNumber","claimAllTokensEachPreSaleSend","send","state","claimAllTokensEachPreSaleState","transactionName"],"mappings":";;AACA,SAASA,SAAT,EAAoBC,mBAApB,QAA+C,eAA/C;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AAGA,SAAoBC,KAApB,QAAiC,QAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB;AACA,SAA8BC,UAA9B,QAAgD,OAAhD;AAEA;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAIA,OAAO,MAAMC,gCAAgC,GAAG,MAAM;AAAA;;AAClD;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUP,SAAhB;AAGA,QAAMQ,IAAI,GAAGL,UAAU,CAACC,SAAD,CAAvB;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,MAA8CF,IAApD,CATkD,CAWlD;;AAGA,QAAMG,kBAAkB,GAAG,IAAIV,KAAK,CAACW,SAAV,CAAoBL,GAApB,CAA3B;AACA,QAAMM,iBAAiB,GAAG,IAAIX,QAAJ,CAAaQ,wBAAb,EAAuCC,kBAAvC,CAA1B,CAfkD,CAmBlD;AACA;;AACA,QAAMG,qCAAqC,GAAIC,aAAD,IAA2B;AAErE,WAAOC,6BAA6B,CAACD,aAAD,CAApC;AACH,GAHD;;AAIA,QAAM;AAAEE,IAAAA,IAAI,EAAED,6BAAR;AAAuCE,IAAAA,KAAK,EAAEC;AAA9C,MACFpB,mBAAmB,CAACc,iBAAD,EAAoB,2BAApB,EACf;AAAEO,IAAAA,eAAe,EAAE;AAAnB,GADe,CADvB;AAIA,SAAO;AAAEN,IAAAA,qCAAF;AAAyCK,IAAAA;AAAzC,GAAP;AAEH,CA/BM;;GAAMd,gC;UAIWP,S,EAsBhBC,mB","sourcesContent":["import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useEffect, useState, useContext } from \"react\"\nimport PreSale from \"../chain-info/contracts/PreSale.json\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\n\nexport const useClaimPreSaleTokensEachPreSale = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n\n\n    // return useContractFunction(tokenFarmContract, \"unstakeTokens\",\n    //     { transactionName: \"Unstake Tokens\" })\n    const claimAllTokensEachPreSaleSendFunction = (preSaleNumber: string) => {\n\n        return claimAllTokensEachPreSaleSend(preSaleNumber)\n    }\n    const { send: claimAllTokensEachPreSaleSend, state: claimAllTokensEachPreSaleState } =\n        useContractFunction(tokenFarmContract, \"claimAllTokensEachPreSale\",\n            { transactionName: \"Claiming Pre Sale Tokens Each PreSale\" })\n\n    return { claimAllTokensEachPreSaleSendFunction, claimAllTokensEachPreSaleState }\n\n}"]},"metadata":{},"sourceType":"module"}