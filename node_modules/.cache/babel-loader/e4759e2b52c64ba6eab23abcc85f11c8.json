{"ast":null,"code":"var _s = $RefreshSig$();\n\n// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\";\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"; // import ERC20 from \"../chain-info/contracts/MockERC20.json\"\n\nimport { utils } from \"ethers\";\nimport { Contract } from \"@ethersproject/contracts\"; // import { useEffect, useState } from \"react\"\n\nimport { useContext } from \"react\"; // import { MyContext } from \"../App\";\n\nimport { MyContext } from \"../components/Header2\";\nexport const useUnStakeAllTokens = () => {\n  _s();\n\n  //address\n  // abi\n  // chainId\n  const {\n    chainId\n  } = useEthers();\n  const {\n    abi\n  } = TokenFarm;\n  const data = useContext(MyContext);\n  const {\n    chainIdentity,\n    tokenFarmContractAddress: tokenFarmAddress\n  } = data; // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n  const tokenFarmInterface = new utils.Interface(abi);\n  const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface); // const erc20ABI = ERC20.abi\n  // const erc20Interface = new utils.Interface(erc20ABI)\n  // const erc20Contract = new Contract(tokenAddress, erc20Interface)\n  //aprove\n  // const UnStakeTokens = () => {\n  //     unStakeSend(tokenAddress)\n  // }\n  // const { send: unStakeSend, state: unStakeState } =\n  //     useContractFunction(tokenFarmContract, \"unstakeTokens\",\n  //         { transactionName: \"Unstake Tokens\" })\n\n  return useContractFunction(tokenFarmContract, \"unstakeAllTokens\", {\n    transactionName: \"Unstake All Tokens\"\n  }); //stake tokens\n};\n\n_s(useUnStakeAllTokens, \"eq5qRdVeT1flU7cIvrhgYy1PmYg=\", false, function () {\n  return [useEthers, useContractFunction];\n});","map":{"version":3,"sources":["/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useUnStakeAllTokens.tsx"],"names":["useEthers","useContractFunction","TokenFarm","utils","Contract","useContext","MyContext","useUnStakeAllTokens","chainId","abi","data","chainIdentity","tokenFarmContractAddress","tokenFarmAddress","tokenFarmInterface","Interface","tokenFarmContract","transactionName"],"mappings":";;AAAA;AACA,SAASA,SAAT,EAAoBC,mBAApB,QAA+C,eAA/C;AACA,OAAOC,SAAP,MAAsB,wCAAtB,C,CACA;;AAEA,SAAoBC,KAApB,QAAiC,QAAjC;AACA,SAASC,QAAT,QAAyB,0BAAzB,C,CACA;;AACA,SAASC,UAAT,QAA2B,OAA3B,C,CACA;;AACA,SAASC,SAAT,QAA0B,uBAA1B;AAGA,OAAO,MAAMC,mBAAmB,GAAG,MAAM;AAAA;;AACrC;AACA;AACA;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAcR,SAAS,EAA7B;AACA,QAAM;AAAES,IAAAA;AAAF,MAAUP,SAAhB;AAEA,QAAMQ,IAAI,GAAGL,UAAU,CAACC,SAAD,CAAvB;AACA,QAAM;AAAEK,IAAAA,aAAF;AAAiBC,IAAAA,wBAAwB,EAAEC;AAA3C,MAAgEH,IAAtE,CARqC,CAWrC;;AACA,QAAMI,kBAAkB,GAAG,IAAIX,KAAK,CAACY,SAAV,CAAoBN,GAApB,CAA3B;AACA,QAAMO,iBAAiB,GAAG,IAAIZ,QAAJ,CAAaS,gBAAb,EAA+BC,kBAA/B,CAA1B,CAbqC,CAerC;AACA;AACA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;;AAEA,SAAOb,mBAAmB,CAACe,iBAAD,EAAoB,kBAApB,EACtB;AAAEC,IAAAA,eAAe,EAAE;AAAnB,GADsB,CAA1B,CAhCqC,CAoCrC;AACH,CArCM;;GAAMV,mB;UAIWP,S,EA4BbC,mB","sourcesContent":["// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\n// import ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n// import { useEffect, useState } from \"react\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useUnStakeAllTokens = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress: tokenFarmAddress } = data\n\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // const erc20ABI = ERC20.abi\n    // const erc20Interface = new utils.Interface(erc20ABI)\n    // const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    //aprove\n\n\n    // const UnStakeTokens = () => {\n    //     unStakeSend(tokenAddress)\n    // }\n\n\n\n    // const { send: unStakeSend, state: unStakeState } =\n    //     useContractFunction(tokenFarmContract, \"unstakeTokens\",\n    //         { transactionName: \"Unstake Tokens\" })\n\n    return useContractFunction(tokenFarmContract, \"unstakeAllTokens\",\n        { transactionName: \"Unstake All Tokens\" })\n\n\n    //stake tokens\n}"]},"metadata":{},"sourceType":"module"}