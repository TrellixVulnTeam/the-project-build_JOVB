[{"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/index.tsx":"1","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/reportWebVitals.ts":"2","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/App.tsx":"3","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Header2.tsx":"4","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Footer.tsx":"5","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/FollowUs.tsx":"6","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Main.tsx":"7","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useGetStakingLevel.tsx":"8","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Projects.tsx":"9","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/PreSale.tsx":"10","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Project.tsx":"11","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridWethBusdBalance.tsx":"12","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/UnStakeYourWallet.tsx":"13","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/index.ts":"14","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/CheckpointsPreSale.tsx":"15","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useGetValues.tsx":"16","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/WalletBalance.tsx":"17","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/CheckpointsEachPreSale.tsx":"18","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/CompleteGridPurchasedPreSaleBalance.tsx":"19","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridTotalStaking.tsx":"20","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridStakingUnstaking.tsx":"21","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/project/ParticipateButton.tsx":"22","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridClaimRewards.tsx":"23","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/project/ParticipateTab.tsx":"24","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/PreSaleForm.tsx":"25","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/GridBoxes/GridEachPreSalePurchasedBalance.tsx":"26","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/UnStakeForm.tsx":"27","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/project/AllocatedAmountToParticipate.tsx":"28","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/YourWallet.tsx":"29","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/ProgressBar.tsx":"30","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAvailableToClaim.tsx":"31","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePurchasedBalance.tsx":"32","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakingBalance.tsx":"33","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimPreSaleTokens.tsx":"34","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/BalanceMsg.tsx":"35","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakingRewards.tsx":"36","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePreSale.tsx":"37","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimStakingRewards.tsx":"38","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/PreSaleFormEachPreSale.tsx":"39","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useParticipateButton.tsx":"40","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePurchasedBalanceEachPreSale.tsx":"41","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakeTokens.ts":"42","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useWithdrawPreSaleBalance.tsx":"43","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimPreSaleTokensEachPreSale.tsx":"44","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useUnStakeAllTokens.tsx":"45","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAvailableToClaimEachPreSale.tsx":"46","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAllocatedAmount.tsx":"47","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useUnStakeTokens.tsx":"48","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/CheckpointsStake.tsx":"49","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/StakeForm.tsx":"50","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePreSaleEachPreSale.tsx":"51"},{"size":502,"mtime":1649037868075,"results":"52","hashOfConfig":"53"},{"size":425,"mtime":1649037868078,"results":"54","hashOfConfig":"53"},{"size":2975,"mtime":1649037868075,"results":"55","hashOfConfig":"53"},{"size":14563,"mtime":1649037868079,"results":"56","hashOfConfig":"53"},{"size":1416,"mtime":1649037868080,"results":"57","hashOfConfig":"53"},{"size":2464,"mtime":1649037868079,"results":"58","hashOfConfig":"53"},{"size":4652,"mtime":1649037868079,"results":"59","hashOfConfig":"53"},{"size":1638,"mtime":1649037868299,"results":"60","hashOfConfig":"53"},{"size":2141,"mtime":1649037868079,"results":"61","hashOfConfig":"53"},{"size":5668,"mtime":1649037868081,"results":"62","hashOfConfig":"53"},{"size":7159,"mtime":1649037868082,"results":"63","hashOfConfig":"53"},{"size":2977,"mtime":1649037868084,"results":"64","hashOfConfig":"53"},{"size":4305,"mtime":1649037868084,"results":"65","hashOfConfig":"53"},{"size":41,"mtime":1649037868085,"results":"66","hashOfConfig":"53"},{"size":8201,"mtime":1649037868082,"results":"67","hashOfConfig":"53"},{"size":3658,"mtime":1649037868302,"results":"68","hashOfConfig":"53"},{"size":1285,"mtime":1649037868085,"results":"69","hashOfConfig":"53"},{"size":9309,"mtime":1649037868079,"results":"70","hashOfConfig":"53"},{"size":6585,"mtime":1649037868084,"results":"71","hashOfConfig":"53"},{"size":3357,"mtime":1649037868083,"results":"72","hashOfConfig":"53"},{"size":3902,"mtime":1649037868083,"results":"73","hashOfConfig":"53"},{"size":2239,"mtime":1649037868081,"results":"74","hashOfConfig":"53"},{"size":3442,"mtime":1649037868083,"results":"75","hashOfConfig":"53"},{"size":3113,"mtime":1649037868081,"results":"76","hashOfConfig":"53"},{"size":5465,"mtime":1649037868083,"results":"77","hashOfConfig":"53"},{"size":6674,"mtime":1649037868082,"results":"78","hashOfConfig":"53"},{"size":6732,"mtime":1649037868083,"results":"79","hashOfConfig":"53"},{"size":3154,"mtime":1649037868081,"results":"80","hashOfConfig":"53"},{"size":3895,"mtime":1649037868085,"results":"81","hashOfConfig":"53"},{"size":12139,"mtime":1649037868080,"results":"82","hashOfConfig":"53"},{"size":1350,"mtime":1649037868298,"results":"83","hashOfConfig":"53"},{"size":1325,"mtime":1649037868300,"results":"84","hashOfConfig":"53"},{"size":1533,"mtime":1649037868299,"results":"85","hashOfConfig":"53"},{"size":1424,"mtime":1649037868301,"results":"86","hashOfConfig":"53"},{"size":896,"mtime":1649037868082,"results":"87","hashOfConfig":"53"},{"size":1104,"mtime":1649037868300,"results":"88","hashOfConfig":"53"},{"size":2773,"mtime":1649037868298,"results":"89","hashOfConfig":"53"},{"size":830,"mtime":1649037868300,"results":"90","hashOfConfig":"53"},{"size":5786,"mtime":1649037868087,"results":"91","hashOfConfig":"53"},{"size":1228,"mtime":1649037868301,"results":"92","hashOfConfig":"53"},{"size":1674,"mtime":1649037868301,"results":"93","hashOfConfig":"53"},{"size":2469,"mtime":1649037868299,"results":"94","hashOfConfig":"53"},{"size":1811,"mtime":1649037868302,"results":"95","hashOfConfig":"53"},{"size":1775,"mtime":1649037868300,"results":"96","hashOfConfig":"53"},{"size":1736,"mtime":1649037868301,"results":"97","hashOfConfig":"53"},{"size":1454,"mtime":1649037868300,"results":"98","hashOfConfig":"53"},{"size":1284,"mtime":1649037868300,"results":"99","hashOfConfig":"53"},{"size":1962,"mtime":1649037868298,"results":"100","hashOfConfig":"53"},{"size":8309,"mtime":1649037868088,"results":"101","hashOfConfig":"53"},{"size":3595,"mtime":1649037868087,"results":"102","hashOfConfig":"53"},{"size":4885,"mtime":1649037868299,"results":"103","hashOfConfig":"53"},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1x2ubj1",{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124"},{"filePath":"125","messages":"126","suppressedMessages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128"},{"filePath":"129","messages":"130","suppressedMessages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","suppressedMessages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136"},{"filePath":"137","messages":"138","suppressedMessages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"140"},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144"},{"filePath":"145","messages":"146","suppressedMessages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148"},{"filePath":"149","messages":"150","suppressedMessages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152"},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","suppressedMessages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159"},{"filePath":"160","messages":"161","suppressedMessages":"162","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"163"},{"filePath":"164","messages":"165","suppressedMessages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167"},{"filePath":"168","messages":"169","suppressedMessages":"170","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171"},{"filePath":"172","messages":"173","suppressedMessages":"174","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175"},{"filePath":"176","messages":"177","suppressedMessages":"178","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179"},{"filePath":"180","messages":"181","suppressedMessages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"183"},{"filePath":"184","messages":"185","suppressedMessages":"186","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187"},{"filePath":"188","messages":"189","suppressedMessages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191"},{"filePath":"192","messages":"193","suppressedMessages":"194","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195"},{"filePath":"196","messages":"197","suppressedMessages":"198","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199"},{"filePath":"200","messages":"201","suppressedMessages":"202","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203"},{"filePath":"204","messages":"205","suppressedMessages":"206","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"207"},{"filePath":"208","messages":"209","suppressedMessages":"210","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"211","messages":"212","suppressedMessages":"213","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"214"},{"filePath":"215","messages":"216","suppressedMessages":"217","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218"},{"filePath":"219","messages":"220","suppressedMessages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222"},{"filePath":"223","messages":"224","suppressedMessages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226"},{"filePath":"227","messages":"228","suppressedMessages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230"},{"filePath":"231","messages":"232","suppressedMessages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"234"},{"filePath":"235","messages":"236","suppressedMessages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","suppressedMessages":"240","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"241"},{"filePath":"242","messages":"243","suppressedMessages":"244","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"245"},{"filePath":"246","messages":"247","suppressedMessages":"248","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"249"},{"filePath":"250","messages":"251","suppressedMessages":"252","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"253"},{"filePath":"254","messages":"255","suppressedMessages":"256","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257"},{"filePath":"258","messages":"259","suppressedMessages":"260","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"261"},{"filePath":"262","messages":"263","suppressedMessages":"264","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"265"},{"filePath":"266","messages":"267","suppressedMessages":"268","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"269"},{"filePath":"270","messages":"271","suppressedMessages":"272","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"273"},{"filePath":"274","messages":"275","suppressedMessages":"276","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"277"},{"filePath":"278","messages":"279","suppressedMessages":"280","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"281"},{"filePath":"282","messages":"283","suppressedMessages":"284","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"285"},{"filePath":"286","messages":"287","suppressedMessages":"288","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"289"},{"filePath":"290","messages":"291","suppressedMessages":"292","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"293"},{"filePath":"294","messages":"295","suppressedMessages":"296","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"297"},{"filePath":"298","messages":"299","suppressedMessages":"300","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"301"},"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/index.tsx",[],[],"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/reportWebVitals.ts",[],[],"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/App.tsx",["302","303","304","305","306","307","308","309","310","311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326","327","328","329"],[],"import React, { useEffect, useState, createContext } from 'react';\nimport './App.scss';\n\n\nimport { DAppProvider, ChainId } from \"@usedapp/core\"\nimport { useEthers } from \"@usedapp/core\";\n\nimport { Header } from \"./components/Header\"\nimport { Container } from \"@mui/material\"\nimport { Main } from \"./components/Main\"\nimport { Header1 } from \"./components/Header1\"\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\"\nimport ResponsiveAppBar from './components/Header2';\nimport { ResponsiveAppBar1 } from './components/Header3';\nimport Box from '@mui/material/Box';\nimport { Balance } from \"./components/Balance\"\nimport { Button, Chip } from '@material-ui/core';\nimport { InformationPage } from './components/InformationPage'\nimport networkMapping from \"./chain-info/deployments/map.json\"\nimport { constants } from \"ethers\"\nimport { Footer } from './components/Footer';\n\n\n\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n  }\n}\n// export const MyContext = createContext({ chainIdentity: 0, tokenFarmContractAddress: '0x7db58Fa9330c68e1cFA28753E013c2098557Bf9c', dappTokenAddress: '0x7db58Fa9330c68e1cFA28753E013c2098557Bf9c' })\n\n\n\n// const Provider = window.ethereum;\n\nfunction App() {\n\n  const { account, activateBrowserWallet, deactivate, chainId } = useEthers()\n  const isConnected = account !== undefined\n  const numberMain = 0\n\n  const chainIdentity = chainId ? (String(chainId) == '42') ? 42 : (String(chainId) == '97') ? 97 : 0 : 0\n  const tokenFarmContractAddress = (\n    chainId ?\n      (((String(chainId) == '42') || (String(chainId) == '97')) ?\n        networkMapping[String(chainId)][\"TokenFarm\"][0] :\n        constants.AddressZero) :\n      constants.AddressZero)\n\n  console.log(\"This is in Header2 tokenFarmContractAddress: \" + tokenFarmContractAddress)\n\n  const dappTokenAddress = (\n    chainId ?\n      (((String(chainId) == '42') || (String(chainId) == '97')) ?\n        networkMapping[String(chainId)][\"DappToken\"][0] :\n        constants.AddressZero) :\n      constants.AddressZero)\n\n\n  return (\n    <>\n      {/* <div className=\"hero-img\"></div> */}\n      <DAppProvider config={{\n        // supportedChains: [ChainId.Kovan],\n        // multicallVersion: 2,\n        notifications: {\n          expirationPeriod: 1000,\n          checkInterval: 1000\n        }\n      }}>\n        {/* <MyContext.Provider value={{ chainIdentity, tokenFarmContractAddress, dappTokenAddress }}> */}\n\n        <BrowserRouter>\n          {/* <ResponsiveAppBar1 /> */}\n          {/* <Header1 /> */}\n          <div className='header'>\n            <ResponsiveAppBar />\n          </div>\n\n          <Footer />\n          {/* <section>\n            <Main elementNumber={numberMain} />\n          </section> */}\n\n        </BrowserRouter>\n        {/* </MyContext.Provider> */}\n      </DAppProvider>\n\n\n    </>\n\n\n\n  );\n}\n\nexport default App;\n\n\n//<Container maxWidth=\"md\">\n  //      {/* <h1 className=\"App\" >\n    //      DApp\n      //  </h1> */}\n       // <Main />\n      //</Container>\n\n","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Header2.tsx",["330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346","347","348"],[],"import * as React from 'react';\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport IconButton from '@mui/material/IconButton';\nimport Typography from '@mui/material/Typography';\nimport Menu from '@mui/material/Menu';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport Container from '@mui/material/Container';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport { makeStyles, Snackbar } from '@material-ui/core';\nimport Tooltip from '@mui/material/Tooltip';\nimport MenuItem from '@mui/material/MenuItem';\nimport { Link, Outlet } from 'react-router-dom'\nimport { ThemeProvider, createTheme } from '@mui/material/styles';\nimport Chip from '@mui/material/Chip';\nimport { useEthers, useEtherBalance, useTokenBalance } from \"@usedapp/core\";\nimport { Main } from \"./Main\"\nimport { useState, useEffect, useContext, createContext } from \"react\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useGetStakingLevel } from '../hooks/useGetStakingLevel';\nimport { formatUnits } from \"@ethersproject/units\"\nimport { FollowUs } from './FollowUs';\n\n// export type ContextObj = {\n//     chainId: number\n//     address: string\n// }\n\nexport const MyContext = createContext(\n    {\n        chainIdentity: 0,\n        tokenFarmContractAddress: '0x7db58Fa9330c68e1cFA28753E013c2098557Bf9c',\n        dappTokenAddress: '0x7db58Fa9330c68e1cFA28753E013c2098557Bf9c',\n        formattedEthBalance: 0,\n        formattedDappTokenBalance: 0\n    })\n\n\n// const pages = ['Projects', 'Stake', 'Unstake', Withdraw];\nconst useStyles = makeStyles((theme) => ({\n    container: {\n        // paddingLeft: theme.spacing(4),\n        // paddingRight: theme.spacing(4),\n        // paddingTop: theme.spacing(1),\n        // display: \"flex\",\n        // justifyContent: \"flex-end\",\n        // gap: theme.spacing(1)\n    },\n    navmenu: {\n        width: \"50%\",\n        height: \"100%\",\n        maxHeight: 'unset',\n        maxWidth: 'unset',\n\n    },\n    menu: {\n        opacity: \"1\",\n        marginLeft: \"-1em\",\n        marginTop: \"1.5em\",\n        textTransform: \"uppercase\",\n        fontWeight: \"bold\",\n    },\n}))\n\n\nconst darkTheme = createTheme({\n    palette: {\n        primary: {\n            main: '#151313',\n        },\n        secondary: {\n            main: '#f44336',\n        },\n    },\n});\n\n\nconst pages = [\n    { name: 'Projects', link: '/' },\n    { name: 'Stake', link: '/stake' },\n    { name: 'UnStake / Rewards', link: '/unstake-rewards' },\n    // { name: 'Withdraw', link: '/' },\n    { name: 'PreSale', link: '/presale' },\n    { name: 'project0', link: '/projects/0' }\n];\nconst settings = ['Profile', 'Account', 'Dashboard', 'Logout'];\n\nconst ResponsiveAppBar = () => {\n\n    const classes = useStyles()\n\n    const { account, activateBrowserWallet, deactivate, chainId } = useEthers()\n    const tokenFarmContractAddress = (\n        chainId ?\n            (((String(chainId) == '42') || (String(chainId) == '97')) ?\n                networkMapping[String(chainId)][\"TokenFarm\"][0] :\n                constants.AddressZero) :\n            constants.AddressZero)\n\n    console.log(\"This is in Header2 tokenFarmContractAddress: \" + tokenFarmContractAddress)\n\n    const dappTokenAddress = (\n        chainId ?\n            (((String(chainId) == '42') || (String(chainId) == '97')) ?\n                networkMapping[String(chainId)][\"DappToken\"][0] :\n                constants.AddressZero) :\n            constants.AddressZero)\n\n    const chainIdentity = chainId ? (String(chainId) == '42') ? 42 : (String(chainId) == '97') ? 97 : 0 : 0\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    const dappTokenBalance = useTokenBalance(dappTokenAddress, account)\n    const formattedDappTokenBalance: number = dappTokenBalance ? parseFloat(formatUnits(dappTokenBalance, 18)) : 0\n\n\n    const isConnected = account !== undefined\n\n    const [anchorElNav, setAnchorElNav] = React.useState(null);\n    const [anchorElUser, setAnchorElUser] = React.useState(null);\n    let [numberMain, setNumberMain] = useState<number>(0)\n    const [openSnack, setOpenSnack] = React.useState(false);\n    const [chainNumber, setChainNumber] = useState(0)\n\n    // let numberMain = 2;\n    useEffect(() => {\n        chainId ?\n            ((String(chainId) == '42') || (String(chainId) == '97')) ?\n                handleChainPresent(chainId) :\n                handleChainNotPresent() :\n            setOpenSnack(true)\n    }, [chainId])\n\n    const handleChainPresent = (chain: number) => {\n        setOpenSnack(false)\n        setChainNumber(chain)\n    }\n    const handleChainNotPresent = () => {\n        setOpenSnack(true)\n        setChainNumber(0)\n    }\n    // console.log('You are seeing chainNumber in Header3: ' + chainNumber)\n\n    const handleCloseSnack = () => {\n        setOpenSnack(false)\n    }\n\n    const handleOpenNavMenu = (event: React.BaseSyntheticEvent) => {\n        setAnchorElNav(event.currentTarget);\n    };\n    const handleOpenUserMenu = (event: React.BaseSyntheticEvent) => {\n        setAnchorElUser(event.currentTarget);\n    };\n\n    const handleCloseNavMenu = (valuee: number) => {\n        setNumberMain(valuee)\n        // numberMain = valuee;\n        setAnchorElNav(null);\n    };\n    const handleCloseNavMenuOnly = (valuee: number) => {\n        // setNumberMain(valuee)\n        // numberMain = valuee;\n        setAnchorElNav(null);\n    };\n\n    const handleCloseUserMenu = () => {\n        setAnchorElUser(null);\n    };\n\n    const { getStakingLevel } = useGetStakingLevel()\n    const fStakingLevel: number = getStakingLevel ? parseFloat(getStakingLevel) : 0\n\n    return (\n        <>\n            <MyContext.Provider\n                value={{\n                    chainIdentity,\n                    tokenFarmContractAddress,\n                    dappTokenAddress,\n                    formattedEthBalance,\n                    formattedDappTokenBalance\n                }}>\n\n                {/* <button >this</button> */}\n                <Box >\n                    <ThemeProvider theme={darkTheme} >\n                        <Box >\n                            <AppBar position=\"sticky\" >\n                                <Box maxWidth=\"xl\" >\n                                    <Toolbar disableGutters>\n                                        <Typography\n                                            variant=\"h6\"\n                                            noWrap\n                                            component=\"div\"\n                                            sx={{ mr: 2, ml: 2, display: { xs: 'none', md: 'flex' } }}\n                                        >\n                                            The Bulls Pad\n                                        </Typography>\n\n                                        <Box sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}>\n                                            <IconButton\n                                                size=\"large\"\n                                                aria-label=\"account of current user\"\n                                                aria-controls=\"menu-appbar\"\n                                                aria-haspopup=\"true\"\n                                                onClick={handleOpenNavMenu}\n                                                color=\"inherit\"\n                                            >\n                                                <MenuIcon />\n                                            </IconButton>\n                                            <Menu\n                                                id=\"menu-appbar\"\n                                                anchorEl={anchorElNav}\n                                                anchorOrigin={{\n                                                    vertical: 'bottom',\n                                                    horizontal: 'left',\n                                                }}\n                                                keepMounted\n                                                transformOrigin={{\n                                                    vertical: 'top',\n                                                    horizontal: 'left',\n                                                }}\n                                                open={Boolean(anchorElNav)}\n                                                onClose={handleCloseNavMenuOnly}\n                                                sx={{\n                                                    display: { xs: 'block', md: 'none' },\n                                                }}\n                                                className={classes.menu}\n                                                PopoverClasses={{ paper: classes.navmenu }}\n\n                                            >\n                                                {pages.map((page, index) => (\n                                                    <Link style={{ padding: \"0\" }} to={page.link} key={page.name}>\n\n                                                        <MenuItem className=\"menu-item\" onClick={(() => handleCloseNavMenu(index))}>\n                                                            <h4> {page.name}</h4>\n                                                        </MenuItem>\n                                                    </Link>\n                                                ))}\n                                            </Menu>\n                                        </Box>\n                                        <Typography\n                                            variant=\"h6\"\n                                            noWrap\n                                            component=\"div\"\n                                            sx={{ flexGrow: 1, display: { xs: 'flex', md: 'none' } }}\n                                        >\n                                            The Bulls Pad\n                                        </Typography>\n                                        <Box sx={{ flexGrow: 1, display: { xs: 'none', md: 'flex' } }}>\n                                            {pages.map((page, index) => (\n                                                <Link to={page.link} key={index.toString()}>\n                                                    <Button\n\n                                                        onClick={(() => handleCloseNavMenu(index))}\n                                                        sx={{ my: 2, color: 'white', display: 'block' }}\n                                                    >\n                                                        {page.name}\n                                                    </Button>\n                                                </Link>\n\n                                            ))}\n                                        </Box>\n\n\n                                        <Box sx={{ m: 2 }}>\n                                            {isConnected ? (\n                                                <Chip label=\"Disconnect!\"\n                                                    component=\"a\"\n                                                    // href=\"/5\"\n                                                    onClick={deactivate}\n                                                    clickable\n                                                    color='success' />\n                                            ) : (\n                                                <Chip label=\"Connect Wallet!\"\n                                                    component=\"a\"\n                                                    // href=\"/5\"\n                                                    onClick={() => activateBrowserWallet()}\n                                                    color='success'\n                                                    clickable />\n                                            )}\n                                        </Box>\n\n                                    </Toolbar>\n                                </Box>\n                            </AppBar>\n                        </Box>\n                    </ThemeProvider>\n                    <div className='div-under-header'>\n                        <div className='staking-level'>\n                            <h4 className='under-header'>Staking Level: {fStakingLevel} </h4>\n                        </div>\n                        <div className='account-number'>\n                            <Box>{isConnected ? (\n                                <Button\n                                    onClick={deactivate}>\n                                    {/* {account} */}\n                                    <Box style={{ width: 200, whiteSpace: 'nowrap' }}>\n                                        <Box\n                                            component=\"div\"\n                                            sx={{\n                                                overflow: 'auto',\n                                                fontSize: '0.875rem',\n                                                fontWeight: '700',\n                                            }}\n                                        >\n                                            {account}\n                                        </Box>\n                                    </Box>\n\n                                </Button>\n                            ) : (\n                                <Button color=\"secondary\"\n                                    onClick={() => activateBrowserWallet()}>\n                                    Accont Not Connected\n                                </Button>\n\n                            )}</Box>\n                        </div>\n                    </div>\n                    <FollowUs />\n                </Box>\n                <section>\n                    <Main elementNumber={numberMain} />\n                </section>\n                {/* <Outlet /> */}\n\n                <Snackbar open={openSnack}\n                    autoHideDuration={5000}\n                >\n                    <Alert severity=\"error\" >\n                        Wallet Connected?\n                        <hr />\n                        Switch Network to Binance Smart Chain.\n                    </Alert>\n\n                </Snackbar>\n            </MyContext.Provider>\n\n        </>\n    );\n};\nexport default ResponsiveAppBar;\n","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Footer.tsx",[],[],"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/FollowUs.tsx",["349"],[],"import React from 'react'\nimport { Link } from 'react-router-dom'\n\nexport const FollowUs = () => {\n    return (\n        <div className='join-us'>\n            <h4>For more updates, join us on: </h4>\n            <a href=\"https://twitter.com/TheBullsPad\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <svg className='join-us-svg' width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path d=\"M11.7887 28C8.55374 28 5.53817 27.0591 3 25.4356C5.15499 25.5751 8.95807 25.2411 11.3236 22.9848C7.76508 22.8215 6.16026 20.0923 5.95094 18.926C6.25329 19.0426 7.6953 19.1826 8.50934 18.856C4.4159 17.8296 3.78793 14.2373 3.92748 13.141C4.695 13.6775 5.99745 13.8641 6.50913 13.8174C2.69479 11.0882 4.06703 6.98276 4.74151 6.09635C7.47882 9.88867 11.5812 12.0186 16.6564 12.137C16.5607 11.7174 16.5102 11.2804 16.5102 10.8316C16.5102 7.61092 19.1134 5 22.3247 5C24.0025 5 25.5144 5.71275 26.5757 6.85284C27.6969 6.59011 29.3843 5.97507 30.2092 5.4432C29.7934 6.93611 28.4989 8.18149 27.7159 8.64308C27.7224 8.65878 27.7095 8.62731 27.7159 8.64308C28.4037 8.53904 30.2648 8.18137 31 7.68256C30.6364 8.52125 29.264 9.91573 28.1377 10.6964C28.3473 19.9381 21.2765 28 11.7887 28Z\" fill=\"#47ACDF\" />\n                </svg>\n            </a>\n            <a href=\"https://t.me/thebullspad\" target=\"_blank\" rel=\"noopener noreferrer\">\n                <svg className=\"join-us-svg\" width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <circle cx=\"16\" cy=\"16\" r=\"14\" fill=\"url(#paint0_linear_1_13647)\" />\n                    <path d=\"M22.9866 10.2088C23.1112 9.40332 22.3454 8.76755 21.6292 9.082L7.36482 15.3448C6.85123 15.5703 6.8888 16.3483 7.42147 16.5179L10.3631 17.4547C10.9246 17.6335 11.5325 17.541 12.0228 17.2023L18.655 12.6203C18.855 12.4821 19.073 12.7665 18.9021 12.9426L14.1281 17.8646C13.665 18.3421 13.7569 19.1512 14.314 19.5005L19.659 22.8523C20.2585 23.2282 21.0297 22.8506 21.1418 22.1261L22.9866 10.2088Z\" fill=\"white\" />\n                    <defs>\n                        <linearGradient id=\"paint0_linear_1_13647\" x1=\"16\" y1=\"2\" x2=\"16\" y2=\"30\" gradientUnits=\"userSpaceOnUse\">\n                            <stop stop-color=\"#37BBFE\" />\n                            <stop offset=\"1\" stop-color=\"#007DBB\" />\n                        </linearGradient>\n                    </defs>\n                </svg>\n            </a>\n        </div>\n    )\n}\n","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Main.tsx",["350","351","352","353","354","355","356","357","358","359","360","361","362","363"],[],"/* eslint-disable spaced-comment */\n/// <reference types=\"react-scripts\" />\nimport { useEthers } from \"@usedapp/core\"\nimport helperConfig from \"../helper-config.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants } from \"ethers\"\nimport brownieConfig from \"../brownie-config.json\"\nimport dapp from \"../dapp.png\"\nimport dai from \"../dai.png\"\nimport eth from \"../eth.png\"\nimport { YourWallet } from \"./yourWallet\"\nimport { UnStakeYourWallet } from \"./yourWallet/UnStakeYourWallet\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { textAlign } from \"@mui/system\"\nimport { PreSale } from \"./PreSale\"\nimport { BrowserRouter, Routes, Route, Outlet } from \"react-router-dom\"\nimport { Container } from \"@mui/material\"\nimport { Balance } from \"./Balance\"\nimport { Projects } from \"./Projects\"\nimport { Project } from \"./Project\"\nimport { GridPurchasedPreSaleBalance } from \"./yourWallet/GridPurchasedPreSaleBalance\"\nimport { GridWethBusdBalance } from \"./yourWallet/GridWethBusdBalance\"\nimport { GridTotalStaking } from \"./yourWallet/GridTotalStaking\"\nimport { GridStakingUnstaking } from \"./yourWallet/GridStakingUnstaking\"\nimport { useEffect, useState, useContext } from \"react\"\nimport { Link } from \"react-router-dom\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"./Header2\";\n\nexport type Token = {\n    image: string\n    address: string\n    name: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n    title: {\n        color: theme.palette.common.white,\n        textAlign: \"center\",\n        padding: theme.spacing(4)\n    }\n}))\n\ninterface elementNumber {\n    elementNumber: number\n}\n\nconst pathList = [\"/\", \"/staking\", \"/unstaking-rewards\", \"/pre-sale\"]\n\nexport const Main = ({ elementNumber }: elementNumber) => {\n\n    const { dappTokenAddress: dapp_token_address } = useContext(MyContext)\n    const classes = useStyles()\n    const eNumber = elementNumber\n    console.log('You are in main eNumber: ' + eNumber)\n\n    const { chainId } = useEthers()\n\n    const [chainNumber, setChainNumber] = useState<number | undefined>(42)\n\n    useEffect(() => {\n        setChainNumber(chainId)\n    }, [chainId])\n\n    console.log('this is chainNUmber: ' + chainNumber)\n    const networkName = (chainId ? ((String(chainId) == '42') ? helperConfig[chainId] : \"dev\") : \"dev\")\n\n    const dappTokenAddress = dapp_token_address\n\n    // const dappTokenAddress = '0x759b7741065cAa8dd699e45892F452228faBe58B'\n    const wethTokenAddress = (chainId ? ((String(chainId) == '42') ? brownieConfig[\"networks\"][networkName][\"weth_token\"] : constants.AddressZero) : constants.AddressZero)\n    //    const wethTokenAddress = '0xd0a1e359811322d97991e03f863a0c30c2cf029c'\n    const fauTokenAddress = (chainId ? ((String(chainId) == '42') ? brownieConfig[\"networks\"][networkName][\"fau_token\"] : constants.AddressZero) : constants.AddressZero)\n    // const fauTokenAddress = '0xFab46E002BbF0b4509813474841E0716E6730136'\n    const supportedTokens: Array<Token> = [\n        {\n            image: dapp,\n            address: dappTokenAddress,\n            name: \"DAPP\"\n        }, {\n            image: eth,\n            address: wethTokenAddress,\n            name: \"WETH\"\n        }, {\n            image: dai,\n            address: fauTokenAddress,\n            name: \"DAI\"\n        }\n\n    ]\n\n    const supportedPreSaleTokens: Array<Token> = [\n        {\n            image: dapp,\n            address: dappTokenAddress,\n            name: \"DAPP\"\n        },\n        // {\n        //     image: eth,\n        //     address: wethTokenAddress,\n        //     name: \"WETH\"\n        // }, \n        {\n            image: dai,\n            address: fauTokenAddress,\n            name: \"DAI\"\n        }\n    ]\n\n    console.log(\"You are in main: \" + window.location.href)\n\n    return (<>\n\n        <Container maxWidth=\"md\" sx={{ mt: 0 }}>\n            <GridWethBusdBalance tokenAddress={dappTokenAddress} />\n            <Routes>\n                <Route path=\"/\" element={<Projects />} />\n                <Route path=\"projects\" element={<Projects />}>\n                </Route>\n                <Route path='projects/:id' element={<Project supportedTokens={supportedPreSaleTokens} />}></Route>\n\n                <Route path=\"/stake\" element={<YourWallet supportedTokens={supportedTokens} />} />\n                <Route path=\"/unstake-rewards\" element={<UnStakeYourWallet supportedTokens={supportedTokens} />} />\n                <Route path=\"/presale\" element={<PreSale supportedTokens={supportedPreSaleTokens} />} />\n                {/* <Route path=\"*\" element={<Projects />} /> */}\n            </Routes>\n            {/* <Outlet /> */}\n        </Container>\n    </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useGetStakingLevel.tsx",["364","365","366","367","368","369","370","371"],[],"import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useGetStakingLevel = () => {\n    const data = useContext(MyContext)\n    // const { chainIdentity, tokenFarmContractAddress } = data\n\n    const { account, chainId } = useEthers()\n    const tokenFarmContractAddress = (\n        chainId ?\n            (((String(chainId) == '42') || (String(chainId) == '97')) ?\n                networkMapping[String(chainId)][\"TokenFarm\"][0] :\n                constants.AddressZero) :\n            constants.AddressZero)\n    const dappTokenAddress = (\n        chainId ?\n            (((String(chainId) == '42') || (String(chainId) == '97')) ?\n                networkMapping[String(chainId)][\"DappToken\"][0] :\n                constants.AddressZero) :\n            constants.AddressZero)\n\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [getStakingLevel] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getStakingLevel\",\n        args: [account, dappTokenAddress]\n    }) ?? []\n\n    return { getStakingLevel }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Projects.tsx",["372","373","374","375"],[],"import * as React from \"react\";\nimport { styled } from \"@mui/material/styles\";\nimport Box from \"@mui/material/Box\";\nimport Paper from \"@mui/material/Paper\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from '@mui/material/Typography';\nimport { GridTotalStaking } from \"./yourWallet/GridTotalStaking\";\nimport { useContext } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"./Header2\";\n\nimport { GridStakingUnstaking } from \"./yourWallet/GridStakingUnstaking\";\nimport { Outlet } from \"react-router-dom\";\n\n\nconst Item = styled('div')(({ theme }) => ({\n    // backgroundColor: theme.palette.mode === \"dark\" ? \"#1A2027\" : \"#fff\",\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    backgroundColor: theme.palette.background.paper,\n\n    textAlign: \"center\",\n    // color: theme.palette.text.secondary\n}));\n\nexport const Projects = () => {\n    const { dappTokenAddress } = useContext(MyContext)\n\n    return (\n        <>\n            <Outlet />\n            <div>\n                <h1 className=\"section-heading\"> Projects!</h1>\n                <GridTotalStaking tokenAddress={dappTokenAddress} />\n                {/* <GridStakingUnstaking tokenAddress={dappTokenAddress} /> */}\n            </div>\n\n            <Box className=\"projects\" sx={{ mt: 5, mb: 5 }}>\n                <Grid\n                    container\n                    direction=\"column\"\n                    // justifyContent=\"center\"\n                    alignItems=\"center\"\n                    spacing={3}\n                >\n                    <Grid item xs>\n                        <h1>PROJECTS OPEN NOW</h1>\n                    </Grid>\n                    <Grid item md >\n                        <h3>No Project Currently Open.</h3>\n                    </Grid>\n                    <Grid item xs={6}>\n                        {/* <Item>xs=6</Item> */}\n                        <h1>PROJECTS COMING SOON</h1>\n                    </Grid>\n                    <Grid item md >\n                        <h3>Get ready for the exciting projects...</h3>\n                    </Grid>\n                </Grid>\n            </Box>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/PreSale.tsx",["376","377","378","379","380","381","382","383","384"],[],"import { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { Token } from \"./Main\"\nimport Box from '@mui/material/Box';\nimport { Grid } from \"@material-ui/core\";\nimport React, { useState, createContext, useContext, useEffect } from \"react\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { tokenToString } from \"typescript\";\nimport { Tab, Typography } from \"@material-ui/core\"\nimport { WalletBalance } from \"./yourWallet/WalletBalance\";\nimport { UnStakeForm } from \"./yourWallet/UnStakeForm\"\nimport { PreSaleForm } from \"./yourWallet/PreSaleForm\";\nimport { makeStyles } from \"@material-ui/core\"\n// import { GridPurchasedPreSaleBalance } from \"./yourWallet/GridPurchasedPreSaleBalance\"\nimport { CompleteGridPurchasedPreSaleBalance } from \"./yourWallet/CompleteGridPurchasedPreSaleBalance\"\n\nimport { CheckpointsPreSale } from \"./CheckpointsPreSale\"\nimport { findByLabelText } from \"@testing-library/react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"./Header2\";\n\n\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(2)\n    },\n    box: {\n        backgroundColor: \"white\",\n        borderRadius: \"25px\",\n        opacity: \"0.9\",\n    },\n    header: {\n        color: \"White\",\n        textAlign: \"center\",\n        fontSize: \"2em\",\n        textTransform: \"uppercase\",\n        // overflowWrap: \"break-word\",\n        lineHeight: \"4rem\"\n\n\n    },\n    span: {\n        backgroundColor: \"black\",\n        opacity: \"0.5\",\n        borderRadius: \"25px\",\n        padding: '.5em',\n        overflowWrap: \"break-word\",\n\n    },\n    spanparticipation: {\n        backgroundColor: \"black\",\n        opacity: \"0.5\",\n        borderRadius: \"25px\",\n        padding: '.5em',\n        overflow: \"hidden\",\n    }\n}))\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\n\nexport const PreSale = ({ supportedTokens }: YourWalletProps) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress: dapp_token_address } = data\n\n    console.log(\"You are in PreSale Context: chainIdentity \" + chainIdentity + \" tokenFarmL \" + tokenFarmContractAddress)\n    const { account } = useEthers()\n\n    const connectedToMetaMask = account !== undefined\n\n    const busdTokenAddress = '0x4Fabb145d64652a948d72533023f6E7A623C7C53'\n\n    const busdTokenBalance = useTokenBalance(busdTokenAddress, account)\n    const formattedBusdTokenBalance: number = busdTokenBalance ? parseFloat(formatUnits(busdTokenBalance, 18)) : 0\n\n    let ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n    const dappTokenAddress = supportedTokens[0].address\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n    const classes = useStyles()\n    return (\n        <>\n            <div>\n                <h1 className=\"section-heading\">Pre-Sale! is Now Open</h1>\n            </div>\n            <Box>\n                <CompleteGridPurchasedPreSaleBalance tokenAddress={dappTokenAddress} />\n\n                <CheckpointsPreSale />\n\n                {/* <h2 className={classes.header}><span className={classes.spanparticipation}>Participation...</span></h2> */}\n                <h1 className=\"section-heading\"> Participate...</h1>\n                {(connectedToMetaMask && (formattedEthBalance > 0)\n                    && (formattedBusdTokenBalance == 0)) ? (\n                    <Box className={classes.box}>\n\n                        <TabContext value={selectedTokenIndex.toString()} >\n\n                            <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                                {supportedTokens.map((token, index) => {\n\n                                    return (\n                                        <Tab label={token.name}\n                                            value={index.toString()}\n                                            key={index}>\n\n                                        </Tab>\n                                    )\n                                })}\n                            </TabList>\n\n                            {supportedTokens.map((token, index) => {\n                                return (\n                                    <TabPanel value={index.toString()} key={index}>\n                                        <div className={classes.tabContent}>\n                                            <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                            {/* <UnStakeForm token={supportedTokens[selectedTokenIndex]} /> */}\n                                            <PreSaleForm token={supportedTokens[selectedTokenIndex]} />\n                                        </div>\n                                    </TabPanel>\n                                )\n                            })}\n\n                        </TabContext>\n                    </Box>\n                ) : (\n                    <Box className=\"participationDirection\" alignItems=\"center\"\n                        justifyContent=\"center\"\n                        display=\"flex\" >\n                        <div>\n                            <h3>Once met the checkpoints pre-sale will display here...</h3>\n                        </div>\n\n                    </Box>)\n                }\n\n            </Box>\n        </>\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/Project.tsx",["385","386","387","388","389","390","391","392"],[],"// import React from 'react'\nimport { Token } from \"./Main\"\nimport { useParams } from \"react-router-dom\"\nimport { CheckpointsEachPreSale } from \"./CheckpointsEachPreSale\"\nimport { GridEachPreSalePurchasedBalance } from \"./GridBoxes/GridEachPreSalePurchasedBalance\"\nimport { Box } from \"@mui/material\"\nimport { Tab, Typography } from \"@material-ui/core\"\nimport { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport React, { useState, createContext, useContext } from \"react\"\nimport { ParticipateButton } from \"./project/ParticipateButton\"\nimport { ParticipateTab } from \"./project/ParticipateTab\"\nimport { useGetValues } from '../hooks/useGetValues'\nimport { AllocatedAmountToParticipate } from \"./project/AllocatedAmountToParticipate\"\nimport { MyContext } from \"./Header2\"\nimport { useGetStakingLevel } from \"../hooks/useGetStakingLevel\";\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\n\nexport const Project = ({ supportedTokens }: YourWalletProps) => {\n    // const { formattedDappTokenBalance } = useContext(MyContext)\n    let params = useParams()\n    const { account } = useEthers()\n    const connectedToMetaMask = account !== undefined\n\n\n    const preSaleNumber = params.id ? params.id : ''\n\n    const busdTokenAddress = '0x4Fabb145d64652a948d72533023f6E7A623C7C53'\n\n    const busdTokenBalance = useTokenBalance(busdTokenAddress, account)\n    const formattedBusdTokenBalance: number = busdTokenBalance ? parseFloat(formatUnits(busdTokenBalance, 18)) : 0\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    const dappTokenAddress = supportedTokens[0].address\n    console.log(\"This is in Project: \" + account + \" \" + formattedEthBalance)\n    const { participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus } = useGetValues(dappTokenAddress, preSaleNumber)\n\n    console.log(\"this is participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus: \" + participateInPreSaleAllocationStatus + preSaleAllocationStatus + preSaleFundEachPreSaleNumberStatus + preSaleFundFCFSEachPreSaleNumberStatus + preSaleFundEachPreSaleNumberWithoutStakingStatus + claimTokensEachPreSaleStatus)\n\n    const { getStakingLevel } = useGetStakingLevel()\n    const fStakingLevel: number = getStakingLevel ? parseFloat(getStakingLevel) : 0\n\n    return (\n        <>\n            {/* <div>\n                <h1 className=\"section-heading\">Pre-Sale! is Now Open</h1>\n            </div> */}\n            <div>\n                <GridEachPreSalePurchasedBalance preSaleNumber={preSaleNumber} />\n                {/* <CheckpointsPreSale /> */}\n                {/* <h1 className=\"section-heading\"> Participate...</h1> */}\n            </div>\n            <div>\n                {claimTokensEachPreSaleStatus ?\n                    (\n                        <>\n                            <h1 className=\"section-heading\">Pre-Sale! Has Now Been Finished!</h1>\n\n                            {/* <GridEachPreSalePurchasedBalance preSaleNumber={preSaleNumber} /> */}\n                        </>) : (\n                        <>\n                            <div>\n                                <h1 className=\"section-heading\">Pre-Sale! is Now Open</h1>\n                            </div>\n                            <CheckpointsEachPreSale />\n                            <h1 className=\"section-heading\"> Participate...</h1>\n                            <div>\n                                {(connectedToMetaMask && (formattedEthBalance > 0)\n                                    && (formattedBusdTokenBalance == 0) && (getStakingLevel > 0)) ? (\n                                    <>\n                                        {participateInPreSaleAllocationStatus ? <ParticipateButton preSaleNumber={preSaleNumber} /> : <></>}\n\n                                        {preSaleAllocationStatus ? <AllocatedAmountToParticipate supportedTokens={supportedTokens} preSaleNumber={preSaleNumber} /> : <></>}\n\n                                        {(preSaleFundEachPreSaleNumberStatus ||\n                                            preSaleFundFCFSEachPreSaleNumberStatus ||\n                                            preSaleFundEachPreSaleNumberWithoutStakingStatus) ?\n                                            (\n                                                <>\n                                                    {preSaleFundEachPreSaleNumberStatus ? (<>\n                                                        <div className=\"info-note\">\n                                                            <h1>Phase: 2</h1>\n                                                            <h3>You can purchase Pre-Sale Tokens according to the $BUSD Limit Allocated to You.</h3>\n                                                        </div>\n\n                                                    </>) : (<></>)}\n                                                    {preSaleFundFCFSEachPreSaleNumberStatus ? (<>\n                                                        <div className=\"info-note\">\n                                                            <h1>Phase: 3</h1>\n                                                            <h2>First Come First Serve</h2>\n                                                            <h4>There is no $BUSD Limit.</h4>\n                                                            <h4>If tokens have been left in the phase-2. </h4>\n                                                            <h4>In this round, You can buy as many tokens as you want up until the total pre-sale target met.</h4>\n                                                        </div>\n\n                                                    </>) : (<></>)}\n                                                    <ParticipateTab supportedTokens={supportedTokens} preSaleNumber={preSaleNumber} />\n                                                </>\n                                            ) : <></>}\n\n                                        {claimTokensEachPreSaleStatus ? <><h1>Tokens are now Available to claim</h1></> : <></>}\n                                    </>\n\n                                ) : (\n                                    <Box className=\"participationDirection\" alignItems=\"center\"\n                                        justifyContent=\"center\"\n                                        display=\"flex\" >\n                                        <div>\n                                            <h3>Once met the checkpoints pre-sale will display here...</h3>\n                                        </div>\n\n                                    </Box>)\n                                }\n                            </div>\n                        </>)}\n\n            </div>\n\n\n        </>\n    )\n}\n","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridWethBusdBalance.tsx",["393","394","395","396"],[],"import { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\n// import { useStakingBalance } from \"../../hooks/useStakingBalance\"\n// import { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { makeStyles } from \"@material-ui/core\"\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { Typography } from \"@mui/material\"\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n        overflowWrap: \"break-word\",\n    },\n    h3: {\n        margin: 5,\n        fontSize: 20,\n        overflow: \"hidden\",\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    }\n}))\n\n\ninterface BalanceMsgProps {\n    tokenAddress: string\n}\n\n\nexport const GridWethBusdBalance = ({ tokenAddress }: BalanceMsgProps) => {\n\n    const dAppTokenAddress = tokenAddress\n    const classes = useStyles()\n    const { account } = useEthers()\n    const busdTokenAddress = '0x4Fabb145d64652a948d72533023f6E7A623C7C53'\n\n    const busdTokenBalance = useTokenBalance(busdTokenAddress, account)\n    const formattedBusdTokenBalance: number = busdTokenBalance ? parseFloat(formatUnits(busdTokenBalance, 18)) : 0\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    console.log(\"you are here\")\n    console.log((window as any).ethereum)\n    console.log(\"here\")\n\n\n    return (\n        <Box >\n            <Box sx={{ flexGrow: 1, mb: 6 }}>\n                <Grid container spacing={2} marginTop={1} >\n                    <Grid item xs={6} md={6}>\n                        <Item sx={{ backgroundColor: '#6b6e70' }}>\n                            <h2>WETH</h2>\n                        </Item>\n                        <Item>\n                            <h3> {formattedEthBalance}</h3>\n                        </Item>\n                    </Grid>\n                    <Grid item xs={6} md={6}>\n                        <Item sx={{ backgroundColor: '#6b6e70' }}>\n                            <h2>BUSD</h2>\n                        </Item>\n                        <Item>\n                            <h3> {formattedBusdTokenBalance}</h3>\n                        </Item>\n                    </Grid>\n\n                </Grid>\n\n            </Box>\n        </Box >\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/UnStakeYourWallet.tsx",["397","398","399","400"],[],"import { Token } from \"../Main\"\nimport Box from '@mui/material/Box';\nimport React, { useState } from \"react\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { tokenToString } from \"typescript\";\nimport { Button, Tab } from \"@material-ui/core\"\nimport { WalletBalance } from \"./WalletBalance\";\nimport { UnStakeForm } from \"./UnStakeForm\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { CheckpointsPreSale } from \"../CheckpointsPreSale\";\nimport { useEthers } from \"@usedapp/core\";\n\nimport { GridTotalStaking } from \"./GridTotalStaking\";\nimport { useContext } from \"react\";\n// import { MyContext } from \"../../App\";\nimport { MyContext } from \"../Header2\";\n\nimport { GridStakingUnstaking } from \"./GridStakingUnstaking\";\nimport { GridClaimRewards } from \"./GridClaimRewards\"\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(4)\n    },\n    box: {\n        backgroundColor: \"white\",\n        borderRadius: \"25px\",\n        opacity: \"0.95\",\n    },\n    header: {\n        color: \"white\"\n    }\n}))\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\n\nexport const UnStakeYourWallet = ({ supportedTokens }: YourWalletProps) => {\n    const { dappTokenAddress } = useContext(MyContext)\n\n    const { account } = useEthers()\n    const isConnected = account !== undefined\n\n\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n\n    const [number, setNumber] = useState<number>(0)\n\n    const changeNumber = () => {\n        setNumber(number + 1)\n    }\n\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n    const classes = useStyles()\n    return (\n        <>\n            <div>\n                <h1 className=\"section-heading\">UnStake! Tokens</h1>\n                <GridTotalStaking tokenAddress={dappTokenAddress} />\n                <GridStakingUnstaking tokenAddress={dappTokenAddress} />\n                <GridClaimRewards tokenAddress={dappTokenAddress} />\n            </div>\n            {(isConnected) ?\n                (\n                    <Box sx={{ mt: 4 }}>\n                        {/* {(number < 25) ? (<Button onClick={(() => setNumber(number + 2))}>Less {number}</Button>) : (number >= 25 && number <= 30)\n                ? (<Button onClick={changeNumber}>greater {number}</Button>) : (<Button onClick={changeNumber}>greatest {number}</Button>)}\n            <Button onClick={changeNumber}>Click Here {number}</Button> */}\n                        {/* <CheckpointsPreSale /> */}\n\n                        <Box className={classes.box}>\n                            <TabContext value={selectedTokenIndex.toString()} >\n                                <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                                    {supportedTokens.map((token, index) => {\n\n                                        return (\n                                            <Tab label={token.name}\n                                                value={index.toString()}\n                                                key={index}>\n\n                                            </Tab>\n                                        )\n                                    })}\n                                </TabList>\n                                {supportedTokens.map((token, index) => {\n                                    return (\n                                        <TabPanel value={index.toString()} key={index}>\n                                            <div className={classes.tabContent}>\n                                                <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                                <UnStakeForm token={supportedTokens[selectedTokenIndex]} />\n                                            </div>\n                                        </TabPanel>\n                                    )\n                                })}\n\n                            </TabContext>\n                        </Box>\n                    </Box>\n                ) : (\n                    <h1 className=\"section-heading\"> Connect to Wallet...</h1>\n                )}\n        </>\n\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/index.ts",[],[],"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/CheckpointsPreSale.tsx",["401","402","403","404","405","406","407","408","409","410","411","412","413","414","415"],[],"import { Box, Grid, Typography, Checkbox } from \"@mui/material\"\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport { makeStyles } from \"@material-ui/core\"\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport Avatar from '@mui/material/Avatar';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport PriceCheckIcon from '@mui/icons-material/PriceCheck';\nimport LocalPoliceIcon from '@mui/icons-material/LocalPolice';\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { deepOrange, green } from '@mui/material/colors';\nimport { ProgressBar } from \"./ProgressBar\";\nimport { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { useEffect, useState } from \"react\";\nimport { useGetStakingLevel } from \"../hooks/useGetStakingLevel\";\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        // display: \"inline-grid\",\n        // gridTemplateColumns: \"auto auto auto\",\n        // gap: theme.spacing(1),\n        alignItems: \"stretch\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    },\n\n}))\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    alignItems: 'stretch',\n    margin: 0,\n    // borderRadius: 20,\n    // justifyContent: 'left',\n    // display: \"flex\",\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n    },\n    h3: {\n        margin: 10,\n        fontSize: 15,\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst Item2 = styled(Paper)(({ theme }) => ({\n    // backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\n    paddingTop: theme.spacing(1),\n    textAlign: 'center',\n    opacity: '.5',\n    justifyContent: 'center',\n    display: 'flex',\n    // color: theme.palette.text.secondary,\n}));\n\ninterface CheckpointProps {\n    connectedToMetaMask: boolean\n    ethBalance: number\n    busdBalance: number\n}\n\nexport const CheckpointsPreSale = () => {\n    console.log(\"CheckpointsPreSale\")\n    const classes = useStyles()\n    // console.log(connectedToMetaMask)\n    const { account } = useEthers()\n\n    const connectedToMetaMask = account !== undefined\n\n    const busdTokenAddress = '0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06'\n\n    const busdTokenBalance = useTokenBalance(busdTokenAddress, account)\n    const formattedBusdTokenBalance: number = busdTokenBalance ? parseFloat(formatUnits(busdTokenBalance, 18)) : 0\n    const busdAvailable = (formattedBusdTokenBalance > 0) ? true : false\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    const ethAvailable = (formattedEthBalance > 0) ? true : false\n    const [checkpoints, setCheckpoints] = useState(false)\n\n    const { getStakingLevel } = useGetStakingLevel()\n    const fStakingLevel: number = getStakingLevel ? parseFloat(getStakingLevel) : 0\n\n    useEffect(() => {\n        if (connectedToMetaMask && ethAvailable) {\n            setCheckpoints(true)\n        }\n    }, [connectedToMetaMask, ethAvailable, busdAvailable])\n\n    return (\n        <>\n            <Box sx={{ flexGrow: 1 }}>\n                {/* <Grid\n                    container\n                    direction=\"column\"\n                    // justifyContent=\"center\"\n                    alignItems=\"center\"\n\n                > */}\n\n                <div className=\"checkpointsHead\"\n                >\n                    <div>\n                        <h1>Checkpoints...</h1>\n\n                        <h3>The following conditions must be met to proceed:</h3>\n\n                    </div>\n                </div>\n                {/* </Box></Grid> */}\n            </Box>\n\n            <Grid container spacing={2}\n                justifyContent=\"center\"\n                alignItems='stretch'\n            >\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={4}\n                    sx={{ display: { xs: 'block', sm: 'block' }, }}\n                >\n\n                    {connectedToMetaMask ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>Wallet Connected!</h2>\n                                <CheckBoxIcon color=\"success\" />\n                            </Item>\n                            <Item >\n                                <h3>\n                                    If not connected, click the \"Connect Wallet\" button in the top right corner\n                                </h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2>Please connect with MetaMask!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n\n                                <h3>\n                                    Click the \"Connect Wallet\" button in the top right corner\n                                </h3>\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={4}\n                    sx={{ display: { xs: 'block', sm: 'block' }, }}\n                >\n                    {formattedEthBalance ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>BNB Available!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n\n                                <h3>Your Bnb Balance: <span>{formattedEthBalance}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>Require BNB Tokens!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n                                <h3>BNB Balance: <span>{formattedEthBalance}</span></h3>\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={4}>\n                    {formattedBusdTokenBalance ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2> BUSD Available!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n                                <h3>Your BUSD Balance: <span>{formattedBusdTokenBalance}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2> Require BUSD Tokens!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n\n                                <h3>Your BUSD Balance: <span>{formattedBusdTokenBalance}</span></h3>\n\n                            </Item>\n                        </>)}\n                </Grid>\n            </Grid>\n\n            <Box sx={{ flexGrow: 1, marginTop: 2 }}>\n                <ProgressBar checkpoints={checkpoints} />\n            </Box>\n        </>)\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useGetValues.tsx",["416","417","418","419","420","421","422","423"],[],"import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useGetValues = (tokenAddress: string, preSaleNumber: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress } = data\n    console.log(\"this is in useGetValues: \" + tokenAddress + \" \" + preSaleNumber)\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [availableToClaim] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAvailablePreSaleTokensToWithdrawEachPreSale\",\n        args: [tokenAddress, account, preSaleNumber]\n    }) ?? []\n\n    const [totalClaimed] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalWithdrawnPreSaleTokensEachPreSale\",\n        args: [preSaleNumber, account]\n    }) ?? []\n\n    const [participateInPreSaleAllocationStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"participateInPreSaleAllocationStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleAllocationStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleAllocationStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleFundEachPreSaleNumberStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleFundEachPreSaleNumberStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleFundFCFSEachPreSaleNumberStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleFundFCFSEachPreSaleNumberStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [preSaleFundEachPreSaleNumberWithoutStakingStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"preSaleFundEachPreSaleNumberWithoutStakingStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [claimTokensEachPreSaleStatus] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"claimTokensEachPreSaleStatus\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [timesEachPreSale] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"TIMESeachPreSale\",\n        args: [preSaleNumber]\n    }) ?? []\n\n    const [times] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"TIMES\",\n        args: []\n    }) ?? []\n\n\n    return {\n        availableToClaim, totalClaimed,\n        participateInPreSaleAllocationStatus, preSaleAllocationStatus,\n        preSaleFundEachPreSaleNumberStatus,\n        preSaleFundFCFSEachPreSaleNumberStatus,\n        preSaleFundEachPreSaleNumberWithoutStakingStatus,\n        claimTokensEachPreSaleStatus, timesEachPreSale,\n        times\n    }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/WalletBalance.tsx",["424","425"],[],"import { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { BalanceMsg } from \"../../components/BalanceMsg\"\nimport { useContext } from \"react\"\nimport { MyContext } from \"../Header2\"\n\nexport interface WalletBalanceProps {\n    token: Token\n}\n\nexport const WalletBalance = ({ token }: WalletBalanceProps) => {\n    const { image, address, name } = token\n    const { account } = useEthers()\n    const { formattedDappTokenBalance } = useContext(MyContext)\n\n    const ethBalance = useEtherBalance(account)\n    // useTokenBalance(address, account)\n    // console.log(tokenBalance?.toString())\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n    const tokenBalance = useTokenBalance(address, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    console.log(\"This is in WalletBalance.tsx: \" + formattedDappTokenBalance)\n\n    return ((name == \"WETH\") ?\n        (<BalanceMsg label={`Your ${name} balance:`} tokenImgSrc={image} amount={formattedEthBalance} />)\n        : (<BalanceMsg label={`Your ${name} balance:`} tokenImgSrc={image} amount={formattedDappTokenBalance} />))\n\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/CheckpointsEachPreSale.tsx",["426","427","428","429","430","431","432","433","434","435","436","437","438","439"],[],"import { Box, Grid, Typography, Checkbox } from \"@mui/material\"\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport { makeStyles } from \"@material-ui/core\"\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport Avatar from '@mui/material/Avatar';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport PriceCheckIcon from '@mui/icons-material/PriceCheck';\nimport LocalPoliceIcon from '@mui/icons-material/LocalPolice';\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { deepOrange, green } from '@mui/material/colors';\nimport { ProgressBar } from \"./ProgressBar\";\nimport { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { useEffect, useState } from \"react\";\nimport { useGetStakingLevel } from \"../hooks/useGetStakingLevel\";\n\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        // display: \"inline-grid\",\n        // gridTemplateColumns: \"auto auto auto\",\n        // gap: theme.spacing(1),\n        alignItems: \"stretch\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    },\n\n}))\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    alignItems: 'stretch',\n    margin: 0,\n    // borderRadius: 20,\n    // justifyContent: 'left',\n    // display: \"flex\",\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n    },\n    h3: {\n        margin: 10,\n        fontSize: 15,\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst Item2 = styled(Paper)(({ theme }) => ({\n    // backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\n    paddingTop: theme.spacing(1),\n    textAlign: 'center',\n    opacity: '.5',\n    justifyContent: 'center',\n    display: 'flex',\n    // color: theme.palette.text.secondary,\n}));\n\ninterface CheckpointProps {\n    connectedToMetaMask: boolean\n    ethBalance: number\n    busdBalance: number\n}\n\nexport const CheckpointsEachPreSale = () => {\n    console.log(\"CheckpointsPreSale\")\n    const classes = useStyles()\n    // console.log(connectedToMetaMask)\n    const { account } = useEthers()\n\n    const connectedToMetaMask = account !== undefined\n\n    const busdTokenAddress = '0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06'\n\n    const busdTokenBalance = useTokenBalance(busdTokenAddress, account)\n    const formattedBusdTokenBalance: number = busdTokenBalance ? parseFloat(formatUnits(busdTokenBalance, 18)) : 0\n    const busdAvailable = (formattedBusdTokenBalance > 0) ? true : false\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    const ethAvailable = (formattedEthBalance > 0) ? true : false\n    const [checkpoints, setCheckpoints] = useState(false)\n\n    const { getStakingLevel } = useGetStakingLevel()\n    const fStakingLevel: number = getStakingLevel ? parseFloat(getStakingLevel) : 0\n\n    useEffect(() => {\n        if (connectedToMetaMask && ethAvailable) {\n            setCheckpoints(true)\n        }\n    }, [connectedToMetaMask, ethAvailable, busdAvailable])\n\n    return (\n        <>\n            <Box sx={{ flexGrow: 1 }}>\n                {/* <Grid\n                    container\n                    direction=\"column\"\n                    // justifyContent=\"center\"\n                    alignItems=\"center\"\n\n                > */}\n\n                <div className=\"checkpointsHead\"\n                >\n                    <div>\n                        <h1>Checkpoints...</h1>\n\n                        <h3>The following conditions must be met to proceed:</h3>\n\n                    </div>\n                </div>\n                {/* </Box></Grid> */}\n            </Box>\n\n            <Grid container spacing={2}\n                justifyContent=\"center\"\n                alignItems='stretch'\n            >\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={6}\n                    sx={{ display: { xs: 'block', sm: 'block' }, }}\n                >\n\n                    {connectedToMetaMask ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>Wallet Connected!</h2>\n                                <CheckBoxIcon color=\"success\" />\n                            </Item>\n                            <Item >\n                                <h3>\n                                    If not connected, click the \"Connect Wallet\" button in the top right corner\n                                </h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2>Please connect with MetaMask!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n\n                                <h3>\n                                    Click the \"Connect Wallet\" button in the top right corner\n                                </h3>\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={6}\n                    sx={{ display: { xs: 'block', sm: 'block' }, }}\n                >\n                    {formattedEthBalance ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>BNB Available!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n\n                                <h3>Your Bnb Balance: <span>{formattedEthBalance}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>Require BNB Tokens!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n                                <h3>BNB Balance: <span>{formattedEthBalance}</span></h3>\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={6}>\n                    {formattedBusdTokenBalance ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2> BUSD Available!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n                                <h3>Your BUSD Balance: <span>{formattedBusdTokenBalance}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2> Require BUSD Tokens!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n\n                                <h3>Your BUSD Balance: <span>{formattedBusdTokenBalance}</span></h3>\n\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={6}>\n                    {fStakingLevel ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2> Staking Level!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n                                <h3>Your Staking Level: <span>{fStakingLevel}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2> Require Staking Level!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n\n                                <h3>Your Staking Level: <span>{fStakingLevel}</span></h3>\n\n                            </Item>\n                        </>)}\n                </Grid>\n            </Grid>\n\n            <Box sx={{ flexGrow: 1, marginTop: 2 }}>\n                <ProgressBar checkpoints={checkpoints} />\n            </Box>\n        </>)\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/CompleteGridPurchasedPreSaleBalance.tsx",["440","441","442","443","444","445","446","447"],[],"import { useEthers, useTokenBalance, useEtherBalance, useNotifications } from \"@usedapp/core\"\nimport { usePurchasedBalance } from \"../../hooks/usePurchasedBalance\"\nimport { useAvailableToClaim } from \"../../hooks/useAvailableToClaim\"\nimport { useClaimPreSaleTokens } from \"../../hooks/useClaimPreSaleTokens\"\n// import { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { Button, makeStyles, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { Typography } from \"@mui/material\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useState, useEffect } from \"react\"\nimport { ftruncate } from \"fs\"\nimport { useGetStakingLevel } from \"../../hooks/useGetStakingLevel\"\n\n// import { ThemeProvider } from '@material-ui/core/styles';\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n        overflowWrap: \"break-word\",\n    },\n    h3: {\n        margin: 5,\n        fontSize: 20,\n        overflow: \"hidden\",\n\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    }\n}))\n\n\ninterface BalanceMsgProps {\n    tokenAddress: string\n}\n\n\nexport const CompleteGridPurchasedPreSaleBalance = ({ tokenAddress }: BalanceMsgProps) => {\n\n    const dAppTokenAddress = tokenAddress\n    const classes = useStyles()\n    const { account } = useEthers()\n\n    const { send: claimTokens, state: claimPreSaleTokensState } = useClaimPreSaleTokens()\n\n    const purchasedTokenBalance = usePurchasedBalance(tokenAddress)\n    const FPurchasedTokenBalance: number = purchasedTokenBalance ? parseFloat(formatUnits(purchasedTokenBalance, 18)) : 0\n\n    const { availableToClaim, totalClaimed } = useAvailableToClaim(tokenAddress)\n    const fAvailableToClaim: number = availableToClaim ? parseFloat(formatUnits(availableToClaim, 18)) : 0\n    const fTotalClaimed: number = totalClaimed ? parseFloat(formatUnits(totalClaimed, 18)) : 0\n    console.log(\"totalClaimed: \" + fTotalClaimed)\n\n    const handleClaimTokens = () => { return claimTokens() }\n\n    const isClaiming = claimPreSaleTokensState.status === \"Mining\"\n    const [showClaimingSuccess, setClaimingSuccess] = useState(false)\n    const { notifications } = useNotifications()\n\n    const { getStakingLevel } = useGetStakingLevel()\n    const fStakingLevel: number = getStakingLevel ? parseFloat(getStakingLevel) : 0\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Claiming Pre Sale Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Claimed!\")\n            setClaimingSuccess(true)\n        }\n    }, [notifications, claimPreSaleTokensState])\n\n    const handleCloseSnack = () => {\n        setClaimingSuccess(false)\n    }\n\n    return (\n        <>\n            <Box >\n                <Box sx={{ flexGrow: 1 }}>\n                    <Grid container spacing={2} marginTop={1}>\n                        <Grid item xs={12} md={12}>\n                            <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                <h2>Total Tokens Purchased</h2>\n                            </Item>\n                            <Item>\n                                <h3>\n                                    {FPurchasedTokenBalance}\n                                </h3>\n                            </Item>\n                        </Grid>\n                        <div >\n\n                        </div>\n\n                        <Grid item xs={12} md={12}>\n                            <h1 className=\"section-heading\"> Claim Pre-Sale Tokens...</h1>\n\n                            {/* <Item sx={{ backgroundColor: 'black', color: 'white', opacity: '0.5' }}>\n                            <h2>Withdraw Pre Sale Tokens</h2>\n                        </Item> */}\n                            {/* <Item> */}\n\n\n                            <Grid container spacing={1} marginTop={0}>\n\n                                <Grid item xs={12} md={6}>\n                                    <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                        <h2> Available to Claim</h2>\n                                    </Item>\n                                    <Item>\n                                        <h3>{fAvailableToClaim}</h3>\n                                    </Item>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                        <h2> Total Claimed</h2>\n                                    </Item>\n                                    <Item>\n                                        <h3>{fTotalClaimed}</h3>\n                                    </Item>\n                                </Grid>\n                                <Grid item xs={12} md={12}>\n                                    <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                        <Typography variant=\"h6\">\n                                            <button className='btn btn-shadow' onClick={handleClaimTokens}>\n                                                {(isClaiming) ? <CircularProgress size={26} /> : \"Claim Tokens!\"}\n                                            </button>\n                                        </Typography>\n                                    </Item>\n\n                                </Grid>\n                            </Grid>\n                            {/* </Item> */}\n\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box >\n            <Snackbar open={showClaimingSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    PreSale Tokens Claimed!\n                </Alert>\n            </Snackbar>\n        </>\n\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridTotalStaking.tsx",["448","449","450","451","452","453","454"],[],"import { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { useStakingBalance } from \"../../hooks/useStakingBalance\"\n// import { usePurchasedBalance } from \"../../hooks/usePurchasedBalance\"\n// import { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { makeStyles } from \"@material-ui/core\"\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { Typography } from \"@mui/material\"\nimport { ThemeProvider } from '@material-ui/core/styles';\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n        overflowWrap: \"break-word\",\n    },\n    h3: {\n        margin: 5,\n        fontSize: 20,\n        overflow: \"hidden\",\n\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    }\n}))\n\n\ninterface BalanceMsgProps {\n    tokenAddress: string\n}\n\n\nexport const GridTotalStaking = ({ tokenAddress }: BalanceMsgProps) => {\n\n    const dAppTokenAddress = tokenAddress\n    const classes = useStyles()\n    const { account } = useEthers()\n    const { totalNumberOfStakers, totalTokensStaked } = useStakingBalance(tokenAddress)\n    const fTotalNumberOfStakers: number = totalNumberOfStakers ? parseFloat(totalNumberOfStakers) : 0\n    const fTotalTokensStaked: number = totalTokensStaked ? parseFloat(formatUnits(totalTokensStaked, 18)) : 0\n\n\n    return (\n        <Box >\n            <Box sx={{ flexGrow: 1 }}>\n                <Grid container spacing={2} >\n                    <Grid item xs={12}\n                        sx={{ display: { xs: 'block', sm: 'block' }, }}\n                        md={12}>\n                        <Item sx={{ backgroundColor: '#6b6e70' }}>\n                            <h2> Number of Stakers</h2>\n                        </Item>\n                        <Item >\n                            <h3>{fTotalNumberOfStakers}</h3>\n                        </Item>\n                    </Grid>\n                    <Grid item xs={6} md={6}>\n                        <Item sx={{ backgroundColor: '#6b6e70' }}>\n                            <h2>Total $Moon Staked</h2>\n                        </Item>\n                        <Item>\n                            <h3>{fTotalTokensStaked}</h3>\n                        </Item>\n                    </Grid>\n                    <Grid item xs={6} md={6}>\n                        <Item sx={{ backgroundColor: '#6b6e70' }}>\n                            <h2>APY</h2>\n                        </Item>\n                        <Item>\n                            {/* 15% */}\n                            <h3 >\n                                10%\n                            </h3>\n                        </Item>\n                    </Grid>\n                </Grid>\n\n            </Box>\n        </Box >\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridStakingUnstaking.tsx",["455","456","457","458","459","460","461","462","463","464","465","466","467","468"],[],"import { useEthers, useTokenBalance, useEtherBalance, useNotifications } from \"@usedapp/core\"\nimport { useStakingBalance } from \"../../hooks/useStakingBalance\"\nimport { useStakingRewards } from \"../../hooks/useStakingRewards\"\nimport { useClaimStakingRewards } from \"../../hooks/useClaimStakingRewards\"\n\n// import { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { Button, makeStyles, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { Typography } from \"@mui/material\"\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { useState, useEffect } from \"react\"\nimport { Routes, Route } from \"react-router-dom\"\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n        overflowWrap: \"break-word\",\n    },\n    h3: {\n        margin: 5,\n        fontSize: 20,\n        overflow: \"hidden\",\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    }\n}))\n\n\ninterface BalanceMsgProps {\n    tokenAddress: string\n    // eNumber: number\n}\n\n\nexport const GridStakingUnstaking = ({ tokenAddress }: BalanceMsgProps) => {\n\n    const dAppTokenAddress = tokenAddress\n    const classes = useStyles()\n    const { account } = useEthers()\n    const { notifications } = useNotifications()\n\n\n    const unStakedTokenBalance = useTokenBalance(dAppTokenAddress, account)\n    const formattedUnStakedTokenBalance: number = unStakedTokenBalance ? parseFloat(formatUnits(unStakedTokenBalance, 18)) : 0\n\n    const { stakingBalance } = useStakingBalance(tokenAddress)\n    const FstakedTokenBalance: number = stakingBalance ? parseFloat(formatUnits(stakingBalance, 18)) : 0\n\n    const stakingRewards = useStakingRewards(tokenAddress)\n    const FstakingRewards: number = stakingRewards ? parseFloat(formatUnits(stakingRewards, 18)) : 0\n\n\n    return (\n        <>\n            <Box >\n                <Box sx={{ flexGrow: 1 }}>\n                    <Grid container spacing={2} marginTop={1}>\n                        <Grid item xs={12} md={12}>\n                            <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                <h2>Token Account Balance</h2>\n                            </Item>\n                            <Item>\n                                <h3> {formattedUnStakedTokenBalance}</h3>\n                            </Item>\n                        </Grid>\n                        <Grid item xs={6} md={6}>\n                            <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                <h2>Staked</h2>\n                            </Item>\n                            <Item>\n                                <h3>{FstakedTokenBalance}</h3>\n                            </Item>\n                        </Grid>\n\n                        <Grid item xs={6} md={6}>\n                            <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                <h2>Rewards</h2>\n                            </Item>\n                            <Item>\n                                <h3>{FstakingRewards}</h3>\n                            </Item>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box>\n        </>\n\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/project/ParticipateButton.tsx",["469","470"],[],"import React, { useEffect, useState } from 'react'\nimport { useParticipationButton } from '../../hooks/useParticipateButton'\nimport { useNotifications } from \"@usedapp/core\"\nimport { Button, makeStyles, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\n\ninterface Props {\n    preSaleNumber: string\n}\n\nexport const ParticipateButton = ({ preSaleNumber }: Props) => {\n    const { participateInPreSaleAllocationSendFunction, participateInPreSaleAllocationState: participateState } = useParticipationButton()\n\n    const handleParticipationButton = () => {\n        return participateInPreSaleAllocationSendFunction(preSaleNumber)\n    }\n\n\n    const isParticipating = participateState.status === \"Mining\"\n    const [showParticipationSuccess, setParticipationSuccess] = useState(false)\n    const { notifications } = useNotifications()\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Participating in PreSale Allocation\"\n        ).length > 0) {\n            setParticipationSuccess(true)\n        }\n    }, [notifications, participateState])\n\n    const handleCloseSnack = () => {\n        setParticipationSuccess(false)\n    }\n\n    return (\n        <>\n            <div className='participate'>\n                <h1>Phase: 1</h1>\n                <h3>Click the Following Button To Participate in this Pre-Sale.</h3>\n                <h3>And the system will take your entery and You won't be able to unstake your tokens for the next 2 Weeks.</h3>\n                <button onClick={handleParticipationButton} className='btn btn-shadow'>\n                    {(isParticipating) ? <CircularProgress size={26} /> : \"Commit to Participate!\"}\n                </button>\n            </div>\n            <Snackbar open={showParticipationSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Thanks for Commiting to Participate, Now please wait for the Allocation and Pre-Sale Purchase to Open!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/GridClaimRewards.tsx",["471","472","473","474","475","476","477","478","479","480"],[],"import { useEthers, useNotifications } from \"@usedapp/core\"\nimport { useStakingBalance } from \"../../hooks/useStakingBalance\"\nimport { useStakingRewards } from \"../../hooks/useStakingRewards\"\nimport { useClaimStakingRewards } from \"../../hooks/useClaimStakingRewards\"\n\n// import { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { Button, makeStyles, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { Typography } from \"@mui/material\"\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport { useState, useEffect } from \"react\"\nimport { Routes, Route } from \"react-router-dom\"\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n        overflowWrap: \"break-word\",\n    },\n    h3: {\n        margin: 5,\n        fontSize: 20,\n        overflow: \"hidden\",\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\n\ninterface BalanceMsgProps {\n    tokenAddress: string\n    // eNumber: number\n}\n\n\nexport const GridClaimRewards = ({ tokenAddress }: BalanceMsgProps) => {\n\n    const dAppTokenAddress = tokenAddress\n    const { account } = useEthers()\n    const { notifications } = useNotifications()\n\n    const { send: claimStakingRewards, state: stateClaimStakingRewards } = useClaimStakingRewards()\n    const handleClaimStakingRewards = () => { return claimStakingRewards(tokenAddress) }\n\n    const isClaiming = stateClaimStakingRewards.status === \"Mining\"\n    const [showClaimingSuccess, setClaimingSuccess] = useState(false)\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Claiming Staking Rewards\"\n        ).length > 0) {\n            console.log(\"Tokens Claimed!\")\n            setClaimingSuccess(true)\n        }\n    }, [notifications, stateClaimStakingRewards])\n\n    const handleCloseSnack = () => {\n        setClaimingSuccess(false)\n    }\n\n    return (\n        <>\n            <Box >\n                <Box sx={{ flexGrow: 1 }}>\n                    <Grid container spacing={2} marginTop={1}>\n                        <Grid item xs={12} md={12}>\n                            <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                <Typography variant=\"h6\">\n                                    <button className='btn-unstake btn-shadow' onClick={handleClaimStakingRewards}>\n                                        {(isClaiming) ? <CircularProgress size={26} /> : \"Claim Rewards!\"}\n                                    </button>\n                                </Typography>\n                            </Item>\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box>\n            <Snackbar open={showClaimingSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Rewards Claimed!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/project/ParticipateTab.tsx",["481"],[],"import React, { useState } from 'react'\nimport { Box, Tab, Typography } from '@material-ui/core'\nimport { Token } from \"../Main\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { WalletBalance } from '../yourWallet/WalletBalance'\nimport { PreSaleFormEachPreSale } from '../yourWallet/PreSaleFormEachPreSale'\n\n\ninterface SupportedTokensProps {\n    supportedTokens: Array<Token>\n    preSaleNumber: string\n}\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(2)\n    },\n    box: {\n        backgroundColor: \"white\",\n        borderRadius: \"25px\",\n        opacity: \"0.95\",\n    },\n    header: {\n        color: \"White\",\n        textAlign: \"center\",\n        fontSize: \"2em\",\n        textTransform: \"uppercase\",\n        // overflowWrap: \"break-word\",\n        lineHeight: \"4rem\"\n    },\n    span: {\n        backgroundColor: \"black\",\n        opacity: \"0.5\",\n        borderRadius: \"25px\",\n        padding: '.5em',\n        overflowWrap: \"break-word\",\n\n    },\n    spanparticipation: {\n        backgroundColor: \"black\",\n        opacity: \"0.5\",\n        borderRadius: \"25px\",\n        padding: '.5em',\n        overflow: \"hidden\",\n    }\n}))\n\n\nexport const ParticipateTab = ({ supportedTokens, preSaleNumber }: SupportedTokensProps) => {\n    console.log(\"this is in ParticipateTab: \" + preSaleNumber)\n    const classes = useStyles()\n\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n\n    return (\n        <>\n            <Box className={classes.box}>\n                <TabContext value={selectedTokenIndex.toString()} >\n\n                    <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                        {supportedTokens.map((token, index) => {\n\n                            return (\n                                <Tab label={token.name}\n                                    value={index.toString()}\n                                    key={index}>\n                                </Tab>\n                            )\n                        })}\n                    </TabList>\n\n                    {supportedTokens.map((token, index) => {\n                        return (\n                            <TabPanel value={index.toString()} key={index}>\n                                <div className={classes.tabContent}>\n                                    <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                    {/* <UnStakeForm token={supportedTokens[selectedTokenIndex]} /> */}\n                                    <PreSaleFormEachPreSale token={supportedTokens[selectedTokenIndex]} preSaleNumber={preSaleNumber} />\n                                </div>\n                            </TabPanel>\n                        )\n                    })}\n\n                </TabContext>\n            </Box>\n        </>\n    )\n}\n","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/PreSaleForm.tsx",["482","483","484","485","486","487","488"],[],"import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar, Typography } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { usePreSale } from \"../../hooks/usePreSale\"\nimport { useWithdrawPreSaleBalance } from \"../../hooks/useWithdrawPreSaleBalance\"\nimport { utils } from \"ethers\"\nimport { BalanceMsg } from \"../BalanceMsg\"\nimport { usePurchasedBalance } from \"../../hooks/usePurchasedBalance\"\nimport { AddModerator, MarginRounded } from \"@mui/icons-material\"\nimport TextField from '@mui/material/TextField';\nimport { useGetValues } from \"../../hooks/useGetValues\"\n\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const PreSaleForm = ({ token }: StakeFormProps) => {\n    const { image, address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const { times } = useGetValues(tokenAddress, '0')\n    const fTimes: number = times ? parseFloat(times) : 0\n\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n\n    const { notifications } = useNotifications()\n\n\n    const balance = usePurchasedBalance(tokenAddress)\n    const formattedBalance: number = balance ? parseFloat(formatUnits(balance, 18)) : 0\n\n    var [numbervalue, setnumbervalue] = useState(0);\n\n    console.log('pre')\n    console.log(numbervalue * 2)\n    console.log('sale')\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setnumbervalue(Number(event.target.value))\n        setAmount(newAmount)\n        // console.log(newAmount)\n    }\n\n    const { approveAndPreSale, state: approveAndStakeErc20State } = usePreSale(tokenAddress)\n    const { send: withdrawBalance, state: withdrawBalanceState } = useWithdrawPreSaleBalance()\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        // console.log(amountAsWei)\n        // console.log('bcd')\n        return approveAndPreSale(amountAsWei.toString())\n    }\n\n    const handleWithdrawPreSaleSubmit = () => {\n        return withdrawBalance(tokenAddress)\n    }\n\n    const isWithdrawing = withdrawBalanceState.status === \"Mining\"\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n    }\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n    return (\n        <>\n            <BalanceMsg label={`Your participated ${name} count:`} amount={formattedBalance}\n                tokenImgSrc={image} />\n            <h4> 1 $BUSD = {fTimes} x ${name}</h4>\n\n            <div className=\"form\">\n\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <span >\n                    <button onClick={handleStakeSubmit}\n                        color=\"primary\"\n                        // size=\"large\"\n                        disabled={isMining}\n                        // variant=\"contained\"\n                        className=\"btn\"\n                    >\n                        {isMining ? <CircularProgress size={26} /> : \"Buy!!\"}\n\n                    </button>\n\n                </span>\n                <h3>You will get {numbervalue * fTimes} tokens.</h3>\n\n                <button className=\"btn\" onClick={handleWithdrawPreSaleSubmit}\n\n                    disabled={isMining}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Withdraw!!\"}\n\n                </button>\n            </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Purchased!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/GridBoxes/GridEachPreSalePurchasedBalance.tsx",["489","490","491","492","493"],[],"import { useEthers, useTokenBalance, useEtherBalance, useNotifications } from \"@usedapp/core\"\nimport { usePurchasedBalanceEachPreSale } from \"../../hooks/usePurchasedBalanceEachPreSale\"\nimport { useAvailableToClaimEachPreSale } from \"../../hooks/useAvailableToClaimEachPreSale\"\nimport { useClaimPreSaleTokensEachPreSale } from \"../../hooks/useClaimPreSaleTokensEachPreSale\"\n// import { Token } from \"../Main\"\nimport { formatUnits } from \"@ethersproject/units\"\n\nimport { Button, makeStyles, CircularProgress, Snackbar } from \"@material-ui/core\"\nimport { styled } from '@mui/material/styles';\nimport Box from '@mui/material/Box';\nimport Paper from '@mui/material/Paper';\nimport Grid from '@mui/material/Grid';\nimport { Typography } from \"@mui/material\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport { useState, useEffect, useContext } from \"react\"\nimport { MyContext } from \"../Header2\"\n\n// import { ThemeProvider } from '@material-ui/core/styles';\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n        overflowWrap: \"break-word\",\n    },\n    h3: {\n        margin: 5,\n        fontSize: 20,\n        overflow: \"hidden\",\n\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        display: \"inline-grid\",\n        gridTemplateColumns: \"auto auto auto\",\n        gap: theme.spacing(1),\n        alignItems: \"center\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    }\n}))\n\n\ninterface BalanceMsgProps {\n    // tokenAddress: string\n    preSaleNumber: string\n}\n\n\nexport const GridEachPreSalePurchasedBalance = ({ preSaleNumber }: BalanceMsgProps) => {\n\n    const { dappTokenAddress } = useContext(MyContext)\n    const classes = useStyles()\n    const { account } = useEthers()\n\n    const { claimAllTokensEachPreSaleSendFunction: claimTokens, claimAllTokensEachPreSaleState: claimPreSaleTokensState } = useClaimPreSaleTokensEachPreSale()\n\n    const { totalPurchasedPreSaleTokensEachPreSale } = usePurchasedBalanceEachPreSale(dappTokenAddress, preSaleNumber)\n    const fTotalPurchasedTokenBalance: number = totalPurchasedPreSaleTokensEachPreSale ? parseFloat(formatUnits(totalPurchasedPreSaleTokensEachPreSale, 18)) : 0\n\n    const { availableToClaim, totalClaimed } = useAvailableToClaimEachPreSale(dappTokenAddress, preSaleNumber)\n    const fAvailableToClaim: number = availableToClaim ? parseFloat(formatUnits(availableToClaim, 18)) : 0\n    const fTotalClaimed: number = totalClaimed ? parseFloat(formatUnits(totalClaimed, 18)) : 0\n\n    const handleClaimTokens = () => { return claimTokens(preSaleNumber) }\n\n    const isClaiming = claimPreSaleTokensState.status === \"Mining\"\n    const [showClaimingSuccess, setClaimingSuccess] = useState(false)\n    const { notifications } = useNotifications()\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Claiming Pre Sale Tokens Each PreSale\"\n        ).length > 0) {\n            console.log(\"Tokens Claimed!\")\n            setClaimingSuccess(true)\n        }\n    }, [notifications, claimPreSaleTokensState])\n\n    const handleCloseSnack = () => {\n        setClaimingSuccess(false)\n    }\n\n    return (\n        <>\n            <Box >\n                <Box sx={{ flexGrow: 1 }}>\n                    <Grid container spacing={2} marginTop={1}>\n                        <Grid item xs={12} md={12}>\n                            <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                <h2>Total Tokens Purchased</h2>\n                            </Item>\n                            <Item>\n                                <h3>\n                                    {fTotalPurchasedTokenBalance}\n                                </h3>\n                            </Item>\n                        </Grid>\n                        <div >\n\n                        </div>\n\n                        <Grid item xs={12} md={12}>\n                            <h1 className=\"section-heading\"> Claim Pre-Sale Tokens...</h1>\n\n                            {/* <Item sx={{ backgroundColor: 'black', color: 'white', opacity: '0.5' }}>\n                            <h2>Withdraw Pre Sale Tokens</h2>\n                        </Item> */}\n                            {/* <Item> */}\n\n\n                            <Grid container spacing={1} marginTop={0}>\n\n                                <Grid item xs={12} md={6}>\n                                    <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                        <h2> Available to Claim</h2>\n                                    </Item>\n                                    <Item>\n                                        <h3>{fAvailableToClaim}</h3>\n                                    </Item>\n                                </Grid>\n                                <Grid item xs={12} md={6}>\n                                    <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                        <h2> Total Claimed</h2>\n                                    </Item>\n                                    <Item>\n                                        <h3>{fTotalClaimed}</h3>\n                                    </Item>\n                                </Grid>\n                                <Grid item xs={12} md={12}>\n                                    <Item sx={{ backgroundColor: '#B9B8B8' }}>\n                                        <Typography variant=\"h6\">\n                                            <button className='btn btn-shadow' onClick={handleClaimTokens}>\n                                                {(isClaiming) ? <CircularProgress size={26} /> : \"Claim Tokens!\"}\n                                            </button>\n                                        </Typography>\n                                    </Item>\n\n                                </Grid>\n                            </Grid>\n                            {/* </Item> */}\n\n                        </Grid>\n                    </Grid>\n                </Box>\n            </Box >\n            <Snackbar open={showClaimingSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    PreSale Tokens Claimed!\n                </Alert>\n            </Snackbar>\n        </>\n\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/UnStakeForm.tsx",["494","495","496","497"],[],"import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { useUnStakeAllTokens } from \"../../hooks/useUnStakeAllTokens\"\nimport { useUnStakeTokens } from \"../../hooks/useUnStakeTokens\"\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\"\nimport { useStakingBalance } from \"../../hooks/useStakingBalance\"\nimport { utils } from \"ethers\"\nimport { BalanceMsg } from \"../BalanceMsg\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const UnStakeForm = ({ token }: StakeFormProps) => {\n    const { image, address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const { notifications } = useNotifications()\n    const { stakingBalance } = useStakingBalance(tokenAddress)\n    const formattedBalance: number = stakingBalance ? parseFloat(formatUnits(stakingBalance, 18)) : 0\n\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { send: unstakeAllTokensSend, state: unstakeAllTokensState } = useUnStakeAllTokens()\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n\n    const { unStakeTokens, unStakeState: unstakeTokensState } = useUnStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const handleUnStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return unStakeTokens(amountAsWei.toString())\n    }\n\n    const handleUnStakeAllSubmit = () => {\n        return unstakeAllTokensSend(tokenAddress)\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const isUnStaking = unstakeTokensState.status === \"Mining\"\n    const isUnStakingAll = unstakeAllTokensState.status === \"Mining\"\n    const [btnDisable, setBtnDisable] = useState('')\n    console.log(isUnStaking)\n\n    // const isUnStaking = unstakeTokensState.status = \"UnStakings\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const [showUnStakeTokensSuccess, setShowUnStakeTokensSuccess] = useState(false)\n\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n        setShowUnStakeTokensSuccess(false)\n    }\n\n    useEffect(() => {\n        if (isMining || isUnStaking || isUnStakingAll) {\n            setBtnDisable('disabled')\n        } else {\n            setBtnDisable('')\n        }\n    }, [isMining, isUnStaking, isUnStakingAll])\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Unstake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowUnStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess, showUnStakeTokensSuccess])\n\n    return (\n        <>  <div className=\"form\">\n            <BalanceMsg label={`Your staked ${name} balance:`} amount={formattedBalance}\n                tokenImgSrc={image} />\n\n            {/* This is a stake <div> */}\n            {/* <div>\n\n                <Input onChange={handleInputChange} />\n                <Button onClick={handleStakeSubmit}\n                    color=\"primary\" size=\"large\"\n                    disabled={isMining || isUnStaking}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Stake!!\"}\n\n                </Button>\n            </div> */}\n            <div className=\"\">\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <button className=\"btn-unstake\"\n                    onClick={handleUnStakeSubmit}\n                    disabled={isUnStakingAll || isUnStaking}\n                >\n                    {isUnStaking ? <CircularProgress size={26} /> : \"Unstake Tokens!\"}\n\n                </button>\n                <div>\n                    <button className=\"btn\" onClick={handleUnStakeAllSubmit}\n                        disabled={isUnStaking || isUnStakingAll}\n                    >\n                        {(isUnStaking) ? <CircularProgress size={26} /> : \"Unstake All!\"}\n\n                    </button>\n                </div>\n\n\n            </div>\n            <div>\n\n            </div>\n        </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Staked!\n                </Alert>\n            </Snackbar>\n            <Snackbar open={showUnStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens UnStaked!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/project/AllocatedAmountToParticipate.tsx",[],[],"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/YourWallet.tsx",["498"],[],"import { Token } from \"../Main\"\nimport Box from '@mui/material/Box';\nimport React, { useState } from \"react\"\nimport { TabContext, TabList, TabPanel } from \"@material-ui/lab\"\nimport { tokenToString } from \"typescript\";\nimport { Tab } from \"@material-ui/core\"\nimport { WalletBalance } from \"./WalletBalance\";\nimport { StakeForm } from \"./StakeForm\"\nimport { makeStyles } from \"@material-ui/core\"\nimport { useEthers, useEtherBalance } from \"@usedapp/core\";\n\nimport { GridTotalStaking } from \"./GridTotalStaking\";\nimport { useContext } from \"react\";\n// import { MyContext } from \"../../App\";\nimport { GridStakingUnstaking } from \"./GridStakingUnstaking\";\nimport { MyContext } from \"../Header2\";\nimport { CheckpointsStake } from \"../CheckpointsStake\";\nimport { formatUnits } from \"@ethersproject/units\"\n\n\nconst useStyles = makeStyles((theme) => ({\n    tabContent: {\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        gap: theme.spacing(0)\n    },\n    box: {\n        backgroundColor: \"white\",\n        borderRadius: \"25px\",\n        opacity: \"0.95\",\n        marginTop: \"1em\",\n    },\n    header: {\n        color: \"white\"\n    }\n}))\n\ninterface YourWalletProps {\n    supportedTokens: Array<Token>\n}\n\n\n\nexport const YourWallet = ({ supportedTokens }: YourWalletProps) => {\n    const { dappTokenAddress, formattedDappTokenBalance } = useContext(MyContext)\n\n    const { account } = useEthers()\n    const isConnected = account !== undefined\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n\n    const [selectedTokenIndex, setSelectedTokenIndex] = useState<number>(0)\n    console.log(\"supported tokens\")\n    console.log(supportedTokens[1].address)\n\n    const handleChange = (event: React.ChangeEvent<{}>, newValue: string) => {\n        setSelectedTokenIndex(parseInt(newValue))\n    }\n    const classes = useStyles()\n    return (\n        <>\n            <div>\n                <h1 className=\"section-heading\"> Stake! Tokens</h1>\n                <GridTotalStaking tokenAddress={dappTokenAddress} />\n                <GridStakingUnstaking tokenAddress={dappTokenAddress} />\n            </div>\n            <Box className=\"\" sx={{ mt: 4 }}>\n                <CheckpointsStake />\n\n                {(isConnected && (formattedEthBalance > 0) && (formattedDappTokenBalance > 0)) ? (\n                    <Box className={classes.box}>\n                        <TabContext value={selectedTokenIndex.toString()}>\n                            <TabList onChange={handleChange} aria-label=\"stake form tabs\">\n                                {supportedTokens.map((token, index) => {\n                                    return (\n                                        <Tab label={token.name}\n                                            value={index.toString()}\n                                            key={index} />\n                                    )\n                                })}\n                            </TabList>\n                            {supportedTokens.map((token, index) => {\n                                return (\n                                    <TabPanel value={index.toString()} key={index.toString()}>\n                                        <div className={classes.tabContent}>\n                                            <WalletBalance token={supportedTokens[selectedTokenIndex]} />\n                                            <StakeForm token={supportedTokens[selectedTokenIndex]} />\n                                        </div>\n\n                                    </TabPanel>\n                                )\n                            })}\n                        </TabContext>\n                    </Box>\n                ) : (<h1 className=\"section-heading\">The above checkpoints must be met to Stake!</h1>)}\n\n            </Box>\n        </>\n\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/ProgressBar.tsx",["499","500","501","502"],[],"import { useState, useEffect } from \"react\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\n\n\ninterface CheckpointProps {\n    checkpoints: boolean\n    // ethBalance: number\n    // busdBalance: number\n}\n\nexport const ProgressBar = ({ checkpoints }: CheckpointProps) => {\n\n    const { notifications } = useNotifications();\n\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState('svg-logo')\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState('svg-logo')\n    console.log(\"you are in progress Bar: \" + checkpoints)\n\n    const [walletStatus, setWalletStatus] = useState('svg-logo')\n\n    useEffect(() => {\n        if (checkpoints == true) {\n            setWalletStatus('svg-success')\n            console.log('You are in useEffect Wallet Connected')\n            console.log(walletStatus)\n        } else {\n            setWalletStatus('svg-logo')\n            console.log(walletStatus)\n        }\n    }, [checkpoints])\n\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess('svg-success')\n            // setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            // setShowErc20ApprovalSuccess('svg-success')\n            setShowStakeTokensSuccess('svg-success')\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n    return (\n        <>\n            {/* <h1 className=\"section-heading\"> Progress...</h1> */}\n            <div className=\"progress-bar\">\n\n                <div className=\"progress-bar-item\">\n                    {/* <div className=\"svg-container\"> */}\n                    <svg className={walletStatus} version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 384.97 384.97\" xmlSpace=\"preserve\">\n                        <g>\n                            <g id=\"Menu\">\n                                <path d=\"M12.03,84.212h360.909c6.641,0,12.03-5.39,12.03-12.03c0-6.641-5.39-12.03-12.03-12.03H12.03\n                        C5.39,60.152,0,65.541,0,72.182C0,78.823,5.39,84.212,12.03,84.212z\"/>\n                                <path d=\"M372.939,180.455H12.03c-6.641,0-12.03,5.39-12.03,12.03s5.39,12.03,12.03,12.03h360.909c6.641,0,12.03-5.39,12.03-12.03\n                            S379.58,180.455,372.939,180.455z\"/>\n                                <path d=\"M372.939,300.758H12.03c-6.641,0-12.03,5.39-12.03,12.03c0,6.641,5.39,12.03,12.03,12.03h360.909\n                            c6.641,0,12.03-5.39,12.03-12.03C384.97,306.147,379.58,300.758,372.939,300.758z\"/>\n                            </g>\n                        </g>\n                    </svg>\n                    {/* </div> */}\n                    <div>\n                        <h4 >1. Checkpoints</h4>\n                    </div>\n                    {/* <div> */}\n\n\n                    {/* </div> */}\n                </div>\n                <svg className=\"svg-arrow\" >\n                    {/* <line x1=\"10\" y1=\"0\" x2=\"10000\" y2=\"4000\" /> */}\n                    <line x1=\"0\" y1=\"20\" x2=\"10000\" y2=\"00\" />\n                    {/* <line x1=\"0\" y1=\"40\" x2=\"10000\" y2=\"0\" /> */}\n                </svg>\n                <div className=\"progress-bar-item\">\n                    {/* <div className=\"svg-container\"> */}\n                    <svg className={showErc20ApprovalSuccess} version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 199.027 199.027\" xmlSpace=\"preserve\">\n                        <g>\n                            <g>\n                                <g>\n                                    <path d=\"M99.514,0.009C44.657,0.009,0,44.648,0,99.522c0,54.853,44.657,99.496,99.514,99.496\n                                        c54.871,0,99.514-44.643,99.514-99.496C199.027,44.648,154.384,0.009,99.514,0.009z M99.514,189.43\n                                        c-49.581,0-89.926-40.33-89.926-89.911S49.932,9.593,99.514,9.593s89.926,40.344,89.926,89.926S149.095,189.43,99.514,189.43z\"/>\n                                </g>\n                                <g>\n                                    <path d=\"M104.288,92.54c-13.199-5.604-17.823-9.538-17.823-17.264c0-6.202,3.418-13.184,15.092-13.184\n                                            c9.699,0,15.901,3.5,19.086,5.307l3.783-9.999c-4.549-2.57-10.747-5.007-19.684-5.29V37.383H95.19v15.156\n                                            c-13.796,2.29-22.719,11.825-22.719,24.393c0,13.184,9.552,20.296,24.988,26.365c11.227,4.545,16.169,9.702,16.151,18.027\n                                            c0.018,8.654-6.302,14.856-17.046,14.856c-8.493,0-16.384-3.021-21.674-6.499l-3.633,10.132\n                                            c5.29,3.783,14.244,6.517,23.016,6.682v15.139h9.552v-15.751c15.6-2.423,23.943-13.646,23.943-25.753\n                                            C127.772,106.652,119.892,98.921,104.288,92.54z\"/>\n                                </g>\n                            </g>\n                        </g>\n                    </svg>\n\n                    {/* </div> */}\n                    <div>\n                        <h4 style={{ color: \"\" }}>2. Enter Amount</h4>\n                    </div>\n                </div>\n                <svg className=\"svg-arrow\" >\n                    {/* <line x1=\"10\" y1=\"0\" x2=\"10000\" y2=\"4000\" /> */}\n                    <line x1=\"0\" y1=\"20\" x2=\"10000\" y2=\"00\" />\n                    {/* <line x1=\"0\" y1=\"40\" x2=\"10000\" y2=\"0\" /> */}\n                </svg>\n                <div className=\"progress-bar-item\">\n                    {/* <div className=\"svg-container\"> */}\n                    <svg className={showErc20ApprovalSuccess} version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 490 490\" xmlSpace=\"preserve\">\n                        <g>\n                            <g>\n                                <path d=\"M244.95,386c77.8,0,141-63.1,141-141c0-77.8-63.1-141-141-141c-40.6,0-77.2,17.2-102.9,44.6\n                                        c-23.6,25.2-38.1,59.1-38.1,96.3C103.95,322.9,167.15,386,244.95,386z M195.75,300.8c1.3-4.6,2.5-9.3,4-13.8c1.7-5.3,3.1-6,8-3.4\n                                        c8.4,4.4,17.2,6.8,26.5,8c6,0.7,11.9,0.1,17.4-2.3c10.4-4.5,12-16.5,3.2-23.8c-3-2.5-6.4-4.3-9.9-5.8c-9.1-4-18.6-7-27.1-12.2\n                                        c-13.9-8.3-22.8-19.8-21.7-36.7c1.2-19.2,12-31.1,29.6-37.5c7.2-2.6,7.3-2.5,7.3-10.1c0-2.6,0-5.1,0-7.7c0.1-5.7,1.1-6.7,6.8-6.9\n                                        c1.8-0.1,3.5,0,5.3,0c12.1,0,12.1,0,12.2,12.1c0,8.6,0,8.6,8.6,9.9c6.5,1,12.8,2.9,18.8,5.6c3.3,1.5,4.6,3.8,3.6,7.3\n                                        c-1.5,5.2-2.9,10.5-4.6,15.7c-1.6,4.9-3.1,5.6-7.8,3.3c-9.5-4.6-19.4-6.5-29.8-5.9c-2.7,0.1-5.4,0.5-8,1.6\n                                        c-9,3.9-10.5,13.9-2.8,20.1c3.9,3.1,8.3,5.4,12.9,7.3c8,3.3,16,6.5,23.6,10.7c24.2,13.4,30.7,43.7,13.7,64.4\n                                        c-6.2,7.5-14.2,12.5-23.5,15.1c-4.1,1.1-5.9,3.3-5.7,7.5c0.2,4.2,0,8.3,0,12.5c0,3.7-1.9,5.7-5.6,5.8c-4.5,0.1-9,0.1-13.4,0\n                                        c-3.9-0.1-5.8-2.3-5.8-6.1c0-3-0.1-6.1-0.1-9.1c-0.1-6.7-0.3-7-6.7-8c-8.3-1.3-16.4-3.2-23.9-6.9\n                                        C194.65,308.5,194.05,307,195.75,300.8z\"/>\n                                <path d=\"M397.65,397.8c-81.4,81.4-212.1,84.1-296.8,8.3h27.2v-29h-57.2h-0.7h-19.3v19.6v0.4v57.2h29v-28.1\n                                        c46.6,42.5,105.8,63.8,165,63.8c62.8,0,125.5-23.9,173.3-71.7l10.3-10.3l-20.5-20.5L397.65,397.8z\"/>\n                                <path d=\"M410.05,35.7v28.1C363.45,21.3,304.25,0,245.05,0c-62.8,0-125.5,23.9-173.3,71.7l-10.2,10.2l20.5,20.5l10.3-10.3\n                                        c81.4-81.4,212.1-84.1,296.8-8.3h-27.2v29h57.2h0.7h19.3V93.2v-0.4V35.7H410.05z\"/>\n                            </g>\n                        </g>\n\n                    </svg>\n                    {/* </div> */}\n                    <div>\n                        <h4 style={{ color: \"\" }}>3. Pre-Authorize</h4>\n                    </div>\n                </div>\n                <svg className=\"svg-arrow\" >\n                    {/* <line x1=\"10\" y1=\"0\" x2=\"10000\" y2=\"4000\" /> */}\n                    <line x1=\"0\" y1=\"20\" x2=\"10000\" y2=\"00\" />\n                    {/* <line x1=\"0\" y1=\"40\" x2=\"10000\" y2=\"0\" /> */}\n                </svg>\n\n\n                <div className=\"progress-bar-item\">\n                    {/* <div className=\"svg-container\"> */}\n                    <svg className={showStakeTokensSuccess} version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                        viewBox=\"0 0 214.27 214.27\" xmlSpace=\"preserve\">\n                        <g>\n                            <path d=\"M196.926,55.171c-0.11-5.785-0.215-11.25-0.215-16.537c0-4.142-3.357-7.5-7.5-7.5c-32.075,0-56.496-9.218-76.852-29.01\n                    c-2.912-2.832-7.546-2.831-10.457,0c-20.354,19.792-44.771,29.01-76.844,29.01c-4.142,0-7.5,3.358-7.5,7.5\n                    c0,5.288-0.104,10.755-0.215,16.541c-1.028,53.836-2.436,127.567,87.331,158.682c0.796,0.276,1.626,0.414,2.456,0.414\n                    c0.83,0,1.661-0.138,2.456-0.414C199.36,182.741,197.954,109.008,196.926,55.171z M107.131,198.812\n                    c-76.987-27.967-75.823-89.232-74.79-143.351c0.062-3.248,0.122-6.396,0.164-9.482c30.04-1.268,54.062-10.371,74.626-28.285\n                    c20.566,17.914,44.592,27.018,74.634,28.285c0.042,3.085,0.102,6.231,0.164,9.477C182.961,109.577,184.124,170.844,107.131,198.812\n                    z\"/>\n                            <path d=\"M132.958,81.082l-36.199,36.197l-15.447-15.447c-2.929-2.928-7.678-2.928-10.606,0c-2.929,2.93-2.929,7.678,0,10.607\n                    l20.75,20.75c1.464,1.464,3.384,2.196,5.303,2.196c1.919,0,3.839-0.732,5.303-2.196l41.501-41.5\n                    c2.93-2.929,2.93-7.678,0.001-10.606C140.636,78.154,135.887,78.153,132.958,81.082z\"/>\n                        </g>\n                    </svg>\n                    {/* </div> */}\n                    <div>\n                        <h4 style={{ color: \"\" }}>4. Confirm...</h4>\n                    </div>\n                </div>\n\n                <svg className=\"svg-arrow\" >\n                    {/* <line x1=\"10\" y1=\"0\" x2=\"10000\" y2=\"4000\" /> */}\n                    <line x1=\"0\" y1=\"20\" x2=\"10000\" y2=\"00\" />\n                    {/* <line x1=\"0\" y1=\"40\" x2=\"10000\" y2=\"0\" /> */}\n                </svg>\n                <div className=\"progress-bar-item\">\n                    {/* <div className=\"svg-container\"> */}\n                    <svg className={showStakeTokensSuccess} version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\n                        width=\"405.272px\" height=\"405.272px\" viewBox=\"0 0 405.272 405.272\"\n                        xmlSpace=\"preserve\">\n                        <g>\n                            <path d=\"M393.401,124.425L179.603,338.208c-15.832,15.835-41.514,15.835-57.361,0L11.878,227.836\n                c-15.838-15.835-15.838-41.52,0-57.358c15.841-15.841,41.521-15.841,57.355-0.006l81.698,81.699L336.037,67.064\n                c15.841-15.841,41.523-15.829,57.358,0C409.23,82.902,409.23,108.578,393.401,124.425z\"/>\n                        </g>\n                    </svg>\n                    {/* </div> */}\n                    <div>\n                        <h4 style={{ color: \"\" }}>5. Success!!! </h4>\n                    </div>\n                </div>\n\n            </div>\n        </>\n    )\n}\n","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAvailableToClaim.tsx",["503","504","505","506","507","508","509"],[],"import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useAvailableToClaim = (address: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [availableToClaim] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAvailablePreSaleTokensToWithdraw\",\n        args: [address, account]\n    }) ?? []\n\n    const [totalClaimed] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalWithdrawnPreSaleTokens\",\n        args: [account]\n    }) ?? []\n\n\n    return { availableToClaim, totalClaimed }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePurchasedBalance.tsx",["510","511"],[],"import { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const usePurchasedBalance = (address: string): BigNumber | undefined => {\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    console.log(\"You are in usePurchasedBalance Context: chainIdentity \" + chainIdentity + \" tokenFarmL \" + tokenFarmContractAddress)\n\n\n\n\n    const { account, chainId } = useEthers()\n    console.log(chainId)\n    console.log(\"usePurchasedBalance: chainId\" + chainId)\n\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress1 = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n\n    const [purchasedBalance] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalPurchasedPreSaleTokens\",\n        args: [account]\n    }) ?? []\n\n\n    return purchasedBalance\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakingBalance.tsx",["512","513","514","515","516"],[],"import { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\n// : BigNumber | undefined\nexport const useStakingBalance = (address: string) => {\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [stakingBalance] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"stakingBalance\",\n        args: [address, account]\n    }) ?? []\n\n    const [totalNumberOfStakers] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"uniqueTokenStakers\",\n        args: []\n    }) ?? []\n\n    const [totalTokensStaked] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalTokensStaked\",\n        args: []\n    }) ?? []\n\n\n    return { stakingBalance, totalNumberOfStakers, totalTokensStaked }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimPreSaleTokens.tsx",["517","518","519","520","521","522","523","524","525"],[],"import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useEffect, useState, useContext } from \"react\"\nimport PreSale from \"../chain-info/contracts/PreSale.json\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\n\nexport const useClaimPreSaleTokens = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n\n\n    // return useContractFunction(tokenFarmContract, \"unstakeTokens\",\n    //     { transactionName: \"Unstake Tokens\" })\n\n    return useContractFunction(tokenFarmContract, \"claimAllPreSaletokens\",\n        { transactionName: \"Claiming Pre Sale Tokens\" })\n\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/BalanceMsg.tsx",[],[],"/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakingRewards.tsx",["526","527","528","529"],[],"import { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useStakingRewards = (address: string): BigNumber | undefined => {\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [stakingRewards] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAvailableStakingRewards\",\n        args: [account, address]\n    }) ?? []\n\n\n    return stakingRewards\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePreSale.tsx",["530","531","532","533","534","535"],[],"import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n// const MyContext = createContext('')\n\nexport const usePreSale = (tokenAddress: string) => {\n    //address\n    // abi\n    // chainId\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    console.log('this is the value of context chainId in usePreSale: ' + data + ' Number ' + chainIdentity + ' TokenAddress ' + tokenFarmContractAddress)\n\n    useEffect(() => {\n        console.log('in usePreSale chainNumber and tokenFarmAddress changed.')\n    }, [chainIdentity, tokenFarmContractAddress])\n\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    // const tokenFarmAddress = tokenFarmContractAddress\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n\n    //aprove\n    const { send: approveErc20Send, state: approveAndPreSaleErc20State } =\n        useContractFunction(erc20Contract, \"approve\",\n            { transactionName: \"Approve ERC20 Transfer\" })\n\n    const approveAndPreSale = (amount: string) => {\n        setAmountForPreSale(amount)\n        return approveErc20Send(tokenFarmContractAddress, amount)\n    }\n\n\n\n\n    const { send: preSaleFundSend, state: preSaleFundState } =\n        useContractFunction(tokenFarmContract, \"preSaleFund\",\n            { transactionName: \"Stake Tokens\" })\n\n\n\n    const [AmountForPreSale, setAmountForPreSale] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            preSaleFundSend(AmountForPreSale, tokenAddress)\n        }\n    }, [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress])\n\n    const [state, setState] = useState(approveAndPreSaleErc20State)\n\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            setState(preSaleFundState)\n        }\n        else {\n            setState(approveAndPreSaleErc20State)\n        }\n    }, [approveAndPreSaleErc20State, preSaleFundState])\n\n\n\n\n    return { approveAndPreSale, state }\n\n    //stake tokens\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimStakingRewards.tsx",["536","537"],[],"import { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useContext } from \"react\"\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useClaimStakingRewards = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n    return useContractFunction(tokenFarmContract, \"claimStakingRewards\",\n        { transactionName: \"Claiming Staking Rewards\" })\n\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/PreSaleFormEachPreSale.tsx",["538","539","540","541","542","543","544"],[],"import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar, Typography } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { usePreSaleEachPreSale } from \"../../hooks/usePreSaleEachPreSale\"\nimport { useWithdrawPreSaleBalance } from \"../../hooks/useWithdrawPreSaleBalance\"\nimport { utils } from \"ethers\"\nimport { BalanceMsg } from \"../BalanceMsg\"\nimport { usePurchasedBalanceEachPreSale } from \"../../hooks/usePurchasedBalanceEachPreSale\"\nimport { AddModerator, MarginRounded } from \"@mui/icons-material\"\nimport TextField from '@mui/material/TextField';\nimport { useGetValues } from \"../../hooks/useGetValues\"\n\n\nexport interface StakeFormProps {\n    token: Token\n    preSaleNumber: string\n}\n\nexport const PreSaleFormEachPreSale = ({ token, preSaleNumber }: StakeFormProps) => {\n    const { image, address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const { timesEachPreSale } = useGetValues(tokenAddress, preSaleNumber)\n\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n\n    const { notifications } = useNotifications()\n\n    const fTimesEachPreSale: number = timesEachPreSale ? parseFloat(timesEachPreSale) : 0\n\n    const { totalPurchasedPreSaleTokensEachPreSale } = usePurchasedBalanceEachPreSale(tokenAddress, preSaleNumber)\n    const formattedBalance: number = totalPurchasedPreSaleTokensEachPreSale ? parseFloat(formatUnits(totalPurchasedPreSaleTokensEachPreSale, 18)) : 0\n\n    var [numbervalue, setnumbervalue] = useState(0);\n\n    console.log('pre')\n    console.log(numbervalue * 2)\n    console.log('sale')\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setnumbervalue(Number(event.target.value))\n        setAmount(newAmount)\n        // console.log(newAmount)\n    }\n\n    const { approveAndPreSale, state: approveAndStakeErc20State } = usePreSaleEachPreSale(tokenAddress, preSaleNumber)\n    const { send: withdrawBalance, state: withdrawBalanceState } = useWithdrawPreSaleBalance()\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        // console.log(amountAsWei)\n        // console.log('bcd')\n        return approveAndPreSale(amountAsWei.toString())\n    }\n\n\n    const handleWithdrawPreSaleSubmit = () => {\n        return withdrawBalance(tokenAddress)\n    }\n\n    const isWithdrawing = withdrawBalanceState.status === \"Mining\"\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n    }\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n    return (\n        <>\n            <BalanceMsg label={`Your participated ${name} count:`} amount={formattedBalance}\n                tokenImgSrc={image} />\n            <h4> 1 $BUSD = {fTimesEachPreSale} x ${name}</h4>\n            <div className=\"form\">\n\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <span >\n                    <button onClick={handleStakeSubmit}\n                        color=\"primary\"\n                        // size=\"large\"\n                        disabled={isMining}\n                        // variant=\"contained\"\n                        className=\"btn\"\n                    >\n                        {isMining ? <CircularProgress size={26} /> : \"Buy!!\"}\n\n                    </button>\n\n                </span>\n                <h3>You will get {numbervalue * fTimesEachPreSale} tokens.</h3>\n\n                <button className=\"btn\" onClick={handleWithdrawPreSaleSubmit}\n\n                    disabled={isMining}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Withdraw!!\"}\n\n                </button>\n            </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Purchased!\n                </Alert>\n            </Snackbar>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useParticipateButton.tsx",["545"],[],"import { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useContext } from \"react\"\nimport { MyContext } from \"../components/Header2\";\n\n\n\nexport const useParticipationButton = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n\n    const data = useContext(MyContext)\n    const { tokenFarmContractAddress, dappTokenAddress } = data\n\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n    const participateInPreSaleAllocationSendFunction = (preSaleNumber: string) => {\n\n        return participateInPreSaleAllocationSend(preSaleNumber, dappTokenAddress)\n    }\n    const { send: participateInPreSaleAllocationSend, state: participateInPreSaleAllocationState } =\n        useContractFunction(tokenFarmContract, \"participateInPreSaleAllocation\",\n            { transactionName: \"Participating in PreSale Allocation\" })\n\n    return { participateInPreSaleAllocationSendFunction, participateInPreSaleAllocationState }\n\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePurchasedBalanceEachPreSale.tsx",["546","547","548"],[],"import { useContractCall, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const usePurchasedBalanceEachPreSale = (address: string, preSaleNumber: string) => {\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    console.log(\"You are in usePurchasedBalance Context: chainIdentity \" + chainIdentity + \" tokenFarmL \" + tokenFarmContractAddress)\n\n\n\n\n    const { account, chainId } = useEthers()\n    console.log(chainId)\n    console.log(\"usePurchasedBalance: chainId\" + chainId)\n\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress1 = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n\n    const [totalPurchasedPreSaleTokensEachPreSale] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalPurchasedPreSaleTokensEachPreSale\",\n        args: [preSaleNumber, account]\n    }) ?? []\n\n    const [purchasedBalanceEachPreSale] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"purchasedBalanceEachPreSale\",\n        args: [preSaleNumber, account]\n    }) ?? []\n\n    return { totalPurchasedPreSaleTokensEachPreSale, purchasedBalanceEachPreSale }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useStakeTokens.ts",["549","550","551","552","553"],[],"// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useEffect, useState, useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useStakeTokens = (tokenAddress: string) => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress: tokenFarmAddress } = data\n\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    //aprove\n    const { send: approveErc20Send, state: approveAndStakeErc20State } =\n        useContractFunction(erc20Contract, \"approve\",\n            { transactionName: \"Approve ERC20 Transfer\" })\n\n    const approveAndStake = (amount: string) => {\n        setAmountToStake(amount)\n        return approveErc20Send(tokenFarmAddress, amount)\n    }\n\n\n    const { send: stakeSend, state: stakeState } =\n        useContractFunction(tokenFarmContract, \"stakeTokens\",\n            { transactionName: \"Stake Tokens\" })\n\n\n\n    const [amountToStake, setAmountToStake] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            stakeSend(amountToStake, tokenAddress)\n        }\n    }, [approveAndStakeErc20State, amountToStake, tokenAddress])\n\n    const [state, setState] = useState(approveAndStakeErc20State)\n\n    useEffect(() => {\n        if (approveAndStakeErc20State.status === \"Success\") {\n            setState(stakeState)\n        }\n        else {\n            setState(approveAndStakeErc20State)\n        }\n    }, [approveAndStakeErc20State, stakeState])\n\n\n\n\n    return { approveAndStake, state }\n\n    //stake tokens\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useWithdrawPreSaleBalance.tsx",["554","555","556","557","558","559","560","561","562"],[],"import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useEffect, useState } from \"react\"\nimport PreSale from \"../chain-info/contracts/PreSale.json\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\n\nexport const useWithdrawPreSaleBalance = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress: tokenFarmAddress } = data\n\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n\n    // const preSaleAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"PreSale\"][0] : constants.AddressZero) : constants.AddressZero)\n    // const preSaleAbi = PreSale.abi\n    // const preSaleInterface = new utils.Interface(preSaleAbi)\n    // const preSaleContract = new Contract(preSaleAddress, preSaleInterface)\n\n    // return useContractFunction(tokenFarmContract, \"unstakeTokens\",\n    //     { transactionName: \"Unstake Tokens\" })\n\n    return useContractFunction(tokenFarmContract, \"withdrawPreSaleCollectedFund\",\n        { transactionName: \"Withdraw Pre Sale Funds\" })\n\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useClaimPreSaleTokensEachPreSale.tsx",["563","564","565","566","567","568","569","570","571"],[],"import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { useEffect, useState, useContext } from \"react\"\nimport PreSale from \"../chain-info/contracts/PreSale.json\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\n\nexport const useClaimPreSaleTokensEachPreSale = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n\n\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n\n\n    // return useContractFunction(tokenFarmContract, \"unstakeTokens\",\n    //     { transactionName: \"Unstake Tokens\" })\n    const claimAllTokensEachPreSaleSendFunction = (preSaleNumber: string) => {\n\n        return claimAllTokensEachPreSaleSend(preSaleNumber)\n    }\n    const { send: claimAllTokensEachPreSaleSend, state: claimAllTokensEachPreSaleState } =\n        useContractFunction(tokenFarmContract, \"claimAllTokensEachPreSale\",\n            { transactionName: \"Claiming Pre Sale Tokens Each PreSale\" })\n\n    return { claimAllTokensEachPreSaleSendFunction, claimAllTokensEachPreSaleState }\n\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useUnStakeAllTokens.tsx",["572","573","574","575"],[],"// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\n// import ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n// import { useEffect, useState } from \"react\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useUnStakeAllTokens = () => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress: tokenFarmAddress } = data\n\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // const erc20ABI = ERC20.abi\n    // const erc20Interface = new utils.Interface(erc20ABI)\n    // const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    //aprove\n\n\n    // const UnStakeTokens = () => {\n    //     unStakeSend(tokenAddress)\n    // }\n\n\n\n    // const { send: unStakeSend, state: unStakeState } =\n    //     useContractFunction(tokenFarmContract, \"unstakeTokens\",\n    //         { transactionName: \"Unstake Tokens\" })\n\n    return useContractFunction(tokenFarmContract, \"unstakeAllTokens\",\n        { transactionName: \"Unstake All Tokens\" })\n\n\n    //stake tokens\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAvailableToClaimEachPreSale.tsx",["576","577","578","579","580","581","582","583"],[],"import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useAvailableToClaimEachPreSale = (address: string, preSaleNumber: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress } = data\n\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [availableToClaim] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAvailablePreSaleTokensToWithdrawEachPreSale\",\n        args: [address, account, preSaleNumber]\n    }) ?? []\n\n    const [totalClaimed] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"totalWithdrawnPreSaleTokensEachPreSale\",\n        args: [preSaleNumber, account]\n    }) ?? []\n\n\n    return { availableToClaim, totalClaimed }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useAllocatedAmount.tsx",["584","585","586","587","588","589","590","591"],[],"import { useContractCall, useContractFunction, useEthers } from \"@usedapp/core\";\nimport TokenForm from \"../chain-info/contracts/TokenFarm.json\"\nimport { utils, BigNumber, constants } from \"ethers\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { useContext, useEffect } from \"react\";\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useAllocatedAmount = (tokenAddress: string, preSaleNumber: string) => {\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress, dappTokenAddress } = data\n    console.log(\"this is in useGetValues: \" + tokenAddress + \" \" + preSaleNumber)\n    const { account, chainId } = useEthers()\n    const { abi } = TokenForm\n    // const tokenFarmContractAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n\n    const [getAllocatedPreSaleAmount] = useContractCall({\n        abi: tokenFarmInterface,\n        address: tokenFarmContractAddress,\n        method: \"getAllocatedPreSaleAmount\",\n        args: [account, tokenAddress, preSaleNumber]\n    }) ?? []\n\n\n    return { getAllocatedPreSaleAmount }\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/useUnStakeTokens.tsx",["592","593","594","595"],[],"// import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\n// import ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\n// import { useEffect, useState } from \"react\"\nimport { useContext } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\n\n\nexport const useUnStakeTokens = (tokenAddress: string) => {\n    //address\n    // abi\n    // chainId\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress: tokenFarmAddress } = data\n\n\n    // const tokenFarmAddress = (chainId ? ((String(chainId) == '42') ? networkMapping[String(chainId)][\"TokenFarm\"][0] : constants.AddressZero) : constants.AddressZero)\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmAddress, tokenFarmInterface)\n\n    // const erc20ABI = ERC20.abi\n    // const erc20Interface = new utils.Interface(erc20ABI)\n    // const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    //aprove\n\n\n    // const UnStakeTokens = () => {\n    //     unStakeSend(tokenAddress)\n    // }\n\n\n    const unStakeTokens = (amount: string) => {\n        return unStakeSend(amount, tokenAddress)\n    }\n\n    const { send: unStakeSend, state: unStakeState } =\n        useContractFunction(tokenFarmContract, \"unstakeTokens\",\n            { transactionName: \"Unstake Tokens\" })\n\n    // useEffect(() => {\n\n    // }, [unStakeState, tokenAddress])\n\n    // return useContractFunction(tokenFarmContract, \"unstakeAllTokens\",\n    //     { transactionName: \"Unstake All Tokens\" })\n\n    return { unStakeTokens, unStakeState }\n    //stake tokens\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/CheckpointsStake.tsx",["596","597","598","599","600","601","602","603","604","605","606","607","608","609","610"],[],"import { Box, Grid, Typography, Checkbox } from \"@mui/material\"\nimport { styled } from '@mui/material/styles';\nimport Paper from '@mui/material/Paper';\nimport { makeStyles } from \"@material-ui/core\"\nimport CheckBoxIcon from '@mui/icons-material/CheckBox';\nimport CheckBoxOutlineBlankIcon from '@mui/icons-material/CheckBoxOutlineBlank';\nimport Avatar from '@mui/material/Avatar';\nimport MenuIcon from '@mui/icons-material/Menu';\nimport MonetizationOnIcon from '@mui/icons-material/MonetizationOn';\nimport PriceCheckIcon from '@mui/icons-material/PriceCheck';\nimport LocalPoliceIcon from '@mui/icons-material/LocalPolice';\nimport ThumbUpAltIcon from '@mui/icons-material/ThumbUpAlt';\nimport CheckIcon from '@mui/icons-material/Check';\nimport { deepOrange, green } from '@mui/material/colors';\nimport { ProgressBar } from \"./ProgressBar\";\nimport { useEthers, useTokenBalance, useEtherBalance } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { useContext, useEffect, useState } from \"react\";\nimport { useGetStakingLevel } from \"../hooks/useGetStakingLevel\";\nimport { MyContext } from \"./Header2\";\n\nconst useStyles = makeStyles(theme => ({\n    container: {\n        // display: \"inline-grid\",\n        // gridTemplateColumns: \"auto auto auto\",\n        // gap: theme.spacing(1),\n        alignItems: \"stretch\",\n    },\n    tokenImg: {\n        width: \"32px\"\n    },\n    amount: {\n        fontWeight: 700\n    },\n    bold: {\n        fontWeight: 900,\n    },\n\n}))\n\nconst Item = styled(Paper)(({ theme }) => ({\n    backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    padding: theme.spacing(1),\n    textAlign: 'center',\n    alignItems: 'stretch',\n    margin: 0,\n    // borderRadius: 20,\n    // justifyContent: 'left',\n    // display: \"flex\",\n    color: theme.palette.text.secondary,\n    h2: {\n        margin: 10,\n    },\n    h3: {\n        margin: 10,\n        fontSize: 15,\n    },\n    span: {\n        fontSize: 20\n    }\n}));\n\nconst Item2 = styled(Paper)(({ theme }) => ({\n    // backgroundColor: theme.palette.mode === 'dark' ? '#1A2027' : '#fff',\n    ...theme.typography.body2,\n    backgroundColor: 'rgba(52, 52, 52, 0.8)',\n    paddingTop: theme.spacing(1),\n    textAlign: 'center',\n    opacity: '.5',\n    justifyContent: 'center',\n    display: 'flex',\n    // color: theme.palette.text.secondary,\n}));\n\ninterface CheckpointProps {\n    connectedToMetaMask: boolean\n    ethBalance: number\n    busdBalance: number\n}\n\nexport const CheckpointsStake = () => {\n    console.log(\"CheckpointsPreSale\")\n    const classes = useStyles()\n    // console.log(connectedToMetaMask)\n    const { account } = useEthers()\n    const { formattedDappTokenBalance } = useContext(MyContext)\n\n    const connectedToMetaMask = account !== undefined\n\n    const busdTokenAddress = '0x84b9B910527Ad5C03A9Ca831909E21e236EA7b06'\n\n    const busdTokenBalance = useTokenBalance(busdTokenAddress, account)\n    const formattedBusdTokenBalance: number = busdTokenBalance ? parseFloat(formatUnits(busdTokenBalance, 18)) : 0\n    const busdAvailable = (formattedBusdTokenBalance > 0) ? true : false\n\n\n\n    const ethBalance = useEtherBalance(account)\n    const formattedEthBalance: number = ethBalance ? parseFloat(formatUnits(ethBalance, 18)) : 0\n\n    const ethAvailable = (formattedEthBalance > 0) ? true : false\n    const [checkpoints, setCheckpoints] = useState(false)\n\n    const { getStakingLevel } = useGetStakingLevel()\n    const fStakingLevel: number = getStakingLevel ? parseFloat(getStakingLevel) : 0\n\n    useEffect(() => {\n        if (connectedToMetaMask && ethAvailable) {\n            setCheckpoints(true)\n        }\n    }, [connectedToMetaMask, ethAvailable, busdAvailable])\n\n    return (\n        <>\n            <Box sx={{ flexGrow: 1 }}>\n                {/* <Grid\n                    container\n                    direction=\"column\"\n                    // justifyContent=\"center\"\n                    alignItems=\"center\"\n\n                > */}\n\n                <div className=\"checkpointsHead\"\n                >\n                    <div>\n                        <h1>Checkpoints...</h1>\n\n                        <h3>The following conditions must be met to proceed:</h3>\n\n                    </div>\n                </div>\n                {/* </Box></Grid> */}\n            </Box>\n\n            <Grid container spacing={2}\n                justifyContent=\"center\"\n                alignItems='stretch'\n            >\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={4}\n                    sx={{ display: { xs: 'block', sm: 'block' }, }}\n                >\n\n                    {connectedToMetaMask ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>Wallet Connected!</h2>\n                                <CheckBoxIcon color=\"success\" />\n                            </Item>\n                            <Item >\n                                <h3>\n                                    If not connected, click the \"Connect Wallet\" button in the top right corner\n                                </h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2>Please connect with MetaMask!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n\n                                <h3>\n                                    Click the \"Connect Wallet\" button in the top right corner\n                                </h3>\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={4}\n                    sx={{ display: { xs: 'block', sm: 'block' }, }}\n                >\n                    {formattedEthBalance ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>BNB Available!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n\n                                <h3>Your Bnb Balance: <span>{formattedEthBalance}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2>Require BNB Tokens!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n                                <h3>BNB Balance: <span>{formattedEthBalance}</span></h3>\n                            </Item>\n                        </>)}\n                </Grid>\n                <Grid item className=\"checkpointsGridItem\" xs={12} md={4}>\n                    {formattedDappTokenBalance ? (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n                                <h2> TBP Available!</h2>\n                                <CheckBoxIcon color=\"success\" />\n\n                            </Item>\n                            <Item >\n                                <h3>Your TBP Balance: <span>{formattedDappTokenBalance}</span></h3>\n                            </Item>\n                        </>\n                    ) : (\n                        <>\n                            <Item sx={{ backgroundColor: '#B9B8B8', fontWeight: '900' }}>\n\n                                <h2> Require TBP Tokens!</h2>\n                                <CheckBoxOutlineBlankIcon />\n                            </Item>\n                            <Item >\n                                <h3>Your TBP Balance: <span>{formattedDappTokenBalance}</span></h3>\n                            </Item>\n                        </>)}\n                </Grid>\n            </Grid>\n\n            <Box sx={{ flexGrow: 1, marginTop: 2 }}>\n                <ProgressBar checkpoints={checkpoints} />\n            </Box>\n        </>)\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/components/yourWallet/StakeForm.tsx",["611","612","613"],[],"import { Token } from \"../Main\"\nimport { useEthers, useTokenBalance, useNotifications } from \"@usedapp/core\"\nimport { formatUnits } from \"@ethersproject/units\"\nimport { Button, CircularProgress, Input, Snackbar } from \"@material-ui/core\"\nimport Alert from \"@material-ui/lab/Alert\"\nimport React, { useState, useEffect } from \"react\"\nimport { useStakeTokens } from \"../../hooks/useStakeTokens\"\nimport { utils } from \"ethers\"\n\nexport interface StakeFormProps {\n    token: Token\n}\n\nexport const StakeForm = ({ token }: StakeFormProps) => {\n    const { address: tokenAddress, name } = token\n    const { account } = useEthers()\n    const tokenBalance = useTokenBalance(tokenAddress, account)\n    const formattedTokenBalance: number = tokenBalance ? parseFloat(formatUnits(tokenBalance, 18)) : 0\n    const [amount, setAmount] = useState<number | string | Array<number | string>>(0)\n    const { notifications } = useNotifications()\n\n\n\n    const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        const newAmount = event.target.value === \"\" ? \"\" : Number(event?.target.value)\n        setAmount(newAmount)\n        console.log(newAmount)\n    }\n\n    const { approveAndStake, state: approveAndStakeErc20State } = useStakeTokens(tokenAddress)\n\n    const handleStakeSubmit = () => {\n        const amountAsWei = utils.parseEther(amount.toString())\n        return approveAndStake(amountAsWei.toString())\n    }\n\n    const isMining = approveAndStakeErc20State.status === \"Mining\"\n    const [showErc20ApprovalSuccess, setShowErc20ApprovalSuccess] = useState(false)\n    const [showStakeTokensSuccess, setShowStakeTokensSuccess] = useState(false)\n    const handleCloseSnack = () => {\n        setShowErc20ApprovalSuccess(false)\n        setShowStakeTokensSuccess(false)\n    }\n    useEffect(() => {\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Approve ERC20 Transfer\"\n        ).length > 0) {\n            console.log(\"Approved!\")\n            setShowErc20ApprovalSuccess(true)\n            setShowStakeTokensSuccess(false)\n        }\n        if (notifications.filter((notification) =>\n            notification.type === \"transactionSucceed\" &&\n            notification.transactionName === \"Stake Tokens\"\n        ).length > 0) {\n            console.log(\"Tokens Staked!\")\n            setShowErc20ApprovalSuccess(false)\n            setShowStakeTokensSuccess(true)\n        }\n    }, [notifications, showErc20ApprovalSuccess, showStakeTokensSuccess])\n\n    return (\n        <>\n            <div className=\"form\">\n                <Input className=\"form-input\" onChange={handleInputChange} />\n                <button className=\"btn\" onClick={handleStakeSubmit}\n\n                    disabled={isMining}\n                >\n                    {isMining ? <CircularProgress size={26} /> : \"Stake!\"}\n\n                </button>\n            </div>\n            <Snackbar open={showErc20ApprovalSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    ERC-20 token transfer approved! Now approve the 2nd transaction!\n                </Alert>\n\n            </Snackbar>\n            <Snackbar open={showStakeTokensSuccess}\n                autoHideDuration={5000}\n                onClose={handleCloseSnack} >\n                <Alert onClose={handleCloseSnack} severity=\"success\" >\n                    Tokens Staked!\n                </Alert>\n\n            </Snackbar>\n        </>\n    )\n}","/Users/harmanpreetsingh/demos/the-bulls-pad-front-end/front_end5/src/hooks/usePreSaleEachPreSale.tsx",["614","615","616","617","618","619","620","621","622","623","624"],[],"import { Token } from \"@mui/icons-material\"\nimport { useEthers, useContractFunction } from \"@usedapp/core\"\nimport TokenFarm from \"../chain-info/contracts/TokenFarm.json\"\nimport ERC20 from \"../chain-info/contracts/MockERC20.json\"\nimport networkMapping from \"../chain-info/deployments/map.json\"\nimport { constants, utils } from \"ethers\"\nimport { Contract } from \"@ethersproject/contracts\"\nimport { createContext, useContext, useEffect, useState } from \"react\"\n// import { MyContext } from \"../App\";\nimport { MyContext } from \"../components/Header2\";\nimport { useGetValues } from \"./useGetValues\"\n\n// const MyContext = createContext('')\n\nexport const usePreSaleEachPreSale = (tokenAddress: string, preSaleNumber: string) => {\n    //address\n    // abi\n    // chainId\n    const data = useContext(MyContext)\n    const { chainIdentity, tokenFarmContractAddress } = data\n\n    console.log('this is the value of context chainId in usePreSale: ' + data + ' Number ' + chainIdentity + ' TokenAddress ' + tokenFarmContractAddress)\n\n    useEffect(() => {\n        console.log('in usePreSale chainNumber and tokenFarmAddress changed.')\n    }, [chainIdentity, tokenFarmContractAddress])\n\n    const { chainId } = useEthers()\n    const { abi } = TokenFarm\n\n    // const tokenFarmAddress = tokenFarmContractAddress\n    const tokenFarmInterface = new utils.Interface(abi)\n    const tokenFarmContract = new Contract(tokenFarmContractAddress, tokenFarmInterface)\n\n    const erc20ABI = ERC20.abi\n    const erc20Interface = new utils.Interface(erc20ABI)\n    const erc20Contract = new Contract(tokenAddress, erc20Interface)\n\n    const { participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus } = useGetValues(tokenAddress, preSaleNumber)\n    console.log(\"You are in Hook usePreSaleEachPreSale: and this is participateInPreSaleAllocationStatus, preSaleAllocationStatus, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundEachPreSaleNumberWithoutStakingStatus, claimTokensEachPreSaleStatus: \" + participateInPreSaleAllocationStatus + preSaleAllocationStatus + preSaleFundEachPreSaleNumberStatus + preSaleFundFCFSEachPreSaleNumberStatus + preSaleFundEachPreSaleNumberWithoutStakingStatus + claimTokensEachPreSaleStatus)\n\n    //aprove\n    const { send: approveErc20Send, state: approveAndPreSaleErc20State } =\n        useContractFunction(erc20Contract, \"approve\",\n            { transactionName: \"Approve ERC20 Transfer\" })\n\n    const approveAndPreSale = (amount: string) => {\n        setAmountForPreSale(amount)\n        return approveErc20Send(tokenFarmContractAddress, amount)\n    }\n\n\n\n\n    const { send: preSaleFundSend, state: preSaleFundState } =\n        useContractFunction(tokenFarmContract, \"preSaleFundEachPreSaleNumber\",\n            { transactionName: \"preSaleFundEachPreSaleNumber\" })\n\n    const { send: preSaleFundFCFSSend, state: preSaleFundFCFSState } =\n        useContractFunction(tokenFarmContract, \"preSaleFundFCFSEachPreSaleNumber\",\n            { transactionName: \"preSaleFundEachPreSaleNumber\" })\n\n    const { send: preSaleFundWithoutStakingSend, state: preSaleFundWithoutStakingState } =\n        useContractFunction(tokenFarmContract, \"preSaleFundEachPreSaleNumberWithoutStaking\",\n            { transactionName: \"preSaleFundEachPreSaleNumber\" })\n\n\n    const [AmountForPreSale, setAmountForPreSale] = useState(\"0\")\n\n    //useEffect\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            if (preSaleFundEachPreSaleNumberStatus == true) {\n                preSaleFundSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber)\n            } else if (preSaleFundFCFSEachPreSaleNumberStatus == true) {\n                preSaleFundFCFSSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber)\n            } else {\n                preSaleFundWithoutStakingSend(AmountForPreSale, tokenAddress, tokenAddress, preSaleNumber)\n            }\n        }\n    }, [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress])\n\n    const [state, setState] = useState(approveAndPreSaleErc20State)\n\n    useEffect(() => {\n        if (approveAndPreSaleErc20State.status === \"Success\") {\n            if (preSaleFundEachPreSaleNumberStatus == true) {\n                setState(preSaleFundState)\n            } else if (preSaleFundFCFSEachPreSaleNumberStatus == true) {\n                setState(preSaleFundFCFSState)\n            } else {\n                setState(preSaleFundWithoutStakingState)\n            }\n        }\n        else {\n            setState(approveAndPreSaleErc20State)\n        }\n    }, [approveAndPreSaleErc20State, preSaleFundState, preSaleFundFCFSState, preSaleFundWithoutStakingState])\n\n\n\n\n    return { approveAndPreSale, state }\n\n    //stake tokens\n}",{"ruleId":"625","severity":1,"message":"626","line":1,"column":17,"nodeType":"627","messageId":"628","endLine":1,"endColumn":26},{"ruleId":"625","severity":1,"message":"629","line":1,"column":28,"nodeType":"627","messageId":"628","endLine":1,"endColumn":36},{"ruleId":"625","severity":1,"message":"630","line":1,"column":38,"nodeType":"627","messageId":"628","endLine":1,"endColumn":51},{"ruleId":"625","severity":1,"message":"631","line":5,"column":24,"nodeType":"627","messageId":"628","endLine":5,"endColumn":31},{"ruleId":"625","severity":1,"message":"632","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":16},{"ruleId":"625","severity":1,"message":"633","line":9,"column":10,"nodeType":"627","messageId":"628","endLine":9,"endColumn":19},{"ruleId":"625","severity":1,"message":"634","line":10,"column":10,"nodeType":"627","messageId":"628","endLine":10,"endColumn":14},{"ruleId":"625","severity":1,"message":"635","line":11,"column":10,"nodeType":"627","messageId":"628","endLine":11,"endColumn":17},{"ruleId":"625","severity":1,"message":"636","line":12,"column":25,"nodeType":"627","messageId":"628","endLine":12,"endColumn":31},{"ruleId":"625","severity":1,"message":"637","line":12,"column":33,"nodeType":"627","messageId":"628","endLine":12,"endColumn":38},{"ruleId":"625","severity":1,"message":"638","line":14,"column":10,"nodeType":"627","messageId":"628","endLine":14,"endColumn":27},{"ruleId":"625","severity":1,"message":"639","line":15,"column":8,"nodeType":"627","messageId":"628","endLine":15,"endColumn":11},{"ruleId":"625","severity":1,"message":"640","line":16,"column":10,"nodeType":"627","messageId":"628","endLine":16,"endColumn":17},{"ruleId":"625","severity":1,"message":"641","line":17,"column":10,"nodeType":"627","messageId":"628","endLine":17,"endColumn":16},{"ruleId":"625","severity":1,"message":"642","line":17,"column":18,"nodeType":"627","messageId":"628","endLine":17,"endColumn":22},{"ruleId":"625","severity":1,"message":"643","line":18,"column":10,"nodeType":"627","messageId":"628","endLine":18,"endColumn":25},{"ruleId":"625","severity":1,"message":"644","line":39,"column":20,"nodeType":"627","messageId":"628","endLine":39,"endColumn":41},{"ruleId":"625","severity":1,"message":"645","line":39,"column":43,"nodeType":"627","messageId":"628","endLine":39,"endColumn":53},{"ruleId":"625","severity":1,"message":"646","line":40,"column":9,"nodeType":"627","messageId":"628","endLine":40,"endColumn":20},{"ruleId":"625","severity":1,"message":"647","line":41,"column":9,"nodeType":"627","messageId":"628","endLine":41,"endColumn":19},{"ruleId":"625","severity":1,"message":"648","line":43,"column":9,"nodeType":"627","messageId":"628","endLine":43,"endColumn":22},{"ruleId":"649","severity":1,"message":"650","line":43,"column":52,"nodeType":"651","messageId":"652","endLine":43,"endColumn":54},{"ruleId":"649","severity":1,"message":"650","line":43,"column":85,"nodeType":"651","messageId":"652","endLine":43,"endColumn":87},{"ruleId":"649","severity":1,"message":"650","line":46,"column":26,"nodeType":"651","messageId":"652","endLine":46,"endColumn":28},{"ruleId":"649","severity":1,"message":"650","line":46,"column":55,"nodeType":"651","messageId":"652","endLine":46,"endColumn":57},{"ruleId":"625","severity":1,"message":"653","line":53,"column":9,"nodeType":"627","messageId":"628","endLine":53,"endColumn":25},{"ruleId":"649","severity":1,"message":"650","line":55,"column":26,"nodeType":"651","messageId":"652","endLine":55,"endColumn":28},{"ruleId":"649","severity":1,"message":"650","line":55,"column":55,"nodeType":"651","messageId":"652","endLine":55,"endColumn":57},{"ruleId":"625","severity":1,"message":"633","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":17},{"ruleId":"625","severity":1,"message":"654","line":10,"column":8,"nodeType":"627","messageId":"628","endLine":10,"endColumn":14},{"ruleId":"625","severity":1,"message":"655","line":13,"column":8,"nodeType":"627","messageId":"628","endLine":13,"endColumn":15},{"ruleId":"625","severity":1,"message":"656","line":15,"column":16,"nodeType":"627","messageId":"628","endLine":15,"endColumn":22},{"ruleId":"625","severity":1,"message":"657","line":20,"column":31,"nodeType":"627","messageId":"628","endLine":20,"endColumn":41},{"ruleId":"625","severity":1,"message":"658","line":90,"column":7,"nodeType":"627","messageId":"628","endLine":90,"endColumn":15},{"ruleId":"649","severity":1,"message":"650","line":99,"column":32,"nodeType":"651","messageId":"652","endLine":99,"endColumn":34},{"ruleId":"649","severity":1,"message":"650","line":99,"column":61,"nodeType":"651","messageId":"652","endLine":99,"endColumn":63},{"ruleId":"649","severity":1,"message":"650","line":108,"column":32,"nodeType":"651","messageId":"652","endLine":108,"endColumn":34},{"ruleId":"649","severity":1,"message":"650","line":108,"column":61,"nodeType":"651","messageId":"652","endLine":108,"endColumn":63},{"ruleId":"649","severity":1,"message":"650","line":113,"column":54,"nodeType":"651","messageId":"652","endLine":113,"endColumn":56},{"ruleId":"649","severity":1,"message":"650","line":113,"column":87,"nodeType":"651","messageId":"652","endLine":113,"endColumn":89},{"ruleId":"625","severity":1,"message":"659","line":125,"column":12,"nodeType":"627","messageId":"628","endLine":125,"endColumn":24},{"ruleId":"625","severity":1,"message":"660","line":128,"column":12,"nodeType":"627","messageId":"628","endLine":128,"endColumn":23},{"ruleId":"649","severity":1,"message":"650","line":133,"column":31,"nodeType":"651","messageId":"652","endLine":133,"endColumn":33},{"ruleId":"649","severity":1,"message":"650","line":133,"column":60,"nodeType":"651","messageId":"652","endLine":133,"endColumn":62},{"ruleId":"625","severity":1,"message":"661","line":149,"column":11,"nodeType":"627","messageId":"628","endLine":149,"endColumn":27},{"ruleId":"625","severity":1,"message":"662","line":156,"column":11,"nodeType":"627","messageId":"628","endLine":156,"endColumn":29},{"ruleId":"625","severity":1,"message":"663","line":171,"column":11,"nodeType":"627","messageId":"628","endLine":171,"endColumn":30},{"ruleId":"625","severity":1,"message":"664","line":2,"column":10,"nodeType":"627","messageId":"628","endLine":2,"endColumn":14},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"666","line":14,"column":10,"nodeType":"627","messageId":"628","endLine":14,"endColumn":19},{"ruleId":"625","severity":1,"message":"667","line":16,"column":10,"nodeType":"627","messageId":"628","endLine":16,"endColumn":23},{"ruleId":"625","severity":1,"message":"656","line":16,"column":40,"nodeType":"627","messageId":"628","endLine":16,"endColumn":46},{"ruleId":"625","severity":1,"message":"640","line":18,"column":10,"nodeType":"627","messageId":"628","endLine":18,"endColumn":17},{"ruleId":"625","severity":1,"message":"668","line":21,"column":10,"nodeType":"627","messageId":"628","endLine":21,"endColumn":37},{"ruleId":"625","severity":1,"message":"669","line":23,"column":10,"nodeType":"627","messageId":"628","endLine":23,"endColumn":26},{"ruleId":"625","severity":1,"message":"670","line":24,"column":10,"nodeType":"627","messageId":"628","endLine":24,"endColumn":30},{"ruleId":"625","severity":1,"message":"664","line":26,"column":10,"nodeType":"627","messageId":"628","endLine":26,"endColumn":14},{"ruleId":"625","severity":1,"message":"671","line":48,"column":7,"nodeType":"627","messageId":"628","endLine":48,"endColumn":15},{"ruleId":"625","severity":1,"message":"672","line":53,"column":11,"nodeType":"627","messageId":"628","endLine":53,"endColumn":18},{"ruleId":"649","severity":1,"message":"650","line":66,"column":54,"nodeType":"651","messageId":"652","endLine":66,"endColumn":56},{"ruleId":"649","severity":1,"message":"650","line":71,"column":59,"nodeType":"651","messageId":"652","endLine":71,"endColumn":61},{"ruleId":"649","severity":1,"message":"650","line":73,"column":58,"nodeType":"651","messageId":"652","endLine":73,"endColumn":60},{"ruleId":"625","severity":1,"message":"673","line":1,"column":27,"nodeType":"627","messageId":"628","endLine":1,"endColumn":46},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"626","line":5,"column":22,"nodeType":"627","messageId":"628","endLine":5,"endColumn":31},{"ruleId":"625","severity":1,"message":"675","line":11,"column":11,"nodeType":"627","messageId":"628","endLine":11,"endColumn":15},{"ruleId":"649","severity":1,"message":"650","line":17,"column":32,"nodeType":"651","messageId":"652","endLine":17,"endColumn":34},{"ruleId":"649","severity":1,"message":"650","line":17,"column":61,"nodeType":"651","messageId":"652","endLine":17,"endColumn":63},{"ruleId":"649","severity":1,"message":"650","line":23,"column":32,"nodeType":"651","messageId":"652","endLine":23,"endColumn":34},{"ruleId":"649","severity":1,"message":"650","line":23,"column":61,"nodeType":"651","messageId":"652","endLine":23,"endColumn":63},{"ruleId":"625","severity":1,"message":"676","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":13},{"ruleId":"625","severity":1,"message":"677","line":6,"column":8,"nodeType":"627","messageId":"628","endLine":6,"endColumn":18},{"ruleId":"625","severity":1,"message":"670","line":12,"column":10,"nodeType":"627","messageId":"628","endLine":12,"endColumn":30},{"ruleId":"625","severity":1,"message":"678","line":16,"column":7,"nodeType":"627","messageId":"628","endLine":16,"endColumn":11},{"ruleId":"625","severity":1,"message":"679","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":14},{"ruleId":"625","severity":1,"message":"630","line":7,"column":27,"nodeType":"627","messageId":"628","endLine":7,"endColumn":40},{"ruleId":"625","severity":1,"message":"626","line":7,"column":54,"nodeType":"627","messageId":"628","endLine":7,"endColumn":63},{"ruleId":"625","severity":1,"message":"680","line":9,"column":10,"nodeType":"627","messageId":"628","endLine":9,"endColumn":23},{"ruleId":"625","severity":1,"message":"677","line":10,"column":15,"nodeType":"627","messageId":"628","endLine":10,"endColumn":25},{"ruleId":"625","severity":1,"message":"681","line":12,"column":10,"nodeType":"627","messageId":"628","endLine":12,"endColumn":21},{"ruleId":"625","severity":1,"message":"682","line":19,"column":10,"nodeType":"627","messageId":"628","endLine":19,"endColumn":25},{"ruleId":"625","severity":1,"message":"683","line":71,"column":72,"nodeType":"627","messageId":"628","endLine":71,"endColumn":90},{"ruleId":"649","severity":1,"message":"650","line":105,"column":51,"nodeType":"651","messageId":"652","endLine":105,"endColumn":53},{"ruleId":"625","severity":1,"message":"684","line":7,"column":10,"nodeType":"627","messageId":"628","endLine":7,"endColumn":13},{"ruleId":"625","severity":1,"message":"677","line":7,"column":15,"nodeType":"627","messageId":"628","endLine":7,"endColumn":25},{"ruleId":"625","severity":1,"message":"629","line":10,"column":17,"nodeType":"627","messageId":"628","endLine":10,"endColumn":25},{"ruleId":"625","severity":1,"message":"630","line":10,"column":27,"nodeType":"627","messageId":"628","endLine":10,"endColumn":40},{"ruleId":"625","severity":1,"message":"657","line":10,"column":42,"nodeType":"627","messageId":"628","endLine":10,"endColumn":52},{"ruleId":"625","severity":1,"message":"685","line":15,"column":10,"nodeType":"627","messageId":"628","endLine":15,"endColumn":19},{"ruleId":"625","severity":1,"message":"686","line":47,"column":11,"nodeType":"627","messageId":"628","endLine":47,"endColumn":32},{"ruleId":"649","severity":1,"message":"650","line":75,"column":67,"nodeType":"651","messageId":"652","endLine":75,"endColumn":69},{"ruleId":"625","severity":1,"message":"677","line":11,"column":10,"nodeType":"627","messageId":"628","endLine":11,"endColumn":20},{"ruleId":"625","severity":1,"message":"687","line":12,"column":10,"nodeType":"627","messageId":"628","endLine":12,"endColumn":23},{"ruleId":"625","severity":1,"message":"688","line":60,"column":11,"nodeType":"627","messageId":"628","endLine":60,"endColumn":27},{"ruleId":"625","severity":1,"message":"672","line":61,"column":11,"nodeType":"627","messageId":"628","endLine":61,"endColumn":18},{"ruleId":"625","severity":1,"message":"680","line":5,"column":10,"nodeType":"627","messageId":"628","endLine":5,"endColumn":23},{"ruleId":"625","severity":1,"message":"641","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":16},{"ruleId":"625","severity":1,"message":"689","line":10,"column":10,"nodeType":"627","messageId":"628","endLine":10,"endColumn":28},{"ruleId":"625","severity":1,"message":"690","line":54,"column":11,"nodeType":"627","messageId":"628","endLine":54,"endColumn":23},{"ruleId":"625","severity":1,"message":"677","line":1,"column":21,"nodeType":"627","messageId":"628","endLine":1,"endColumn":31},{"ruleId":"625","severity":1,"message":"691","line":1,"column":33,"nodeType":"627","messageId":"628","endLine":1,"endColumn":41},{"ruleId":"625","severity":1,"message":"654","line":7,"column":8,"nodeType":"627","messageId":"628","endLine":7,"endColumn":14},{"ruleId":"625","severity":1,"message":"692","line":8,"column":8,"nodeType":"627","messageId":"628","endLine":8,"endColumn":16},{"ruleId":"625","severity":1,"message":"693","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":26},{"ruleId":"625","severity":1,"message":"694","line":10,"column":8,"nodeType":"627","messageId":"628","endLine":10,"endColumn":22},{"ruleId":"625","severity":1,"message":"695","line":11,"column":8,"nodeType":"627","messageId":"628","endLine":11,"endColumn":23},{"ruleId":"625","severity":1,"message":"696","line":12,"column":8,"nodeType":"627","messageId":"628","endLine":12,"endColumn":22},{"ruleId":"625","severity":1,"message":"697","line":13,"column":8,"nodeType":"627","messageId":"628","endLine":13,"endColumn":17},{"ruleId":"625","severity":1,"message":"698","line":14,"column":10,"nodeType":"627","messageId":"628","endLine":14,"endColumn":20},{"ruleId":"625","severity":1,"message":"699","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":27},{"ruleId":"625","severity":1,"message":"700","line":64,"column":7,"nodeType":"627","messageId":"628","endLine":64,"endColumn":12},{"ruleId":"625","severity":1,"message":"701","line":76,"column":11,"nodeType":"627","messageId":"628","endLine":76,"endColumn":26},{"ruleId":"625","severity":1,"message":"672","line":84,"column":11,"nodeType":"627","messageId":"628","endLine":84,"endColumn":18},{"ruleId":"625","severity":1,"message":"686","line":103,"column":11,"nodeType":"627","messageId":"628","endLine":103,"endColumn":32},{"ruleId":"625","severity":1,"message":"673","line":1,"column":27,"nodeType":"627","messageId":"628","endLine":1,"endColumn":46},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"626","line":5,"column":22,"nodeType":"627","messageId":"628","endLine":5,"endColumn":31},{"ruleId":"625","severity":1,"message":"648","line":12,"column":13,"nodeType":"627","messageId":"628","endLine":12,"endColumn":26},{"ruleId":"625","severity":1,"message":"653","line":12,"column":54,"nodeType":"627","messageId":"628","endLine":12,"endColumn":70},{"ruleId":"625","severity":1,"message":"703","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":29},{"ruleId":"625","severity":1,"message":"704","line":22,"column":11,"nodeType":"627","messageId":"628","endLine":22,"endColumn":40},{"ruleId":"649","severity":1,"message":"650","line":25,"column":19,"nodeType":"651","messageId":"652","endLine":25,"endColumn":21},{"ruleId":"625","severity":1,"message":"677","line":1,"column":21,"nodeType":"627","messageId":"628","endLine":1,"endColumn":31},{"ruleId":"625","severity":1,"message":"691","line":1,"column":33,"nodeType":"627","messageId":"628","endLine":1,"endColumn":41},{"ruleId":"625","severity":1,"message":"654","line":7,"column":8,"nodeType":"627","messageId":"628","endLine":7,"endColumn":14},{"ruleId":"625","severity":1,"message":"692","line":8,"column":8,"nodeType":"627","messageId":"628","endLine":8,"endColumn":16},{"ruleId":"625","severity":1,"message":"693","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":26},{"ruleId":"625","severity":1,"message":"694","line":10,"column":8,"nodeType":"627","messageId":"628","endLine":10,"endColumn":22},{"ruleId":"625","severity":1,"message":"695","line":11,"column":8,"nodeType":"627","messageId":"628","endLine":11,"endColumn":23},{"ruleId":"625","severity":1,"message":"696","line":12,"column":8,"nodeType":"627","messageId":"628","endLine":12,"endColumn":22},{"ruleId":"625","severity":1,"message":"697","line":13,"column":8,"nodeType":"627","messageId":"628","endLine":13,"endColumn":17},{"ruleId":"625","severity":1,"message":"698","line":14,"column":10,"nodeType":"627","messageId":"628","endLine":14,"endColumn":20},{"ruleId":"625","severity":1,"message":"699","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":27},{"ruleId":"625","severity":1,"message":"700","line":64,"column":7,"nodeType":"627","messageId":"628","endLine":64,"endColumn":12},{"ruleId":"625","severity":1,"message":"701","line":76,"column":11,"nodeType":"627","messageId":"628","endLine":76,"endColumn":26},{"ruleId":"625","severity":1,"message":"672","line":84,"column":11,"nodeType":"627","messageId":"628","endLine":84,"endColumn":18},{"ruleId":"625","severity":1,"message":"705","line":1,"column":21,"nodeType":"627","messageId":"628","endLine":1,"endColumn":36},{"ruleId":"625","severity":1,"message":"706","line":1,"column":38,"nodeType":"627","messageId":"628","endLine":1,"endColumn":53},{"ruleId":"625","severity":1,"message":"641","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":16},{"ruleId":"625","severity":1,"message":"707","line":16,"column":10,"nodeType":"627","messageId":"628","endLine":16,"endColumn":19},{"ruleId":"625","severity":1,"message":"688","line":68,"column":11,"nodeType":"627","messageId":"628","endLine":68,"endColumn":27},{"ruleId":"625","severity":1,"message":"672","line":69,"column":11,"nodeType":"627","messageId":"628","endLine":69,"endColumn":18},{"ruleId":"625","severity":1,"message":"708","line":70,"column":13,"nodeType":"627","messageId":"628","endLine":70,"endColumn":20},{"ruleId":"625","severity":1,"message":"686","line":89,"column":11,"nodeType":"627","messageId":"628","endLine":89,"endColumn":32},{"ruleId":"625","severity":1,"message":"705","line":1,"column":21,"nodeType":"627","messageId":"628","endLine":1,"endColumn":36},{"ruleId":"625","severity":1,"message":"706","line":1,"column":38,"nodeType":"627","messageId":"628","endLine":1,"endColumn":53},{"ruleId":"625","severity":1,"message":"677","line":12,"column":10,"nodeType":"627","messageId":"628","endLine":12,"endColumn":20},{"ruleId":"625","severity":1,"message":"687","line":13,"column":10,"nodeType":"627","messageId":"628","endLine":13,"endColumn":23},{"ruleId":"625","severity":1,"message":"688","line":62,"column":11,"nodeType":"627","messageId":"628","endLine":62,"endColumn":27},{"ruleId":"625","severity":1,"message":"672","line":63,"column":11,"nodeType":"627","messageId":"628","endLine":63,"endColumn":18},{"ruleId":"625","severity":1,"message":"708","line":64,"column":13,"nodeType":"627","messageId":"628","endLine":64,"endColumn":20},{"ruleId":"625","severity":1,"message":"706","line":1,"column":38,"nodeType":"627","messageId":"628","endLine":1,"endColumn":53},{"ruleId":"625","severity":1,"message":"709","line":4,"column":10,"nodeType":"627","messageId":"628","endLine":4,"endColumn":32},{"ruleId":"625","severity":1,"message":"641","line":9,"column":10,"nodeType":"627","messageId":"628","endLine":9,"endColumn":16},{"ruleId":"625","severity":1,"message":"710","line":9,"column":30,"nodeType":"627","messageId":"628","endLine":9,"endColumn":46},{"ruleId":"625","severity":1,"message":"711","line":9,"column":48,"nodeType":"627","messageId":"628","endLine":9,"endColumn":56},{"ruleId":"625","severity":1,"message":"712","line":10,"column":8,"nodeType":"627","messageId":"628","endLine":10,"endColumn":13},{"ruleId":"625","severity":1,"message":"677","line":15,"column":10,"nodeType":"627","messageId":"628","endLine":15,"endColumn":20},{"ruleId":"625","severity":1,"message":"687","line":16,"column":10,"nodeType":"627","messageId":"628","endLine":16,"endColumn":23},{"ruleId":"625","severity":1,"message":"629","line":17,"column":10,"nodeType":"627","messageId":"628","endLine":17,"endColumn":18},{"ruleId":"625","severity":1,"message":"626","line":17,"column":20,"nodeType":"627","messageId":"628","endLine":17,"endColumn":29},{"ruleId":"625","severity":1,"message":"636","line":18,"column":10,"nodeType":"627","messageId":"628","endLine":18,"endColumn":16},{"ruleId":"625","severity":1,"message":"637","line":18,"column":18,"nodeType":"627","messageId":"628","endLine":18,"endColumn":23},{"ruleId":"625","severity":1,"message":"672","line":68,"column":11,"nodeType":"627","messageId":"628","endLine":68,"endColumn":18},{"ruleId":"625","severity":1,"message":"713","line":70,"column":13,"nodeType":"627","messageId":"628","endLine":70,"endColumn":26},{"ruleId":"625","severity":1,"message":"641","line":4,"column":10,"nodeType":"627","messageId":"628","endLine":4,"endColumn":16},{"ruleId":"625","severity":1,"message":"714","line":4,"column":18,"nodeType":"627","messageId":"628","endLine":4,"endColumn":28},{"ruleId":"625","severity":1,"message":"715","line":2,"column":10,"nodeType":"627","messageId":"628","endLine":2,"endColumn":27},{"ruleId":"625","severity":1,"message":"716","line":3,"column":10,"nodeType":"627","messageId":"628","endLine":3,"endColumn":27},{"ruleId":"625","severity":1,"message":"717","line":7,"column":10,"nodeType":"627","messageId":"628","endLine":7,"endColumn":21},{"ruleId":"625","severity":1,"message":"641","line":9,"column":10,"nodeType":"627","messageId":"628","endLine":9,"endColumn":16},{"ruleId":"625","severity":1,"message":"714","line":9,"column":18,"nodeType":"627","messageId":"628","endLine":9,"endColumn":28},{"ruleId":"625","severity":1,"message":"687","line":16,"column":10,"nodeType":"627","messageId":"628","endLine":16,"endColumn":23},{"ruleId":"625","severity":1,"message":"636","line":18,"column":10,"nodeType":"627","messageId":"628","endLine":18,"endColumn":16},{"ruleId":"625","severity":1,"message":"637","line":18,"column":18,"nodeType":"627","messageId":"628","endLine":18,"endColumn":23},{"ruleId":"625","severity":1,"message":"688","line":49,"column":11,"nodeType":"627","messageId":"628","endLine":49,"endColumn":27},{"ruleId":"625","severity":1,"message":"708","line":50,"column":13,"nodeType":"627","messageId":"628","endLine":50,"endColumn":20},{"ruleId":"625","severity":1,"message":"677","line":2,"column":20,"nodeType":"627","messageId":"628","endLine":2,"endColumn":30},{"ruleId":"625","severity":1,"message":"641","line":4,"column":10,"nodeType":"627","messageId":"628","endLine":4,"endColumn":16},{"ruleId":"625","severity":1,"message":"677","line":4,"column":53,"nodeType":"627","messageId":"628","endLine":4,"endColumn":63},{"ruleId":"625","severity":1,"message":"718","line":12,"column":10,"nodeType":"627","messageId":"628","endLine":12,"endColumn":22},{"ruleId":"625","severity":1,"message":"719","line":12,"column":24,"nodeType":"627","messageId":"628","endLine":12,"endColumn":37},{"ruleId":"625","severity":1,"message":"720","line":13,"column":8,"nodeType":"627","messageId":"628","endLine":13,"endColumn":17},{"ruleId":"625","severity":1,"message":"704","line":28,"column":11,"nodeType":"627","messageId":"628","endLine":28,"endColumn":40},{"ruleId":"625","severity":1,"message":"721","line":64,"column":11,"nodeType":"627","messageId":"628","endLine":64,"endColumn":24},{"ruleId":"625","severity":1,"message":"705","line":1,"column":21,"nodeType":"627","messageId":"628","endLine":1,"endColumn":36},{"ruleId":"625","severity":1,"message":"706","line":1,"column":38,"nodeType":"627","messageId":"628","endLine":1,"endColumn":53},{"ruleId":"625","severity":1,"message":"641","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":16},{"ruleId":"625","severity":1,"message":"672","line":69,"column":11,"nodeType":"627","messageId":"628","endLine":69,"endColumn":18},{"ruleId":"625","severity":1,"message":"708","line":70,"column":13,"nodeType":"627","messageId":"628","endLine":70,"endColumn":20},{"ruleId":"625","severity":1,"message":"641","line":4,"column":10,"nodeType":"627","messageId":"628","endLine":4,"endColumn":16},{"ruleId":"625","severity":1,"message":"704","line":22,"column":11,"nodeType":"627","messageId":"628","endLine":22,"endColumn":40},{"ruleId":"625","severity":1,"message":"722","line":41,"column":11,"nodeType":"627","messageId":"628","endLine":41,"endColumn":28},{"ruleId":"625","severity":1,"message":"723","line":58,"column":12,"nodeType":"627","messageId":"628","endLine":58,"endColumn":22},{"ruleId":"625","severity":1,"message":"680","line":5,"column":10,"nodeType":"627","messageId":"628","endLine":5,"endColumn":23},{"ruleId":"625","severity":1,"message":"724","line":2,"column":10,"nodeType":"627","messageId":"628","endLine":2,"endColumn":19},{"ruleId":"625","severity":1,"message":"705","line":2,"column":21,"nodeType":"627","messageId":"628","endLine":2,"endColumn":36},{"ruleId":"649","severity":1,"message":"650","line":22,"column":25,"nodeType":"651","messageId":"652","endLine":22,"endColumn":27},{"ruleId":"725","severity":1,"message":"726","line":30,"column":8,"nodeType":"727","endLine":30,"endColumn":21,"suggestions":"728"},{"ruleId":"625","severity":1,"message":"673","line":1,"column":27,"nodeType":"627","messageId":"628","endLine":1,"endColumn":46},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"626","line":5,"column":22,"nodeType":"627","messageId":"628","endLine":5,"endColumn":31},{"ruleId":"625","severity":1,"message":"648","line":12,"column":13,"nodeType":"627","messageId":"628","endLine":12,"endColumn":26},{"ruleId":"625","severity":1,"message":"703","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":29},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"703","line":12,"column":22,"nodeType":"627","messageId":"628","endLine":12,"endColumn":29},{"ruleId":"625","severity":1,"message":"648","line":16,"column":13,"nodeType":"627","messageId":"628","endLine":16,"endColumn":26},{"ruleId":"625","severity":1,"message":"729","line":1,"column":10,"nodeType":"627","messageId":"628","endLine":1,"endColumn":15},{"ruleId":"625","severity":1,"message":"730","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":13},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"626","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":19},{"ruleId":"625","severity":1,"message":"629","line":8,"column":21,"nodeType":"627","messageId":"628","endLine":8,"endColumn":29},{"ruleId":"625","severity":1,"message":"731","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":15},{"ruleId":"625","severity":1,"message":"703","line":19,"column":13,"nodeType":"627","messageId":"628","endLine":19,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":24,"column":13,"nodeType":"627","messageId":"628","endLine":24,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"703","line":11,"column":22,"nodeType":"627","messageId":"628","endLine":11,"endColumn":29},{"ruleId":"625","severity":1,"message":"648","line":16,"column":13,"nodeType":"627","messageId":"628","endLine":16,"endColumn":26},{"ruleId":"625","severity":1,"message":"729","line":1,"column":10,"nodeType":"627","messageId":"628","endLine":1,"endColumn":15},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"630","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":23},{"ruleId":"625","severity":1,"message":"703","line":27,"column":13,"nodeType":"627","messageId":"628","endLine":27,"endColumn":20},{"ruleId":"725","severity":1,"message":"732","line":65,"column":8,"nodeType":"727","endLine":65,"endColumn":69,"suggestions":"733"},{"ruleId":"625","severity":1,"message":"703","line":13,"column":13,"nodeType":"627","messageId":"628","endLine":13,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":17,"column":13,"nodeType":"627","messageId":"628","endLine":17,"endColumn":26},{"ruleId":"625","severity":1,"message":"641","line":4,"column":10,"nodeType":"627","messageId":"628","endLine":4,"endColumn":16},{"ruleId":"625","severity":1,"message":"677","line":4,"column":53,"nodeType":"627","messageId":"628","endLine":4,"endColumn":63},{"ruleId":"625","severity":1,"message":"718","line":12,"column":10,"nodeType":"627","messageId":"628","endLine":12,"endColumn":22},{"ruleId":"625","severity":1,"message":"719","line":12,"column":24,"nodeType":"627","messageId":"628","endLine":12,"endColumn":37},{"ruleId":"625","severity":1,"message":"720","line":13,"column":8,"nodeType":"627","messageId":"628","endLine":13,"endColumn":17},{"ruleId":"625","severity":1,"message":"704","line":28,"column":11,"nodeType":"627","messageId":"628","endLine":28,"endColumn":40},{"ruleId":"625","severity":1,"message":"721","line":66,"column":11,"nodeType":"627","messageId":"628","endLine":66,"endColumn":24},{"ruleId":"625","severity":1,"message":"703","line":14,"column":13,"nodeType":"627","messageId":"628","endLine":14,"endColumn":20},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"703","line":17,"column":13,"nodeType":"627","messageId":"628","endLine":17,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":21,"column":13,"nodeType":"627","messageId":"628","endLine":21,"endColumn":26},{"ruleId":"725","severity":1,"message":"734","line":56,"column":8,"nodeType":"727","endLine":56,"endColumn":64,"suggestions":"735"},{"ruleId":"625","severity":1,"message":"729","line":1,"column":10,"nodeType":"627","messageId":"628","endLine":1,"endColumn":15},{"ruleId":"625","severity":1,"message":"730","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":13},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"626","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":19},{"ruleId":"625","severity":1,"message":"629","line":8,"column":21,"nodeType":"627","messageId":"628","endLine":8,"endColumn":29},{"ruleId":"625","severity":1,"message":"731","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":15},{"ruleId":"625","severity":1,"message":"703","line":20,"column":13,"nodeType":"627","messageId":"628","endLine":20,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":24,"column":13,"nodeType":"627","messageId":"628","endLine":24,"endColumn":26},{"ruleId":"625","severity":1,"message":"729","line":1,"column":10,"nodeType":"627","messageId":"628","endLine":1,"endColumn":15},{"ruleId":"625","severity":1,"message":"730","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":13},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"626","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":19},{"ruleId":"625","severity":1,"message":"629","line":8,"column":21,"nodeType":"627","messageId":"628","endLine":8,"endColumn":29},{"ruleId":"625","severity":1,"message":"731","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":15},{"ruleId":"625","severity":1,"message":"703","line":19,"column":13,"nodeType":"627","messageId":"628","endLine":19,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":24,"column":13,"nodeType":"627","messageId":"628","endLine":24,"endColumn":26},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"703","line":18,"column":13,"nodeType":"627","messageId":"628","endLine":18,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":22,"column":13,"nodeType":"627","messageId":"628","endLine":22,"endColumn":26},{"ruleId":"625","severity":1,"message":"673","line":1,"column":27,"nodeType":"627","messageId":"628","endLine":1,"endColumn":46},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"626","line":5,"column":22,"nodeType":"627","messageId":"628","endLine":5,"endColumn":31},{"ruleId":"625","severity":1,"message":"648","line":12,"column":13,"nodeType":"627","messageId":"628","endLine":12,"endColumn":26},{"ruleId":"625","severity":1,"message":"653","line":12,"column":54,"nodeType":"627","messageId":"628","endLine":12,"endColumn":70},{"ruleId":"625","severity":1,"message":"703","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":29},{"ruleId":"625","severity":1,"message":"673","line":1,"column":27,"nodeType":"627","messageId":"628","endLine":1,"endColumn":46},{"ruleId":"625","severity":1,"message":"674","line":3,"column":17,"nodeType":"627","messageId":"628","endLine":3,"endColumn":26},{"ruleId":"625","severity":1,"message":"702","line":3,"column":28,"nodeType":"627","messageId":"628","endLine":3,"endColumn":37},{"ruleId":"625","severity":1,"message":"665","line":4,"column":8,"nodeType":"627","messageId":"628","endLine":4,"endColumn":22},{"ruleId":"625","severity":1,"message":"626","line":5,"column":22,"nodeType":"627","messageId":"628","endLine":5,"endColumn":31},{"ruleId":"625","severity":1,"message":"648","line":12,"column":13,"nodeType":"627","messageId":"628","endLine":12,"endColumn":26},{"ruleId":"625","severity":1,"message":"653","line":12,"column":54,"nodeType":"627","messageId":"628","endLine":12,"endColumn":70},{"ruleId":"625","severity":1,"message":"703","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":29},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"703","line":18,"column":13,"nodeType":"627","messageId":"628","endLine":18,"endColumn":20},{"ruleId":"625","severity":1,"message":"648","line":22,"column":13,"nodeType":"627","messageId":"628","endLine":22,"endColumn":26},{"ruleId":"625","severity":1,"message":"677","line":1,"column":21,"nodeType":"627","messageId":"628","endLine":1,"endColumn":31},{"ruleId":"625","severity":1,"message":"691","line":1,"column":33,"nodeType":"627","messageId":"628","endLine":1,"endColumn":41},{"ruleId":"625","severity":1,"message":"654","line":7,"column":8,"nodeType":"627","messageId":"628","endLine":7,"endColumn":14},{"ruleId":"625","severity":1,"message":"692","line":8,"column":8,"nodeType":"627","messageId":"628","endLine":8,"endColumn":16},{"ruleId":"625","severity":1,"message":"693","line":9,"column":8,"nodeType":"627","messageId":"628","endLine":9,"endColumn":26},{"ruleId":"625","severity":1,"message":"694","line":10,"column":8,"nodeType":"627","messageId":"628","endLine":10,"endColumn":22},{"ruleId":"625","severity":1,"message":"695","line":11,"column":8,"nodeType":"627","messageId":"628","endLine":11,"endColumn":23},{"ruleId":"625","severity":1,"message":"696","line":12,"column":8,"nodeType":"627","messageId":"628","endLine":12,"endColumn":22},{"ruleId":"625","severity":1,"message":"697","line":13,"column":8,"nodeType":"627","messageId":"628","endLine":13,"endColumn":17},{"ruleId":"625","severity":1,"message":"698","line":14,"column":10,"nodeType":"627","messageId":"628","endLine":14,"endColumn":20},{"ruleId":"625","severity":1,"message":"699","line":14,"column":22,"nodeType":"627","messageId":"628","endLine":14,"endColumn":27},{"ruleId":"625","severity":1,"message":"700","line":64,"column":7,"nodeType":"627","messageId":"628","endLine":64,"endColumn":12},{"ruleId":"625","severity":1,"message":"701","line":76,"column":11,"nodeType":"627","messageId":"628","endLine":76,"endColumn":26},{"ruleId":"625","severity":1,"message":"672","line":84,"column":11,"nodeType":"627","messageId":"628","endLine":84,"endColumn":18},{"ruleId":"625","severity":1,"message":"686","line":106,"column":11,"nodeType":"627","messageId":"628","endLine":106,"endColumn":32},{"ruleId":"625","severity":1,"message":"641","line":4,"column":10,"nodeType":"627","messageId":"628","endLine":4,"endColumn":16},{"ruleId":"625","severity":1,"message":"736","line":15,"column":36,"nodeType":"627","messageId":"628","endLine":15,"endColumn":40},{"ruleId":"625","severity":1,"message":"704","line":18,"column":11,"nodeType":"627","messageId":"628","endLine":18,"endColumn":40},{"ruleId":"625","severity":1,"message":"729","line":1,"column":10,"nodeType":"627","messageId":"628","endLine":1,"endColumn":15},{"ruleId":"625","severity":1,"message":"665","line":5,"column":8,"nodeType":"627","messageId":"628","endLine":5,"endColumn":22},{"ruleId":"625","severity":1,"message":"702","line":6,"column":10,"nodeType":"627","messageId":"628","endLine":6,"endColumn":19},{"ruleId":"625","severity":1,"message":"630","line":8,"column":10,"nodeType":"627","messageId":"628","endLine":8,"endColumn":23},{"ruleId":"625","severity":1,"message":"703","line":28,"column":13,"nodeType":"627","messageId":"628","endLine":28,"endColumn":20},{"ruleId":"649","severity":1,"message":"650","line":73,"column":52,"nodeType":"651","messageId":"652","endLine":73,"endColumn":54},{"ruleId":"649","severity":1,"message":"650","line":75,"column":63,"nodeType":"651","messageId":"652","endLine":75,"endColumn":65},{"ruleId":"725","severity":1,"message":"737","line":81,"column":8,"nodeType":"727","endLine":81,"endColumn":69,"suggestions":"738"},{"ruleId":"649","severity":1,"message":"650","line":87,"column":52,"nodeType":"651","messageId":"652","endLine":87,"endColumn":54},{"ruleId":"649","severity":1,"message":"650","line":89,"column":63,"nodeType":"651","messageId":"652","endLine":89,"endColumn":65},{"ruleId":"725","severity":1,"message":"739","line":98,"column":8,"nodeType":"727","endLine":98,"endColumn":109,"suggestions":"740"},"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'createContext' is defined but never used.","'ChainId' is defined but never used.","'Header' is defined but never used.","'Container' is defined but never used.","'Main' is defined but never used.","'Header1' is defined but never used.","'Routes' is defined but never used.","'Route' is defined but never used.","'ResponsiveAppBar1' is defined but never used.","'Box' is defined but never used.","'Balance' is defined but never used.","'Button' is defined but never used.","'Chip' is defined but never used.","'InformationPage' is defined but never used.","'activateBrowserWallet' is assigned a value but never used.","'deactivate' is assigned a value but never used.","'isConnected' is assigned a value but never used.","'numberMain' is assigned a value but never used.","'chainIdentity' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'dappTokenAddress' is assigned a value but never used.","'Avatar' is defined but never used.","'Tooltip' is defined but never used.","'Outlet' is defined but never used.","'useContext' is defined but never used.","'settings' is assigned a value but never used.","'anchorElUser' is assigned a value but never used.","'chainNumber' is assigned a value but never used.","'handleCloseSnack' is assigned a value but never used.","'handleOpenUserMenu' is assigned a value but never used.","'handleCloseUserMenu' is assigned a value but never used.","'Link' is defined but never used.","'networkMapping' is defined but never used.","'textAlign' is defined but never used.","'BrowserRouter' is defined but never used.","'GridPurchasedPreSaleBalance' is defined but never used.","'GridTotalStaking' is defined but never used.","'GridStakingUnstaking' is defined but never used.","'pathList' is assigned a value but never used.","'classes' is assigned a value but never used.","'useContractFunction' is defined but never used.","'BigNumber' is defined but never used.","'data' is assigned a value but never used.","'Paper' is defined but never used.","'Typography' is defined but never used.","'Item' is assigned a value but never used.","'Grid' is defined but never used.","'tokenToString' is defined but never used.","'UnStakeForm' is defined but never used.","'findByLabelText' is defined but never used.","'dapp_token_address' is assigned a value but never used.","'Tab' is defined but never used.","'MyContext' is defined but never used.","'fStakingLevel' is assigned a value but never used.","'ThemeProvider' is defined but never used.","'dAppTokenAddress' is assigned a value but never used.","'CheckpointsPreSale' is defined but never used.","'changeNumber' is assigned a value but never used.","'Checkbox' is defined but never used.","'MenuIcon' is defined but never used.","'MonetizationOnIcon' is defined but never used.","'PriceCheckIcon' is defined but never used.","'LocalPoliceIcon' is defined but never used.","'ThumbUpAltIcon' is defined but never used.","'CheckIcon' is defined but never used.","'deepOrange' is defined but never used.","'green' is defined but never used.","'Item2' is assigned a value but never used.","'CheckpointProps' is defined but never used.","'constants' is defined but never used.","'chainId' is assigned a value but never used.","'formattedTokenBalance' is assigned a value but never used.","'useTokenBalance' is defined but never used.","'useEtherBalance' is defined but never used.","'ftruncate' is defined but never used.","'account' is assigned a value but never used.","'useClaimStakingRewards' is defined but never used.","'CircularProgress' is defined but never used.","'Snackbar' is defined but never used.","'Alert' is defined but never used.","'notifications' is assigned a value but never used.","'makeStyles' is defined but never used.","'useStakingBalance' is defined but never used.","'useStakingRewards' is defined but never used.","'formatUnits' is defined but never used.","'AddModerator' is defined but never used.","'MarginRounded' is defined but never used.","'TextField' is defined but never used.","'isWithdrawing' is assigned a value but never used.","'handleStakeSubmit' is assigned a value but never used.","'btnDisable' is assigned a value but never used.","'useEthers' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'walletStatus'. Either include it or remove the dependency array.","ArrayExpression",["741"],"'Token' is defined but never used.","'ERC20' is defined but never used.","'PreSale' is defined but never used.","React Hook useEffect has a missing dependency: 'preSaleFundSend'. Either include it or remove the dependency array.",["742"],"React Hook useEffect has a missing dependency: 'stakeSend'. Either include it or remove the dependency array.",["743"],"'name' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'preSaleFundEachPreSaleNumberStatus', 'preSaleFundFCFSEachPreSaleNumberStatus', 'preSaleFundFCFSSend', 'preSaleFundSend', 'preSaleFundWithoutStakingSend', and 'preSaleNumber'. Either include them or remove the dependency array.",["744"],"React Hook useEffect has missing dependencies: 'preSaleFundEachPreSaleNumberStatus' and 'preSaleFundFCFSEachPreSaleNumberStatus'. Either include them or remove the dependency array.",["745"],{"desc":"746","fix":"747"},{"desc":"748","fix":"749"},{"desc":"750","fix":"751"},{"desc":"752","fix":"753"},{"desc":"754","fix":"755"},"Update the dependencies array to be: [checkpoints, walletStatus]",{"range":"756","text":"757"},"Update the dependencies array to be: [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress, preSaleFundSend]",{"range":"758","text":"759"},"Update the dependencies array to be: [approveAndStakeErc20State, amountToStake, tokenAddress, stakeSend]",{"range":"760","text":"761"},"Update the dependencies array to be: [approveAndPreSaleErc20State, AmountForPreSale, tokenAddress, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundSend, preSaleNumber, preSaleFundFCFSSend, preSaleFundWithoutStakingSend]",{"range":"762","text":"763"},"Update the dependencies array to be: [approveAndPreSaleErc20State, preSaleFundState, preSaleFundFCFSState, preSaleFundWithoutStakingState, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus]",{"range":"764","text":"765"},[966,979],"[checkpoints, walletStatus]",[2309,2370],"[approveAndPreSaleErc20State, AmountForPreSale, tokenAddress, preSaleFundSend]",[2032,2088],"[approveAndStakeErc20State, amountToStake, tokenAddress, stakeSend]",[4089,4150],"[approveAndPreSaleErc20State, AmountForPreSale, tokenAddress, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus, preSaleFundSend, preSaleNumber, preSaleFundFCFSSend, preSaleFundWithoutStakingSend]",[4717,4818],"[approveAndPreSaleErc20State, preSaleFundState, preSaleFundFCFSState, preSaleFundWithoutStakingState, preSaleFundEachPreSaleNumberStatus, preSaleFundFCFSEachPreSaleNumberStatus]"]